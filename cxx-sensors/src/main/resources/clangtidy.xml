<?xml version="1.0" encoding="UTF-8"?>
<!--
  C and C++ rules from
  * http://clang.llvm.org/extra/clang-tidy/checks/list.html
  * http://clang-analyzer.llvm.org/available_checks.html
-->
<rules>
<rule>
  <key>CustomRuleTemplate</key>
  <cardinality>MULTIPLE</cardinality>
  <name>Template for custom Custom rules</name>
  <description><![CDATA[
      <p>Follow these steps to make your custom Custom rules available in SonarQube:</p>
<ol>
  <ol>
    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>
    <li>Enable the newly created rule in your quality profile</li>
  </ol>
  <li>Relaunch an analysis on your projects, et voil√†, your custom rules are executed!</li>
</ol>
      ]]></description>
  <severity>INFO</severity>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-diagnostic-error</key>
  <name>clang-diagnostic-error</name>
  <description><![CDATA[
      <p>Diagnostic text: compiler error, e.g header file not found</p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-diagnostic-warning</key>
  <name>clang-diagnostic-warning</name>
  <description><![CDATA[
      <p>Diagnostic text: default compiler warnings</p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>boost-use-to-string</key>
  <name>boost-use-to-string</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - boost-use-to-string</p>
</div>
<h1 id="boost-use-to-string">boost-use-to-string</h1>
<p>This check finds conversion from integer type like <code>int</code> to <code>std::string</code> or <code>std::wstring</code> using <code>boost::lexical_cast</code>, and replace it with calls to <code>std::to_string</code> and <code>std::to_wstring</code>.</p>
<p>It doesn't replace conversion from floating points despite the <code>to_string</code> overloads, because it would change the behaviour.</p>
<blockquote>
<pre class="sourceCode c++"><code>auto str = boost::lexical_cast&lt;std::string&gt;(42);
auto wstr = boost::lexical_cast&lt;std::wstring&gt;(2137LL);

// Will be changed to
auto str = std::to_string(42);
auto wstr = std::to_wstring(2137LL);</code></pre>
</blockquote>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/boost-use-to-string.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-dcl50-cpp</key>
  <name>cert-dcl50-cpp</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-dcl50-cpp</p>
</div>
<h1 id="cert-dcl50-cpp">cert-dcl50-cpp</h1>
<p>This check flags all function definitions (but not declarations) of C-style variadic functions.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL50-CPP.+Do+not+define+a+C-style+variadic+function">DCL50-CPP. Do not define a C-style variadic function</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl50-cpp.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-env33-c</key>
  <name>cert-env33-c</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-env33-c</p>
</div>
<h1 id="cert-env33-c">cert-env33-c</h1>
<p>This check flags calls to <code>system()</code>, <code>popen()</code>, and <code>_popen()</code>, which execute a command processor. It does not flag calls to <code>system()</code> with a null pointer argument, as such a call checks for the presence of a command processor but does not actually attempt to execute a command.</p>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=2130132">ENV33-C. Do not call system()</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-env33-c.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-err34-c</key>
  <name>cert-err34-c</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-err34-c</p>
</div>
<h1 id="cert-err34-c">cert-err34-c</h1>
<p>This check flags calls to string-to-number conversion functions that do not verify the validity of the conversion, such as <code>atoi()</code> or <code>scanf()</code>. It does not flag calls to <code>strtol()</code>, or other, related conversion functions that do perform better error checking.</p>
<pre class="sourceCode c"><code>#include &lt;stdlib.h&gt;

void func(const char *buff) {
  int si;

  if (buff) {
    si = atoi(buff); /* &#39;atoi&#39; used to convert a string to an integer, but function will
                         not report conversion errors; consider using &#39;strtol&#39; instead. */
  } else {
    /* Handle error */
  }
}</code></pre>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/ERR34-C.+Detect+errors+when+converting+a+string+to+a+number">ERR34-C. Detect errors when converting a string to a number</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err34-c.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-err52-cpp</key>
  <name>cert-err52-cpp</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-err52-cpp</p>
</div>
<h1 id="cert-err52-cpp">cert-err52-cpp</h1>
<p>This check flags all call expressions involving <code>setjmp()</code> and <code>longjmp()</code>.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=1834">ERR52-CPP. Do not use setjmp() or longjmp()</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err52-cpp.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-err58-cpp</key>
  <name>cert-err58-cpp</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-err58-cpp</p>
</div>
<h1 id="cert-err58-cpp">cert-err58-cpp</h1>
<p>This check flags all <code>static</code> or <code>thread_local</code> variable declarations where the initializer for the object may throw an exception.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/ERR58-CPP.+Handle+all+exceptions+thrown+before+main%28%29+begins+executing">ERR58-CPP. Handle all exceptions thrown before main() begins executing</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err58-cpp.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-err60-cpp</key>
  <name>cert-err60-cpp</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-err60-cpp</p>
</div>
<h1 id="cert-err60-cpp">cert-err60-cpp</h1>
<p>This check flags all throw expressions where the exception object is not nothrow copy constructible.</p>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/ERR60-CPP.+Exception+objects+must+be+nothrow+copy+constructible">ERR60-CPP. Exception objects must be nothrow copy constructible</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err60-cpp.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cert-flp30-c</key>
  <name>cert-flp30-c</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cert-flp30-c</p>
</div>
<h1 id="cert-flp30-c">cert-flp30-c</h1>
<p>This check flags <code>for</code> loops where the induction expression has a floating-point type.</p>
<p>This check corresponds to the CERT C Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/FLP30-C.+Do+not+use+floating-point+variables+as+loop+counters">FLP30-C. Do not use floating-point variables as loop counters</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-flp30-c.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>cert</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-interfaces-global-init</key>
  <name>cppcoreguidelines-interfaces-global-init</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-interfaces-global-init</p>
</div>
<h1 id="cppcoreguidelines-interfaces-global-init">cppcoreguidelines-interfaces-global-init</h1>
<p>This check flags initializers of globals that access extern objects, and therefore can lead to order-of-initialization problems.</p>
<p>This rule is part of the &quot;Interfaces&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-global-init" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Ri-global-init</a></p>
<p>Note that currently this does not flag calls to non-constexpr functions, and therefore globals could still be accessed from functions themselves.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-interfaces-global-init.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>bad-practice</tag>
  <tag>suspicious</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-no-malloc</key>
  <name>cppcoreguidelines-no-malloc</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-no-malloc</p>
</div>
<h1 id="cppcoreguidelines-no-malloc">cppcoreguidelines-no-malloc</h1>
<p>This check handles C-Style memory management using <code>malloc()</code>, <code>realloc()</code>, <code>calloc()</code> and <code>free()</code>. It warns about its use and tries to suggest the use of an appropriate RAII object. Furthermore, it can be configured to check against a user-specified list of functions that are used for memory management (e.g. <code>posix_memalign()</code>). See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Rr-mallocfree">C++ Core Guidelines</a>.</p>
<p>There is no attempt made to provide fix-it hints, since manual resource management isn't easily transformed automatically into RAII.</p>
<pre class="sourceCode c++"><code>// Warns each of the following lines.
// Containers like std::vector or std::string should be used.
char* some_string = (char*) malloc(sizeof(char) * 20);
char* some_string = (char*) realloc(sizeof(char) * 30);
free(some_string);

int* int_array = (int*) calloc(30, sizeof(int));

// Rather use a smartpointer or stack variable.
struct some_struct* s = (struct some_struct*) malloc(sizeof(struct some_struct));</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Allocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::malloc;::calloc</code>.</p>
</div>
<div class="option">
<p>Deallocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::free</code>.</p>
</div>
<div class="option">
<p>Reallocations</p>
<p>Semicolon-separated list of fully qualified names of memory allocation functions. Defaults to <code>::realloc</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>bad-practice</tag>
  <tag>suspicious</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-bounds-array-to-pointer-decay</key>
  <name>cppcoreguidelines-pro-bounds-array-to-pointer-decay</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-array-to-pointer-decay</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-array-to-pointer-decay">cppcoreguidelines-pro-bounds-array-to-pointer-decay</h1>
<p>This check flags all array to pointer decays.</p>
<p>Pointers should not be used as arrays. <code>span&lt;T&gt;</code> is a bounds-checked, safe alternative to using pointers to access arrays.</p>
<p>This rule is part of the &quot;Bounds safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-decay" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-decay</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>bad-practice</tag>
  <tag>suspicious</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-bounds-constant-array-index</key>
  <name>cppcoreguidelines-pro-bounds-constant-array-index</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-constant-array-index</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-constant-array-index">cppcoreguidelines-pro-bounds-constant-array-index</h1>
<p>This check flags all array subscript expressions on static arrays and <code>std::arrays</code> that either do not have a constant integer expression index or are out of bounds (for <code>std::array</code>). For out-of-bounds checking of static arrays, see the <span class="title-ref">-Warray-bounds</span> Clang diagnostic.</p>
<p>This rule is part of the &quot;Bounds safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-arrayindex" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-arrayindex</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>GslHeader</p>
<p>The check can generate fixes after this option has been set to the name of the include file that contains <code>gsl::at()</code>, e.g. <span class="title-ref">&quot;gsl/gsl.h&quot;</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-constant-array-index.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-bounds-pointer-arithmetic</key>
  <name>cppcoreguidelines-pro-bounds-pointer-arithmetic</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-bounds-pointer-arithmetic</p>
</div>
<h1 id="cppcoreguidelines-pro-bounds-pointer-arithmetic">cppcoreguidelines-pro-bounds-pointer-arithmetic</h1>
<p>This check flags all usage of pointer arithmetic, because it could lead to an invalid pointer. Subtraction of two pointers is not flagged by this check.</p>
<p>Pointers should only refer to single objects, and pointer arithmetic is fragile and easy to get wrong. <code>span&lt;T&gt;</code> is a bounds-checked, safe type for accessing arrays of data.</p>
<p>This rule is part of the &quot;Bounds safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-arithmetic" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-arithmetic</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-pointer-arithmetic.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-const-cast</key>
  <name>cppcoreguidelines-pro-type-const-cast</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-const-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-const-cast">cppcoreguidelines-pro-type-const-cast</h1>
<p>This check flags all uses of <code>const_cast</code> in C++ code.</p>
<p>Modifying a variable that was declared const is undefined behavior, even with <code>const_cast</code>.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-constcast" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-constcast</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-cstyle-cast</key>
  <name>cppcoreguidelines-pro-type-cstyle-cast</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-cstyle-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-cstyle-cast">cppcoreguidelines-pro-type-cstyle-cast</h1>
<p>This check flags all use of C-style casts that perform a <code>static_cast</code> downcast, <code>const_cast</code>, or <code>reinterpret_cast</code>.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type X to be accessed as if it were of an unrelated type Z. Note that a C-style <code>(T)expression</code> cast means to perform the first of the following that is possible: a <code>const_cast</code>, a <code>static_cast</code>, a <code>static_cast</code> followed by a <code>const_cast</code>, a <code>reinterpret_cast</code>, or a <code>reinterpret_cast</code> followed by a <code>const_cast</code>. This rule bans <code>(T)expression</code> only when used to perform an unsafe cast.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-cstylecast" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-cstylecast</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-member-init</key>
  <name>cppcoreguidelines-pro-type-member-init</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-member-init</p>
</div>
<h1 id="cppcoreguidelines-pro-type-member-init">cppcoreguidelines-pro-type-member-init</h1>
<p>The check flags user-defined constructor definitions that do not initialize all fields that would be left in an undefined state by default construction, e.g. builtins, pointers and record types without user-provided default constructors containing at least one such type. If these fields aren't initialized, the constructor will leave some of the memory in an undefined state.</p>
<p>For C++11 it suggests fixes to add in-class field initializers. For older versions it inserts the field initializers into the constructor initializer list. It will also initialize any direct base classes that need to be zeroed in the constructor initializer list.</p>
<p>The check takes assignment of fields in the constructor body into account but generates false positives for fields initialized in methods invoked in the constructor body.</p>
<p>The check also flags variables with automatic storage duration that have record types without a user-provided constructor and are not initialized. The suggested fix is to zero initialize the variable via <code>{}</code> for C++11 and beyond or <code>= {}</code> for older language versions.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreArrays</p>
<p>If set to non-zero, the check will not warn about array members that are not zero-initialized during construction. For performance critical code, it may be important to not initialize fixed-size array members. Default is <span class="title-ref">0</span>.</p>
</div>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, corresponding to rule Type.6. See <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-memberinit" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-memberinit</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-reinterpret-cast</key>
  <name>cppcoreguidelines-pro-type-reinterpret-cast</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-reinterpret-cast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-reinterpret-cast">cppcoreguidelines-pro-type-reinterpret-cast</h1>
<p>This check flags all uses of <code>reinterpret_cast</code> in C++ code.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type <code>X</code> to be accessed as if it were of an unrelated type <code>Z</code>.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-reinterpretcast</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-static-cast-downcast</key>
  <name>cppcoreguidelines-pro-type-static-cast-downcast</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-static-cast-downcast</p>
</div>
<h1 id="cppcoreguidelines-pro-type-static-cast-downcast">cppcoreguidelines-pro-type-static-cast-downcast</h1>
<p>This check flags all usages of <code>static_cast</code>, where a base class is casted to a derived class. In those cases, a fix-it is provided to convert the cast to a <code>dynamic_cast</code>.</p>
<p>Use of these casts can violate type safety and cause the program to access a variable that is actually of type <code>X</code> to be accessed as if it were of an unrelated type <code>Z</code>.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-downcast" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-downcast</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-union-access</key>
  <name>cppcoreguidelines-pro-type-union-access</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-union-access</p>
</div>
<h1 id="cppcoreguidelines-pro-type-union-access">cppcoreguidelines-pro-type-union-access</h1>
<p>This check flags all access to members of unions. Passing unions as a whole is not flagged.</p>
<p>Reading from a union member assumes that member was the last one written, and writing to a union member assumes another member with a nontrivial destructor had its destructor called. This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-unions" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-unions</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-union-access.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>cppcoreguidelines-pro-type-vararg</key>
  <name>cppcoreguidelines-pro-type-vararg</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - cppcoreguidelines-pro-type-vararg</p>
</div>
<h1 id="cppcoreguidelines-pro-type-vararg">cppcoreguidelines-pro-type-vararg</h1>
<p>This check flags all calls to c-style vararg functions and all use of <code>va_arg</code>.</p>
<p>To allow for SFINAE use of vararg functions, a call is not flagged if a literal 0 is passed as the only vararg argument.</p>
<p>Passing to varargs assumes the correct type will be read. This is fragile because it cannot generally be enforced to be safe in the language and so relies on programmer discipline to get it right.</p>
<p>This rule is part of the &quot;Type safety&quot; profile of the C++ Core Guidelines, see <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-varargs" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-type-varargs</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-build-explicit-make-pair</key>
  <name>google-build-explicit-make-pair</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-build-explicit-make-pair</p>
</div>
<h1 id="google-build-explicit-make-pair">google-build-explicit-make-pair</h1>
<p>Check that <code>make_pair</code>'s template arguments are deduced.</p>
<p>G++ 4.6 in C++11 mode fails badly if <code>make_pair</code>'s template arguments are specified explicitly, and such use isn't intended in any case.</p>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/explicit_make_pair</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-build-explicit-make-pair.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>bad-practice</tag>
  <tag>cpplint-style</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-build-namespaces</key>
  <name>google-build-namespaces</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-build-namespaces</p>
</div>
<h1 id="google-build-namespaces">google-build-namespaces</h1>
<p><span class="title-ref">cert-dcl59-cpp</span> redirects here as an alias for this check. <span class="title-ref">fuchsia-header-anon-namespaces</span> redirects here as an alias for this check.</p>
<p>Finds anonymous namespaces in headers.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Namespaces" class="uri">https://google.github.io/styleguide/cppguide.html#Namespaces</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/namespaces</span>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include &quot;.&quot; prefix). Default is &quot;h,hh,hpp,hxx&quot;. For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. e.g., &quot;h,hh,hpp,hxx,&quot; (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-build-using-namespace</key>
  <name>google-build-using-namespace</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-build-using-namespace</p>
</div>
<h1 id="google-build-using-namespace">google-build-using-namespace</h1>
<p>Finds <code>using namespace</code> directives.</p>
<p>The check implements the following rule of the <a href="https://google.github.io/styleguide/cppguide.html#Namespaces">Google C++ Style Guide</a>:</p>
<blockquote>
<p>You may not use a using-directive to make all names from a namespace available.</p>
<pre class="sourceCode c++"><code>// Forbidden -- This pollutes the namespace.
using namespace foo;</code></pre>
</blockquote>
<p>Corresponding cpplint.py check name: <span class="title-ref">build/namespaces</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-build-using-namespace.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-default-arguments</key>
  <name>google-default-arguments</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-default-arguments</p>
</div>
<h1 id="google-default-arguments">google-default-arguments</h1>
<p>Checks that default arguments are not given for virtual methods.</p>
<p>See <a href="https://google.github.io/styleguide/cppguide.html#Default_Arguments" class="uri">https://google.github.io/styleguide/cppguide.html#Default_Arguments</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-default-arguments.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-explicit-constructor</key>
  <name>google-explicit-constructor</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-explicit-constructor</p>
</div>
<h1 id="google-explicit-constructor">google-explicit-constructor</h1>
<p>Checks that constructors callable with a single argument and conversion operators are marked explicit to avoid the risk of unintentional implicit conversions.</p>
<p>Consider this example:</p>
<pre class="sourceCode c++"><code>struct S {
  int x;
  operator bool() const { return true; }
};

bool f() {
  S a{1};
  S b{2};
  return a == b;
}</code></pre>
<p>The function will return <code>true</code>, since the objects are implicitly converted to <code>bool</code> before comparison, which is unlikely to be the intent.</p>
<p>The check will suggest inserting <code>explicit</code> before the constructor or conversion operator declaration. However, copy and move constructors should not be explicit, as well as constructors taking a single <code>initializer_list</code> argument.</p>
<p>This code:</p>
<pre class="sourceCode c++"><code>struct S {
  S(int a);
  explicit S(const S&amp;);
  operator bool() const;
  ...</code></pre>
<p>will become</p>
<pre class="sourceCode c++"><code>struct S {
  explicit S(int a);
  S(const S&amp;);
  explicit operator bool() const;
  ...</code></pre>
<p>See <a href="https://google.github.io/styleguide/cppguide.html#Explicit_Constructors" class="uri">https://google.github.io/styleguide/cppguide.html#Explicit_Constructors</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-global-names-in-headers</key>
  <name>google-global-names-in-headers</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-global-names-in-headers</p>
</div>
<h1 id="google-global-names-in-headers">google-global-names-in-headers</h1>
<p>Flag global namespace pollution in header files. Right now it only triggers on <code>using</code> declarations and directives.</p>
<p>The relevant style guide section is <a href="https://google.github.io/styleguide/cppguide.html#Namespaces" class="uri">https://google.github.io/styleguide/cppguide.html#Namespaces</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not contain &quot;.&quot; prefix). Default is &quot;h&quot;. For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. e.g., &quot;h,hh,hpp,hxx,&quot; (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-global-names-in-headers.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-readability-casting</key>
  <name>google-readability-casting</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-readability-casting</p>
</div>
<h1 id="google-readability-casting">google-readability-casting</h1>
<p>Finds usages of C-style casts.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Casting" class="uri">https://google.github.io/styleguide/cppguide.html#Casting</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">readability/casting</span>.</p>
<p>This check is similar to <span class="title-ref">-Wold-style-cast</span>, but it suggests automated fixes in some cases. The reported locations should not be different from the ones generated by <span class="title-ref">-Wold-style-cast</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-casting.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-readability-namespace-comments</key>
  <name>google-readability-namespace-comments</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-readability-namespace-comments</p>
</div>
<div class="meta">

</div>
<h1 id="google-readability-namespace-comments">google-readability-namespace-comments</h1>
<p>The google-readability-namespace-comments check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-namespace-comment.html">llvm-namespace-comment</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-namespace-comments.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-readability-redundant-smartptr-get</key>
  <name>google-readability-redundant-smartptr-get</name>
  <description><![CDATA[<p>
Find and remove redundant calls to smart pointer's ``.get()`` method.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-redundant-smartptr-get.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-readability-todo</key>
  <name>google-readability-todo</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-readability-todo</p>
</div>
<h1 id="google-readability-todo">google-readability-todo</h1>
<p>Finds TODO comments without a username or bug number.</p>
<p>The relevant style guide section is <a href="https://google.github.io/styleguide/cppguide.html#TODO_Comments" class="uri">https://google.github.io/styleguide/cppguide.html#TODO_Comments</a>.</p>
<p>Corresponding cpplint.py check: <span class="title-ref">readability/todo</span></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-todo.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-runtime-int</key>
  <name>google-runtime-int</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-runtime-int</p>
</div>
<h1 id="google-runtime-int">google-runtime-int</h1>
<p>Finds uses of <code>short</code>, <code>long</code> and <code>long long</code> and suggest replacing them with <code>u?intXX(_t)?</code>.</p>
<p>The corresponding style guide rule: <a href="https://google.github.io/styleguide/cppguide.html#Integer_Types" class="uri">https://google.github.io/styleguide/cppguide.html#Integer_Types</a>.</p>
<p>Correspondig cpplint.py check: <span class="title-ref">runtime/int</span>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>UnsignedTypePrefix</p>
<p>A string specifying the unsigned type prefix. Default is <span class="title-ref">uint</span>.</p>
</div>
<div class="option">
<p>SignedTypePrefix</p>
<p>A string specifying the signed type prefix. Default is <span class="title-ref">int</span>.</p>
</div>
<div class="option">
<p>TypeSuffix</p>
<p>A string specifying the type suffix. Default is an empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-runtime-int.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-runtime-member-string-references</key>
  <name>google-runtime-member-string-references</name>
  <description><![CDATA[<p>
Finds members of type ``const string&``.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-runtime-member-string-references.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-runtime-memset</key>
  <name>google-runtime-memset</name>
  <description><![CDATA[<p>
Finds calls to ``memset`` with a literal zero in the length argument.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-runtime-memset.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-runtime-operator</key>
  <name>google-runtime-operator</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-runtime-operator</p>
</div>
<h1 id="google-runtime-operator">google-runtime-operator</h1>
<p>Finds overloads of unary <code>operator &amp;</code>.</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Operator_Overloading" class="uri">https://google.github.io/styleguide/cppguide.html#Operator_Overloading</a></p>
<p>Corresponding cpplint.py check name: <span class="title-ref">runtime/operator</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-runtime-operator.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>bad-practice</tag>
   <tag>cpplint-style</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>google-runtime-references</key>
  <name>google-runtime-references</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - google-runtime-references</p>
</div>
<h1 id="google-runtime-references">google-runtime-references</h1>
<p>Checks the usage of non-constant references in function parameters.</p>
<p>The corresponding style guide rule: <a href="https://google.github.io/styleguide/cppguide.html#Reference_Arguments" class="uri">https://google.github.io/styleguide/cppguide.html#Reference_Arguments</a></p>
<h2 id="options">Options</h2>
<div class="option">
<p>WhiteListTypes</p>
<p>A semicolon-separated list of names of whitelist types. Default is empty.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-runtime-references.html" target="_blank">clang.llvm.org</a></p>
]]></description>
   <tag>cpplint-style</tag>
   <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>llvm-header-guard</key>
  <name>llvm-header-guard</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - llvm-header-guard</p>
</div>
<h1 id="llvm-header-guard">llvm-header-guard</h1>
<p>Finds and fixes header guards that do not adhere to LLVM style.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include &quot;.&quot; prefix). Default is &quot;h,hh,hpp,hxx&quot;. For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. e.g., &quot;h,hh,hpp,hxx,&quot; (note the trailing comma).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-header-guard.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>llvm-style</tag>
  <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>llvm-include-order</key>
  <name>llvm-include-order</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - llvm-include-order</p>
</div>
<h1 id="llvm-include-order">llvm-include-order</h1>
<p>Checks the correct order of <code>#includes</code>.</p>
<p>See <a href="http://llvm.org/docs/CodingStandards.html#include-style" class="uri">http://llvm.org/docs/CodingStandards.html#include-style</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-include-order.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>llvm-style</tag>
  <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>llvm-namespace-comment</key>
  <name>llvm-namespace-comment</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - llvm-namespace-comment</p>
</div>
<h1 id="llvm-namespace-comment">llvm-namespace-comment</h1>
<p><span class="title-ref">google-readability-namespace-comments</span> redirects here as an alias for this check.</p>
<p>Checks that long namespaces have a closing comment.</p>
<p><a href="http://llvm.org/docs/CodingStandards.html#namespace-indentation" class="uri">http://llvm.org/docs/CodingStandards.html#namespace-indentation</a></p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Namespaces" class="uri">https://google.github.io/styleguide/cppguide.html#Namespaces</a></p>
<pre class="sourceCode c++"><code>namespace n1 {
void f();
}

// becomes

namespace n1 {
void f();
}  // namespace n1</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ShortNamespaceLines</p>
<p>Requires the closing brace of the namespace definition to be followed by a closing comment if the body of the namespace has more than <span class="title-ref">ShortNamespaceLines</span> lines of code. The value is an unsigned integer that defaults to <span class="title-ref">1U</span>.</p>
</div>
<div class="option">
<p>SpacesBeforeComments</p>
<p>An unsigned integer specifying the number of spaces before the comment closing a namespace definition. Default is <span class="title-ref">1U</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-namespace-comment.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>llvm-style</tag>
  <tag>bad-practice</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>llvm-twine-local</key>
  <name>llvm-twine-local</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - llvm-twine-local</p>
</div>
<h1 id="llvm-twine-local">llvm-twine-local</h1>
<p>Looks for local <code>Twine</code> variables which are prone to use after frees and should be generally avoided.</p>
<pre class="sourceCode c++"><code>static Twine Moo = Twine(&quot;bark&quot;) + &quot;bah&quot;;

// becomes

static std::string Moo = (Twine(&quot;bark&quot;) + &quot;bah&quot;).str();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-twine-local.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <tag>llvm-style</tag>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-argument-comment</key>
  <name>misc-argument-comment</name>
  <description><![CDATA[<p>
Checks that argument comments match parameter names.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-argument-comment.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-assert-side-effect</key>
  <name>misc-assert-side-effect</name>
  <description><![CDATA[<p>
Finds ``assert()`` with side effect.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-assert-side-effect.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-bool-pointer-implicit-conversion</key>
  <name>misc-bool-pointer-implicit-conversion</name>
  <description><![CDATA[<p>
Checks for conditions based on implicit conversion from a ``bool`` pointer to
``bool``.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-bool-pointer-implicit-conversion.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-dangling-handle</key>
  <name>misc-dangling-handle</name>
  <description><![CDATA[<p>
Detect dangling references in value handlers like
``std::experimental::string_view``.
These dangling references can come from constructing handles from temporary
values, where the temporary is destroyed soon after the handle is created.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-bool-pointer-implicit-conversion.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-definitions-in-headers</key>
  <name>misc-definitions-in-headers</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-definitions-in-headers</p>
</div>
<h1 id="misc-definitions-in-headers">misc-definitions-in-headers</h1>
<p>Finds non-extern non-inline function and variable definitions in header files, which can lead to potential ODR violations in case these headers are included from multiple translation units.</p>
<pre class="sourceCode c++"><code>// Foo.h
int a = 1; // Warning: variable definition.
extern int d; // OK: extern variable.

namespace N {
  int e = 2; // Warning: variable definition.
}

// Warning: variable definition.
const char* str = &quot;foo&quot;;

// OK: internal linkage variable definitions are ignored for now.
// Although these might also cause ODR violations, we can be less certain and
// should try to keep the false-positive rate down.
static int b = 1;
const int c = 1;
const char* const str2 = &quot;foo&quot;;
constexpr int k = 1;

// Warning: function definition.
int g() {
  return 1;
}

// OK: inline function definition is allowed to be defined multiple times.
inline int e() {
  return 1;
}

class A {
public:
  int f1() { return 1; } // OK: implicitly inline member function definition is allowed.
  int f2();

  static int d;
};

// Warning: not an inline member function definition.
int A::f2() { return 1; }

// OK: class static data member declaration is allowed.
int A::d = 1;

// OK: function template is allowed.
template&lt;typename T&gt;
T f3() {
  T a = 1;
  return a;
}

// Warning: full specialization of a function template is not allowed.
template &lt;&gt;
int f3() {
  int a = 1;
  return a;
}

template &lt;typename T&gt;
struct B {
  void f1();
};

// OK: member function definition of a class template is allowed.
template &lt;typename T&gt;
void B&lt;T&gt;::f1() {}

class CE {
  constexpr static int i = 5; // OK: inline variable definition.
};

inline int i = 5; // OK: inline variable definition.

constexpr int f10() { return 0; } // OK: constexpr function implies inline.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HeaderFileExtensions</p>
<p>A comma-separated list of filename extensions of header files (the filename extensions should not include &quot;.&quot; prefix). Default is &quot;h,hh,hpp,hxx&quot;. For header files without an extension, use an empty string (if there are no other desired extensions) or leave an empty element in the list. e.g., &quot;h,hh,hpp,hxx,&quot; (note the trailing comma).</p>
</div>
<div class="option">
<p>UseHeaderFileExtension</p>
<p>When non-zero, the check will use the file extension to distinguish header files. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-definitions-in-headers.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-fold-init-type</key>
  <name>misc-fold-init-type</name>
  <description><![CDATA[<p>
The check flags type mismatches in folds like ``std::accumulate`` that might result in loss of precision.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-fold-init-type.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-forward-declaration-namespace</key>
  <name>misc-forward-declaration-namespace</name>
  <description><![CDATA[<p>
Checks if an unused forward declaration is in a wrong namespace.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-forward-declaration-namespace.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-inaccurate-erase</key>
  <name>misc-inaccurate-erase</name>
  <description><![CDATA[<p>
Checks for inaccurate use of the ``erase()`` method.

Algorithms like remove() do not actually remove any element from the container but return an iterator to the first
redundant element at the end of the container. These redundant elements must be removed using the ``erase()`` method.
This check warns when not all of the elements will be removed due to using an inappropriate overload.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-inaccurate-erase.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-incorrect-roundings</key>
  <name>misc-incorrect-roundings</name>
  <description><![CDATA[<p>
Checks the usage of patterns known to produce incorrect rounding.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-incorrect-roundings.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-inefficient-algorithm</key>
  <name>misc-inefficient-algorithm</name>
  <description><![CDATA[<p>
Warns on inefficient use of STL algorithms on associative containers.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-inefficient-algorithm.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-macro-parentheses</key>
  <name>misc-macro-parentheses</name>
  <description><![CDATA[<p>
Finds macros that can have unexpected behaviour due to missing parentheses.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-macro-parentheses.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-macro-repeated-side-effects</key>
  <name>misc-macro-repeated-side-effects</name>
  <description><![CDATA[<p>
Checks for repeated argument with side effects in macros.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-macro-repeated-side-effects.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-misplaced-const</key>
  <name>misc-misplaced-const</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-misplaced-const</p>
</div>
<h1 id="misc-misplaced-const">misc-misplaced-const</h1>
<p>This check diagnoses when a <code>const</code> qualifier is applied to a <code>typedef</code> to a pointer type rather than to the pointee, because such constructs are often misleading to developers because the <code>const</code> applies to the pointer rather than the pointee.</p>
<p>For instance, in the following code, the resulting type is <code>int *</code> <code>const</code> rather than <code>const int *</code>:</p>
<pre class="sourceCode c++"><code>typedef int *int_ptr;
void f(const int_ptr ptr);</code></pre>
<p>The check does not diagnose when the underlying <code>typedef</code> type is a pointer to a <code>const</code> type or a function pointer type. This is because the <code>const</code> qualifier is less likely to be mistaken because it would be redundant (or disallowed) on the underlying pointee type.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-const.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-misplaced-widening-cast</key>
  <name>misc-misplaced-widening-cast</name>
  <description><![CDATA[<p>
This check will warn when there is a cast of a calculation result to a bigger
type. If the intention of the cast is to avoid loss of precision then the cast
is misplaced, and there can be loss of precision. Otherwise the cast is
ineffective.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-misplaced-widening-cast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-move-const-arg</key>
  <name>misc-move-const-arg</name>
  <description><![CDATA[<p>
The check warns
   * if std::move() is called with a constant argument,
   * if std::move() is called with an argument of a trivially-copyable type,
   * if the result of std::move() is passed as a const reference argument.
In all three cases, the check will suggest a fix that removes the std::move().
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-move-const-arg.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-move-constructor-init</key>
  <name>misc-move-constructor-init</name>
  <description><![CDATA[<p>
The check flags user-defined move constructors that have a ctor-initializer initializing a member or base class through a copy constructor instead of a move constructor.
It also flags constructor arguments that are passed by value, have a non-deleted move-constructor and are assigned to a class field by copy construction.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-move-constructor-init.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-multiple-statement-macro</key>
  <name>misc-multiple-statement-macro</name>
  <description><![CDATA[<p>
Detect multiple statement macros that are used in unbraced conditionals.
Only the first statement of the macro will be inside the conditional and the other ones will be executed unconditionally.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-multiple-statement-macro.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-new-delete-overloads</key>
  <name>misc-new-delete-overloads</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-new-delete-overloads</p>
</div>
<h1 id="misc-new-delete-overloads">misc-new-delete-overloads</h1>
<p><span class="title-ref">cert-dcl54-cpp</span> redirects here as an alias for this check.</p>
<p>The check flags overloaded operator <code>new()</code> and operator <code>delete()</code> functions that do not have a corresponding free store function defined within the same scope. For instance, the check will flag a class implementation of a non-placement operator <code>new()</code> when the class does not also define a non-placement operator <code>delete()</code> function as well.</p>
<p>The check does not flag implicitly-defined operators, deleted or private operators, or placement operators.</p>
<p>This check corresponds to CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL54-CPP.+Overload+allocation+and+deallocation+functions+as+a+pair+in+the+same+scope">DCL54-CPP. Overload allocation and deallocation functions as a pair in the same scope</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-noexcept-move-constructor</key>
  <name>misc-noexcept-move-constructor</name>
  <description><![CDATA[<p>
The check flags user-defined move constructors and assignment operators not
marked with ``noexcept`` or marked with ``noexcept(expr)`` where ``expr``
evaluates to ``false`` (but is not a ``false`` literal itself).
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-noexcept-move-constructor.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-non-copyable-objects</key>
  <name>misc-non-copyable-objects</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-non-copyable-objects</p>
</div>
<h1 id="misc-non-copyable-objects">misc-non-copyable-objects</h1>
<p><span class="title-ref">cert-fio38-c</span> redirects here as an alias for this check.</p>
<p>The check flags dereferences and non-pointer declarations of objects that are not meant to be passed by value, such as C FILE objects or POSIX <code>pthread_mutex_t</code> objects.</p>
<p>This check corresponds to CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/c/FIO38-C.+Do+not+copy+a+FILE+object">FIO38-C. Do not copy a FILE object</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-pointer-and-integral-operation</key>
  <name>misc-pointer-and-integral-operation</name>
  <description><![CDATA[<p>
Looks for operation involving pointers and integral types. A common mistake is
to forget to dereference a pointer. These errors may be detected when a pointer
object is compare to an object with integral type.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-pointer-and-integral-operation.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-redundant-expression</key>
  <name>misc-redundant-expression</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-redundant-expression</p>
</div>
<h1 id="misc-redundant-expression">misc-redundant-expression</h1>
<p>Detect redundant expressions which are typically errors due to copy-paste.</p>
<p>Depending on the operator expressions may be</p>
<ul>
<li>redundant,</li>
<li>always <code>true</code>,</li>
<li>always <code>false</code>,</li>
<li>always a constant (zero or one).</li>
</ul>
<p>Examples:</p>
<pre class="sourceCode c++"><code>((x+1) | (x+1))             // (x+1) is redundant
(p-&gt;x == p-&gt;x)              // always true
(p-&gt;x &lt; p-&gt;x)               // always false
(speed - speed + 1 == 12)   // speed - speed is always zero</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-redundant-expression.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-sizeof-container</key>
  <name>misc-sizeof-container</name>
  <description><![CDATA[<p>
The check finds usages of ``sizeof`` on expressions of STL container types. Most
likely the user wanted to use ``.size()`` instead.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-container.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-sizeof-expression</key>
  <name>misc-sizeof-expression</name>
  <description><![CDATA[<p>
The check finds usages of ``sizeof`` expressions which are most likely errors.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-sizeof-expression.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-static-assert</key>
  <name>misc-static-assert</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-static-assert</p>
</div>
<h1 id="misc-static-assert">misc-static-assert</h1>
<p><span class="title-ref">cert-dcl03-c</span> redirects here as an alias for this check.</p>
<p>Replaces <code>assert()</code> with <code>static_assert()</code> if the condition is evaluatable at compile time.</p>
<p>The condition of <code>static_assert()</code> is evaluated at compile time which is safer and more efficient.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-string-constructor</key>
  <name>misc-string-constructor</name>
  <description><![CDATA[<p>
Finds string constructors that are suspicious and probably errors.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-string-constructor.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-string-integer-assignment</key>
  <name>misc-string-integer-assignment</name>
  <description><![CDATA[<p>
The check finds assignments of an integer to ``std::basic_string&lt;CharT&gt;``
(``std::string``, ``std::wstring``, etc.). The source of the problem is the
following assignment operator of ``std::basic_string&lt;CharT&gt;``: ``basic_string& operator=( CharT ch );``
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-string-integer-assignment.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-string-literal-with-embedded-nul</key>
  <name>misc-string-literal-with-embedded-nul</name>
  <description><![CDATA[<p>
Finds occurences of string literal with embedded NUL character and validates
their usage.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-string-literal-with-embedded-nul.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-suspicious-missing-comma</key>
  <name>misc-suspicious-missing-comma</name>
  <description><![CDATA[<p>
String literals placed side-by-side are concatenated at translation phase 6
(after the preprocessor). This feature is used to represent long string
literal on multiple lines.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-suspicious-missing-comma.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-suspicious-semicolon</key>
  <name>misc-suspicious-semicolon</name>
  <description><![CDATA[<p>
Finds most instances of stray semicolons that unexpectedly alter the meaning of
the code. More specifically, it looks for ``if``, ``while``, ``for`` and
``for-range`` statements whose body is a single semicolon, and then analyzes the
context of the code (e.g. indentation) in an attempt to determine whether that
is intentional.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-suspicious-semicolon.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-suspicious-string-compare</key>
  <name>misc-suspicious-string-compare</name>
  <description><![CDATA[<p>
Find suspicious usage of runtime string comparison functions.
Checks for calls with implicit comparator and proposed to explicitly add it.
Checks that compare function results (i,e, strcmp) are compared to valid constant.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-suspicious-string-compare.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-swapped-arguments</key>
  <name>misc-swapped-arguments</name>
  <description><![CDATA[<p>
Finds potentially swapped arguments by looking at implicit conversions.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-swapped-arguments.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-throw-by-value-catch-by-reference</key>
  <name>misc-throw-by-value-catch-by-reference</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-throw-by-value-catch-by-reference</p>
</div>
<h1 id="misc-throw-by-value-catch-by-reference">misc-throw-by-value-catch-by-reference</h1>
<p>&quot;cert-err09-cpp&quot; redirects here as an alias for this check. &quot;cert-err61-cpp&quot; redirects here as an alias for this check.</p>
<p>Finds violations of the rule &quot;Throw by value, catch by reference&quot; presented for example in &quot;C++ Coding Standards&quot; by H. Sutter and A. Alexandrescu.</p>
<dl>
<dt>Exceptions:</dt>
<dd><ul>
<li>Throwing string literals will not be flagged despite being a pointer. They are not susceptible to slicing and the usage of string literals is idomatic.</li>
<li>Catching character pointers (<code>char</code>, <code>wchar_t</code>, unicode character types) will not be flagged to allow catching sting literals.</li>
<li>Moved named values will not be flagged as not throwing an anonymous temporary. In this case we can be sure that the user knows that the object can't be accessed outside catch blocks handling the error.</li>
<li>Throwing function parameters will not be flagged as not throwing an anonymous temporary. This allows helper functions for throwing.</li>
<li>Re-throwing caught exception variables will not be flragged as not throwing an anonymous temporary. Although this can usually be done by just writing <code>throw;</code> it happens often enough in real code.</li>
</ul>
</dd>
</dl>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckThrowTemporaries</p>
<p>Triggers detection of violations of the rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/ERR09-CPP.+Throw+anonymous+temporaries">Throw anonymous temporaries</a>. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-unconventional-assign-operator</key>
  <name>misc-unconventional-assign-operator</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-unconventional-assign-operator</p>
</div>
<h1 id="misc-unconventional-assign-operator">misc-unconventional-assign-operator</h1>
<p>Finds declarations of assign operators with the wrong return and/or argument types and definitions with good return type but wrong <code>return</code> statements.</p>
<blockquote>
<ul>
<li>The return type must be <code>Class&amp;</code>.</li>
<li>Works with move-assign and assign by value.</li>
<li>Private and deleted operators are ignored.</li>
<li>The operator must always return <code>*this</code>.</li>
</ul>
</blockquote>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-undelegated-constructor</key>
  <name>misc-undelegated-constructor</name>
  <description><![CDATA[<p>
Finds creation of temporary objects in constructors that look like a
function call to another constructor of the same class.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-undelegated-constructor.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-uniqueptr-reset-release</key>
  <name>misc-uniqueptr-reset-release</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-uniqueptr-reset-release</p>
</div>
<h1 id="misc-uniqueptr-reset-release">misc-uniqueptr-reset-release</h1>
<p>Find and replace <code>unique_ptr::reset(release())</code> with <code>std::move()</code>.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>std::unique_ptr&lt;Foo&gt; x, y;
x.reset(y.release()); -&gt; x = std::move(y);</code></pre>
<p>If <code>y</code> is already rvalue, <code>std::move()</code> is not added. <code>x</code> and <code>y</code> can also be <code>std::unique_ptr&lt;Foo&gt;*</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-uniqueptr-reset-release.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-unused-alias-decls</key>
  <name>misc-unused-alias-decls</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-unused-alias-decls</p>
</div>
<h1 id="misc-unused-alias-decls">misc-unused-alias-decls</h1>
<p>Finds unused namespace alias declarations.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unused-alias-decls.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-unused-parameters</key>
  <name>misc-unused-parameters</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-unused-parameters</p>
</div>
<h1 id="misc-unused-parameters">misc-unused-parameters</h1>
<p>Finds unused function parameters. Unused parameters may signify a bug in the code (e.g. when a different parameter is used instead). The suggested fixes either comment parameter name out or remove the parameter completely, if all callers of the function are in the same translation unit and can be updated.</p>
<p>The check is similar to the <span class="title-ref">-Wunused-parameter</span> compiler diagnostic and can be used to prepare a codebase to enabling of that diagnostic. By default the check is more permissive (see <code class="interpreted-text" data-role="option">StrictMode</code>).</p>
<pre class="sourceCode c++"><code>void a(int i) { /*some code that doesn&#39;t use `i`*/ }

// becomes

void a(int  /*i*/) { /*some code that doesn&#39;t use `i`*/ }</code></pre>
<pre class="sourceCode c++"><code>static void staticFunctionA(int i);
static void staticFunctionA(int i) { /*some code that doesn&#39;t use `i`*/ }

// becomes

static void staticFunctionA()
static void staticFunctionA() { /*some code that doesn&#39;t use `i`*/ }</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When zero (default value), the check will ignore trivially unused parameters, i.e. when the corresponding function has an empty body (and in case of constructors - no constructor initializers). When the function body is empty, an unused parameter is unlikely to be unnoticed by a human reader, and there's basically no place for a bug to hide.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unused-parameters.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-unused-raii</key>
  <name>misc-unused-raii</name>
  <description><![CDATA[<p>
Finds temporaries that look like RAII objects.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unused-raii.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-unused-using-decls</key>
  <name>misc-unused-using-decls</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - misc-unused-using-decls</p>
</div>
<h1 id="misc-unused-using-decls">misc-unused-using-decls</h1>
<p>Finds unused <code>using</code> declarations.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>namespace n { class C; }
using n::C;  // Never actually used.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unused-using-decls.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>misc-virtual-near-miss</key>
  <name>misc-virtual-near-miss</name>
  <description><![CDATA[<p>
Warn if a function is a near miss (ie. the name is very similar and the function
signiture is the same) to a virtual function from a base class.
  </p>
    <h2>References</h2>

    <p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-virtual-near-miss.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-avoid-bind</key>
  <name>modernize-avoid-bind</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-avoid-bind</p>
</div>
<h1 id="modernize-avoid-bind">modernize-avoid-bind</h1>
<p>The check finds uses of <code>std::bind</code> and replaces simple uses with lambdas. Lambdas will use value-capture where required.</p>
<p>Right now it only handles free functions, not member functions.</p>
<p>Given:</p>
<pre class="sourceCode c++"><code>int add(int x, int y) { return x + y; }</code></pre>
<p>Then:</p>
<pre class="sourceCode c++"><code>void f() {
  int x = 2;
  auto clj = std::bind(add, x, _1);
}</code></pre>
<p>is replaced by:</p>
<pre class="sourceCode c++"><code>void f() {
  int x = 2;
  auto clj = [=](auto &amp;&amp; arg1) { return add(x, arg1); };
}</code></pre>
<p><code>std::bind</code> can be hard to read and can result in larger object files and binaries due to type information that will not be produced by equivalent lambdas.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-bind.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-deprecated-headers</key>
  <name>modernize-deprecated-headers</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-deprecated-headers</p>
</div>
<h1 id="modernize-deprecated-headers">modernize-deprecated-headers</h1>
<p>Some headers from C library were deprecated in C++ and are no longer welcome in C++ codebases. Some have no effect in C++. For more details refer to the C++ 14 Standard [depr.c.headers] section.</p>
<p>This check replaces C standard library headers with their C++ alternatives and removes redundant ones.</p>
<p>Improtant note: the Standard doesn't guarantee that the C++ headers declare all the same functions in the global namespace. The check in its current form can break the code that uses library symbols from the global namespace.</p>
<ul>
<li><span class="title-ref">&lt;assert.h&gt;</span></li>
<li><span class="title-ref">&lt;complex.h&gt;</span></li>
<li><span class="title-ref">&lt;ctype.h&gt;</span></li>
<li><span class="title-ref">&lt;errno.h&gt;</span></li>
<li><span class="title-ref">&lt;fenv.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;float.h&gt;</span></li>
<li><span class="title-ref">&lt;inttypes.h&gt;</span></li>
<li><span class="title-ref">&lt;limits.h&gt;</span></li>
<li><span class="title-ref">&lt;locale.h&gt;</span></li>
<li><span class="title-ref">&lt;math.h&gt;</span></li>
<li><span class="title-ref">&lt;setjmp.h&gt;</span></li>
<li><span class="title-ref">&lt;signal.h&gt;</span></li>
<li><span class="title-ref">&lt;stdarg.h&gt;</span></li>
<li><span class="title-ref">&lt;stddef.h&gt;</span></li>
<li><span class="title-ref">&lt;stdint.h&gt;</span></li>
<li><span class="title-ref">&lt;stdio.h&gt;</span></li>
<li><span class="title-ref">&lt;stdlib.h&gt;</span></li>
<li><span class="title-ref">&lt;string.h&gt;</span></li>
<li><span class="title-ref">&lt;tgmath.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;time.h&gt;</span></li>
<li><span class="title-ref">&lt;uchar.h&gt;</span> // deprecated since C++11</li>
<li><span class="title-ref">&lt;wchar.h&gt;</span></li>
<li><span class="title-ref">&lt;wctype.h&gt;</span></li>
</ul>
<p>If the specified standard is older than C++11 the check will only replace headers deprecated before C++11, otherwise -- every header that appeared in the previous list.</p>
<p>These headers don't have effect in C++:</p>
<ul>
<li><span class="title-ref">&lt;iso646.h&gt;</span></li>
<li><span class="title-ref">&lt;stdalign.h&gt;</span></li>
<li><span class="title-ref">&lt;stdbool.h&gt;</span></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-loop-convert</key>
  <name>modernize-loop-convert</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-loop-convert</p>
</div>
<h1 id="modernize-loop-convert">modernize-loop-convert</h1>
<p>This check converts <code>for(...; ...; ...)</code> loops to use the new range-based loops in C++11.</p>
<p>Three kinds of loops can be converted:</p>
<ul>
<li>Loops over statically allocated arrays.</li>
<li>Loops over containers, using iterators.</li>
<li>Loops over array-like containers, using <code>operator[]</code> and <code>at()</code>.</li>
</ul>
<h2 id="minconfidence-option">MinConfidence option</h2>
<h3 id="risky">risky</h3>
<p>In loops where the container expression is more complex than just a reference to a declared expression (a variable, function, enum, etc.), and some part of it appears elsewhere in the loop, we lower our confidence in the transformation due to the increased risk of changing semantics. Transformations for these loops are marked as <span class="title-ref">risky</span>, and thus will only be converted if the minimum required confidence level is set to <span class="title-ref">risky</span>.</p>
<pre class="sourceCode c++"><code>int arr[10][20];
int l = 5;

for (int j = 0; j &lt; 20; ++j)
  int k = arr[l][j] + l; // using l outside arr[l] is considered risky

for (int i = 0; i &lt; obj.getVector().size(); ++i)
  obj.foo(10); // using &#39;obj&#39; is considered risky</code></pre>
<p>See <code class="interpreted-text" data-role="ref">Range-based loops evaluate end() only once&lt;IncorrectRiskyTransformation&gt;</code> for an example of an incorrect transformation when the minimum required confidence level is set to <span class="title-ref">risky</span>.</p>
<h3 id="reasonable-default">reasonable (Default)</h3>
<p>If a loop calls <code>.end()</code> or <code>.size()</code> after each iteration, the transformation for that loop is marked as <span class="title-ref">reasonable</span>, and thus will be converted if the required confidence level is set to <span class="title-ref">reasonable</span> (default) or lower.</p>
<pre class="sourceCode c++"><code>// using size() is considered reasonable
for (int i = 0; i &lt; container.size(); ++i)
  cout &lt;&lt; container[i];</code></pre>
<h3 id="safe">safe</h3>
<p>Any other loops that do not match the above criteria to be marked as <span class="title-ref">risky</span> or <span class="title-ref">reasonable</span> are marked <span class="title-ref">safe</span>, and thus will be converted if the required confidence level is set to <span class="title-ref">safe</span> or lower.</p>
<pre class="sourceCode c++"><code>int arr[] = {1,2,3};

for (int i = 0; i &lt; 3; ++i)
  cout &lt;&lt; arr[i];</code></pre>
<h2 id="example">Example</h2>
<p>Original:</p>
<pre class="sourceCode c++"><code>const int N = 5;
int arr[] = {1,2,3,4,5};
vector&lt;int&gt; v;
v.push_back(1);
v.push_back(2);
v.push_back(3);

// safe conversion
for (int i = 0; i &lt; N; ++i)
  cout &lt;&lt; arr[i];

// reasonable conversion
for (vector&lt;int&gt;::iterator it = v.begin(); it != v.end(); ++it)
  cout &lt;&lt; *it;

// reasonable conversion
for (int i = 0; i &lt; v.size(); ++i)
  cout &lt;&lt; v[i];</code></pre>
<p>After applying the check with minimum confidence level set to <span class="title-ref">reasonable</span> (default):</p>
<pre class="sourceCode c++"><code>const int N = 5;
int arr[] = {1,2,3,4,5};
vector&lt;int&gt; v;
v.push_back(1);
v.push_back(2);
v.push_back(3);

// safe conversion
for (auto &amp; elem : arr)
  cout &lt;&lt; elem;

// reasonable conversion
for (auto &amp; elem : v)
  cout &lt;&lt; elem;

// reasonable conversion
for (auto &amp; elem : v)
  cout &lt;&lt; elem;</code></pre>
<h2 id="limitations">Limitations</h2>
<p>There are certain situations where the tool may erroneously perform transformations that remove information and change semantics. Users of the tool should be aware of the behaviour and limitations of the check outlined by the cases below.</p>
<h3 id="comments-inside-loop-headers">Comments inside loop headers</h3>
<p>Comments inside the original loop header are ignored and deleted when transformed.</p>
<pre class="sourceCode c++"><code>for (int i = 0; i &lt; N; /* This will be deleted */ ++i) { }</code></pre>
<h3 id="range-based-loops-evaluate-end-only-once">Range-based loops evaluate end() only once</h3>
<p>The C++11 range-based for loop calls <code>.end()</code> only once during the initialization of the loop. If in the original loop <code>.end()</code> is called after each iteration the semantics of the transformed loop may differ.</p>
<pre class="sourceCode c++"><code>// The following is semantically equivalent to the C++11 range-based for loop,
// therefore the semantics of the header will not change.
for (iterator it = container.begin(), e = container.end(); it != e; ++it) { }

// Instead of calling .end() after each iteration, this loop will be
// transformed to call .end() only once during the initialization of the loop,
// which may affect semantics.
for (iterator it = container.begin(); it != container.end(); ++it) { }</code></pre>
<div id="IncorrectRiskyTransformation">
<p>As explained above, calling member functions of the container in the body of the loop is considered <span class="title-ref">risky</span>. If the called member function modifies the container the semantics of the converted loop will differ due to <code>.end()</code> being called only once.</p>
</div>
<pre class="sourceCode c++"><code>bool flag = false;
for (vector&lt;T&gt;::iterator it = vec.begin(); it != vec.end(); ++it) {
  // Add a copy of the first element to the end of the vector.
  if (!flag) {
    // This line makes this transformation &#39;risky&#39;.
    vec.push_back(*it);
    flag = true;
  }
  cout &lt;&lt; *it;
}</code></pre>
<p>The original code above prints out the contents of the container including the newly added element while the converted loop, shown below, will only print the original contents and not the newly added element.</p>
<pre class="sourceCode c++"><code>bool flag = false;
for (auto &amp; elem : vec) {
  // Add a copy of the first element to the end of the vector.
  if (!flag) {
    // This line makes this transformation &#39;risky&#39;
    vec.push_back(elem);
    flag = true;
  }
  cout &lt;&lt; elem;
}</code></pre>
<p>Semantics will also be affected if <code>.end()</code> has side effects. For example, in the case where calls to <code>.end()</code> are logged the semantics will change in the transformed loop if <code>.end()</code> was originally called after each iteration.</p>
<pre class="sourceCode c++"><code>iterator end() {
  num_of_end_calls++;
  return container.end();
}</code></pre>
<h3 id="overloaded-operator--with-side-effects">Overloaded operator-&gt;() with side effects</h3>
<p>Similarly, if <code>operator-&gt;()</code> was overloaded to have side effects, such as logging, the semantics will change. If the iterator's <code>operator-&gt;()</code> was used in the original loop it will be replaced with <code>&lt;container element&gt;.&lt;member&gt;</code> instead due to the implicit dereference as part of the range-based for loop. Therefore any side effect of the overloaded <code>operator-&gt;()</code> will no longer be performed.</p>
<pre class="sourceCode c++"><code>for (iterator it = c.begin(); it != c.end(); ++it) {
  it-&gt;func(); // Using operator-&gt;()
}
// Will be transformed to:
for (auto &amp; elem : c) {
  elem.func(); // No longer using operator-&gt;()
}</code></pre>
<h3 id="pointers-and-references-to-containers">Pointers and references to containers</h3>
<p>While most of the check's risk analysis is dedicated to determining whether the iterator or container was modified within the loop, it is possible to circumvent the analysis by accessing and modifying the container through a pointer or reference.</p>
<p>If the container were directly used instead of using the pointer or reference the following transformation would have only been applied at the <span class="title-ref">risky</span> level since calling a member function of the container is considered <span class="title-ref">risky</span>. The check cannot identify expressions associated with the container that are different than the one used in the loop header, therefore the transformation below ends up being performed at the <span class="title-ref">safe</span> level.</p>
<pre class="sourceCode c++"><code>vector&lt;int&gt; vec;

vector&lt;int&gt; *ptr = &amp;vec;
vector&lt;int&gt; &amp;ref = vec;

for (vector&lt;int&gt;::iterator it = vec.begin(), e = vec.end(); it != e; ++it) {
  if (!flag) {
    // Accessing and modifying the container is considered risky, but the risk
    // level is not raised here.
    ptr-&gt;push_back(*it);
    ref.push_back(*it);
    flag = true;
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-loop-convert.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-make-shared</key>
  <name>modernize-make-shared</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-make-shared</p>
</div>
<h1 id="modernize-make-shared">modernize-make-shared</h1>
<p>This check finds the creation of <code>std::shared_ptr</code> objects by explicitly calling the constructor and a <code>new</code> expression, and replaces it with a call to <code>std::make_shared</code>.</p>
<pre class="sourceCode c++"><code>auto my_ptr = std::shared_ptr&lt;MyPair&gt;(new MyPair(1, 2));

// becomes

auto my_ptr = std::make_shared&lt;MyPair&gt;(1, 2);</code></pre>
<p>This check also finds calls to <code>std::shared_ptr::reset()</code> with a <code>new</code> expression, and replaces it with a call to <code>std::make_shared</code>.</p>
<pre class="sourceCode c++"><code>my_ptr.reset(new MyPair(1, 2));

// becomes

my_ptr = std::make_shared&lt;MyPair&gt;(1, 2);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>MakeSmartPtrFunction</p>
<p>A string specifying the name of make-shared-ptr function. Default is <span class="title-ref">std::make_shared</span>.</p>
</div>
<div class="option">
<p>MakeSmartPtrFunctionHeader</p>
<p>A string specifying the corresponding header of make-shared-ptr function. Default is <span class="title-ref">memory</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-make-shared.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-make-unique</key>
  <name>modernize-make-unique</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-make-unique</p>
</div>
<h1 id="modernize-make-unique">modernize-make-unique</h1>
<p>This check finds the creation of <code>std::unique_ptr</code> objects by explicitly calling the constructor and a <code>new</code> expression, and replaces it with a call to <code>std::make_unique</code>, introduced in C++14.</p>
<pre class="sourceCode c++"><code>auto my_ptr = std::unique_ptr&lt;MyPair&gt;(new MyPair(1, 2));

// becomes

auto my_ptr = std::make_unique&lt;MyPair&gt;(1, 2);</code></pre>
<p>This check also finds calls to <code>std::unique_ptr::reset()</code> with a <code>new</code> expression, and replaces it with a call to <code>std::make_unique</code>.</p>
<pre class="sourceCode c++"><code>my_ptr.reset(new MyPair(1, 2));

// becomes

my_ptr = std::make_unique&lt;MyPair&gt;(1, 2);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>MakeSmartPtrFunction</p>
<p>A string specifying the name of make-unique-ptr function. Default is <span class="title-ref">std::make_unique</span>.</p>
</div>
<div class="option">
<p>MakeSmartPtrFunctionHeader</p>
<p>A string specifying the corresponding header of make-unique-ptr function. Default is <span class="title-ref">memory</span>.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-make-unique.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-pass-by-value</key>
  <name>modernize-pass-by-value</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-pass-by-value</p>
</div>
<h1 id="modernize-pass-by-value">modernize-pass-by-value</h1>
<p>With move semantics added to the language and the standard library updated with move constructors added for many types it is now interesting to take an argument directly by value, instead of by const-reference, and then copy. This check allows the compiler to take care of choosing the best way to construct the copy.</p>
<p>The transformation is usually beneficial when the calling code passes an <em>rvalue</em> and assumes the move construction is a cheap operation. This short example illustrates how the construction of the value happens:</p>
<blockquote>
<pre class="sourceCode c++"><code>void foo(std::string s);
std::string get_str();

void f(const std::string &amp;str) {
  foo(str);       // lvalue  -&gt; copy construction
  foo(get_str()); // prvalue -&gt; move construction
}</code></pre>
</blockquote>
<div class="note">
<div class="admonition-title">
<p>Note</p>
</div>
<p>Currently, only constructors are transformed to make use of pass-by-value. Contributions that handle other situations are welcome!</p>
</div>
<h2 id="pass-by-value-in-constructors">Pass-by-value in constructors</h2>
<p>Replaces the uses of const-references constructor parameters that are copied into class fields. The parameter is then moved with <span class="title-ref">std::move()</span>.</p>
<p>Since <code>std::move()</code> is a library function declared in <span class="title-ref">&lt;utility&gt;</span> it may be necessary to add this include. The check will add the include directive when necessary.</p>
<blockquote>
<pre class="sourceCode c++"><code>#include &lt;string&gt;

class Foo {
public:</code></pre>
<blockquote>
<ul>
<li>Foo(const std::string &amp;Copied, const std::string &amp;ReadOnly)</li>
<li>: Copied(Copied), ReadOnly(ReadOnly)</li>
<li>Foo(std::string Copied, const std::string &amp;ReadOnly)</li>
</ul>
<dl>
<dt>+ : Copied(std::move(Copied)), ReadOnly(ReadOnly)</dt>
<dd><p>{}</p>
</dd>
<dt>private:</dt>
<dd><p>std::string Copied; const std::string &amp;ReadOnly;</p>
</dd>
</dl>
<blockquote>
<p>};</p>
<p>std::string get_cwd();</p>
<dl>
<dt>void f(const std::string &amp;Path) {</dt>
<dd><p>// The parameter corresponding to 'get_cwd()' is move-constructed. By // using pass-by-value in the Foo constructor we managed to avoid a // copy-construction. Foo foo(get_cwd(), Path);</p>
</dd>
</dl>
<p>}</p>
</blockquote>
</blockquote>
</blockquote>
<p>If the parameter is used more than once no transformation is performed since moved objects have an undefined state. It means the following code will be left untouched:</p>
<pre class="sourceCode c++"><code>#include &lt;string&gt;

void pass(const std::string &amp;S);

struct Foo {
  Foo(const std::string &amp;S) : Str(S) {
    pass(S);
  }

  std::string Str;
};</code></pre>
<h3 id="known-limitations">Known limitations</h3>
<p>A situation where the generated code can be wrong is when the object referenced is modified before the assignment in the init-list through a &quot;hidden&quot; reference.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>std::string s(&quot;foo&quot;);

struct Base {
  Base() {
    s = &quot;bar&quot;;
  }
};

struct Derived : Base {</code></pre>
<blockquote>
<ul>
<li>Derived(const std::string &amp;S) : Field(S)</li>
</ul>
<dl>
<dt>+ Derived(std::string S) : Field(std::move(S))</dt>
<dd><p>{ }</p>
<p>std::string Field;</p>
</dd>
</dl>
<blockquote>
<p>};</p>
<p>void f() {</p>
</blockquote>
<ul>
<li>Derived d(s); // d.Field holds &quot;bar&quot;</li>
</ul>
<dl>
<dt>+ Derived d(s); // d.Field holds &quot;foo&quot;</dt>
<dd><p>}</p>
</dd>
</dl>
</blockquote>
<h3 id="note-about-delayed-template-parsing">Note about delayed template parsing</h3>
<p>When delayed template parsing is enabled, constructors part of templated contexts; templated constructors, constructors in class templates, constructors of inner classes of template classes, etc., are not transformed. Delayed template parsing is enabled by default on Windows as a Microsoft extension: <a href="http://clang.llvm.org/docs/UsersManual.html#microsoft-extensions">Clang Compiler User‚Äôs Manual - Microsoft extensions</a>.</p>
<p>Delayed template parsing can be enabled using the <span class="title-ref">-fdelayed-template-parsing</span> flag and disabled using <span class="title-ref">-fno-delayed-template-parsing</span>.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>template &lt;typename T&gt; class C {
  std::string S;

public:</code></pre>
<blockquote>
<p>= // using -fdelayed-template-parsing (default on Windows) = C(const std::string &amp;S) : S(S) {}</p>
<ul>
<li>// using -fno-delayed-template-parsing (default on non-Windows systems)</li>
</ul>
<dl>
<dt>+ C(std::string S) : S(std::move(S)) {}</dt>
<dd><p>};</p>
</dd>
</dl>
</blockquote>
<div class="seealso">
<p>For more information about the pass-by-value idiom, read: <a href="https://web.archive.org/web/20140205194657/http://cpp-next.com/archive/2009/08/want-speed-pass-by-value/">Want Speed? Pass by Value</a>.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>ValuesOnly</p>
<p>When non-zero, the check only warns about copied parameters that are already passed by value. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-pass-by-value.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-raw-string-literal</key>
  <name>modernize-raw-string-literal</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-raw-string-literal</p>
</div>
<h1 id="modernize-raw-string-literal">modernize-raw-string-literal</h1>
<p>This check selectively replaces string literals containing escaped characters with raw string literals.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>const char *const Quotes{&quot;embedded \&quot;quotes\&quot;&quot;};
const char *const Paragraph{&quot;Line one.\nLine two.\nLine three.\n&quot;};
const char *const SingleLine{&quot;Single line.\n&quot;};
const char *const TrailingSpace{&quot;Look here -&gt; \n&quot;};
const char *const Tab{&quot;One\tTwo\n&quot;};
const char *const Bell{&quot;Hello!\a  And welcome!&quot;};
const char *const Path{&quot;C:\\Program Files\\Vendor\\Application.exe&quot;};
const char *const RegEx{&quot;\\w\\([a-z]\\)&quot;};</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>const char *const Quotes{R&quot;(embedded &quot;quotes&quot;)&quot;};
const char *const Paragraph{&quot;Line one.\nLine two.\nLine three.\n&quot;};
const char *const SingleLine{&quot;Single line.\n&quot;};
const char *const TrailingSpace{&quot;Look here -&gt; \n&quot;};
const char *const Tab{&quot;One\tTwo\n&quot;};
const char *const Bell{&quot;Hello!\a  And welcome!&quot;};
const char *const Path{R&quot;(C:\Program Files\Vendor\Application.exe)&quot;};
const char *const RegEx{R&quot;(\w\([a-z]\))&quot;};</code></pre>
<p>The presence of any of the following escapes can cause the string to be converted to a raw string literal: <code>\\</code>, <code>\'</code>, <code>\&quot;</code>, <code>\?</code>, and octal or hexadecimal escapes for printable ASCII characters.</p>
<p>A string literal containing only escaped newlines is a common way of writing lines of text output. Introducing physical newlines with raw string literals in this case is likely to impede readability. These string literals are left unchanged.</p>
<p>An escaped horizontal tab, form feed, or vertical tab prevents the string literal from being converted. The presence of a horizontal tab, form feed or vertical tab in source code is not visually obvious.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-raw-string-literal.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-redundant-void-arg</key>
  <name>modernize-redundant-void-arg</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-redundant-void-arg</p>
</div>
<h1 id="modernize-redundant-void-arg">modernize-redundant-void-arg</h1>
<p>Find and remove redundant <code>void</code> argument lists.</p>
<dl>
<dt>Examples:</dt>
<dd><table>
<thead>
<tr class="header">
<th>Initial code</th>
<th>Code with applied fixes</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>int f(void);</code></td>
<td><code>int f();</code></td>
</tr>
<tr class="even">
<td><code>int (*f(void))(void);</code></td>
<td><code>int (*f())();</code></td>
</tr>
<tr class="odd">
<td><code>typedef int (*f_t(void))(void);</code></td>
<td><code>typedef int (*f_t())();</code></td>
</tr>
<tr class="even">
<td><code>void (C::*p)(void);</code></td>
<td><code>void (C::*p)();</code></td>
</tr>
<tr class="odd">
<td><code>C::C(void) {}</code></td>
<td><code>C::C() {}</code></td>
</tr>
<tr class="even">
<td><code>C::~C(void) {}</code></td>
<td><code>C::~C() {}</code></td>
</tr>
</tbody>
</table>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-redundant-void-arg.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-replace-auto-ptr</key>
  <name>modernize-replace-auto-ptr</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-replace-auto-ptr</p>
</div>
<h1 id="modernize-replace-auto-ptr">modernize-replace-auto-ptr</h1>
<p>This check replaces the uses of the deprecated class <code>std::auto_ptr</code> by <code>std::unique_ptr</code> (introduced in C++11). The transfer of ownership, done by the copy-constructor and the assignment operator, is changed to match <code>std::unique_ptr</code> usage by using explicit calls to <code>std::move()</code>.</p>
<p>Migration example:</p>
<pre class="sourceCode c++"><code>-void take_ownership_fn(std::auto_ptr&lt;int&gt; int_ptr);
+void take_ownership_fn(std::unique_ptr&lt;int&gt; int_ptr);

 void f(int x) {
-  std::auto_ptr&lt;int&gt; a(new int(x));
-  std::auto_ptr&lt;int&gt; b;
+  std::unique_ptr&lt;int&gt; a(new int(x));
+  std::unique_ptr&lt;int&gt; b;

-  b = a;
-  take_ownership_fn(b);
+  b = std::move(a);
+  take_ownership_fn(std::move(b));
 }</code></pre>
<p>Since <code>std::move()</code> is a library function declared in <code>&lt;utility&gt;</code> it may be necessary to add this include. The check will add the include directive when necessary.</p>
<h2 id="known-limitations">Known Limitations</h2>
<ul>
<li>If headers modification is not activated or if a header is not allowed to be changed this check will produce broken code (compilation error), where the headers' code will stay unchanged while the code using them will be changed.</li>
<li><p>Client code that declares a reference to an <code>std::auto_ptr</code> coming from code that can't be migrated (such as a header coming from a 3<sup>rd</sup> party library) will produce a compilation error after migration. This is because the type of the reference will be changed to <code>std::unique_ptr</code> but the type returned by the library won't change, binding a reference to <code>std::unique_ptr</code> from an <code>std::auto_ptr</code>. This pattern doesn't make much sense and usually <code>std::auto_ptr</code> are stored by value (otherwise what is the point in using them instead of a reference or a pointer?).</p>
<pre class="sourceCode c++"><code>// &lt;3rd-party header...&gt;
std::auto_ptr&lt;int&gt; get_value();
const std::auto_ptr&lt;int&gt; &amp; get_ref();

// &lt;calling code (with migration)...&gt;</code></pre>
<blockquote>
<p>-std::auto_ptr&lt;int&gt; a(get_value()); +std::unique_ptr&lt;int&gt; a(get_value()); // ok, unique_ptr constructed from auto_ptr</p>
<p>-const std::auto_ptr&lt;int&gt; &amp; p = get_ptr(); +const std::unique_ptr&lt;int&gt; &amp; p = get_ptr(); // won't compile</p>
</blockquote></li>
<li><p>Non-instantiated templates aren't modified.</p>
<pre class="sourceCode c++"><code>template &lt;typename X&gt;
void f() {
    std::auto_ptr&lt;X&gt; p;
}

// only &#39;f&lt;int&gt;()&#39; (or similar) will trigger the replacement.</code></pre></li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-auto-ptr.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-shrink-to-fit</key>
  <name>modernize-shrink-to-fit</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-shrink-to-fit</p>
</div>
<h1 id="modernize-shrink-to-fit">modernize-shrink-to-fit</h1>
<p>Replace copy and swap tricks on shrinkable containers with the <code>shrink_to_fit()</code> method call.</p>
<p>The <code>shrink_to_fit()</code> method is more readable and more effective than the copy and swap trick to reduce the capacity of a shrinkable container. Note that, the <code>shrink_to_fit()</code> method is only available in C++11 and up.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-shrink-to-fit.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-auto</key>
  <name>modernize-use-auto</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-auto</p>
</div>
<h1 id="modernize-use-auto">modernize-use-auto</h1>
<p>This check is responsible for using the <code>auto</code> type specifier for variable declarations to <em>improve code readability and maintainability</em>. For example:</p>
<pre class="sourceCode c++"><code>std::vector&lt;int&gt;::iterator I = my_container.begin();

// transforms to:

auto I = my_container.begin();</code></pre>
<p>The <code>auto</code> type specifier will only be introduced in situations where the variable type matches the type of the initializer expression. In other words <code>auto</code> should deduce the same type that was originally spelled in the source. However, not every situation should be transformed:</p>
<pre class="sourceCode c++"><code>int val = 42;
InfoStruct &amp;I = SomeObject.getInfo();

// Should not become:

auto val = 42;
auto &amp;I = SomeObject.getInfo();</code></pre>
<p>In this example using <code>auto</code> for builtins doesn't improve readability. In other situations it makes the code less self-documenting impairing readability and maintainability. As a result, <code>auto</code> is used only introduced in specific situations described below.</p>
<h2 id="iterators">Iterators</h2>
<p>Iterator type specifiers tend to be long and used frequently, especially in loop constructs. Since the functions generating iterators have a common format, the type specifier can be replaced without obscuring the meaning of code while improving readability and maintainability.</p>
<pre class="sourceCode c++"><code>for (std::vector&lt;int&gt;::iterator I = my_container.begin(),
                                E = my_container.end();
     I != E; ++I) {
}

// becomes

for (auto I = my_container.begin(), E = my_container.end(); I != E; ++I) {
}</code></pre>
<p>The check will only replace iterator type-specifiers when all of the following conditions are satisfied:</p>
<ul>
<li>The iterator is for one of the standard container in <code>std</code> namespace:
<ul>
<li><code>array</code></li>
<li><code>deque</code></li>
<li><code>forward_list</code></li>
<li><code>list</code></li>
<li><code>vector</code></li>
<li><code>map</code></li>
<li><code>multimap</code></li>
<li><code>set</code></li>
<li><code>multiset</code></li>
<li><code>unordered_map</code></li>
<li><code>unordered_multimap</code></li>
<li><code>unordered_set</code></li>
<li><code>unordered_multiset</code></li>
<li><code>queue</code></li>
<li><code>priority_queue</code></li>
<li><code>stack</code></li>
</ul></li>
<li>The iterator is one of the possible iterator types for standard containers:
<ul>
<li><code>iterator</code></li>
<li><code>reverse_iterator</code></li>
<li><code>const_iterator</code></li>
<li><code>const_reverse_iterator</code></li>
</ul></li>
<li>In addition to using iterator types directly, typedefs or other ways of referring to those types are also allowed. However, implementation-specific types for which a type like <code>std::vector&lt;int&gt;::iterator</code> is itself a typedef will not be transformed. Consider the following examples:</li>
</ul>
<pre class="sourceCode c++"><code>// The following direct uses of iterator types will be transformed.
std::vector&lt;int&gt;::iterator I = MyVec.begin();
{
  using namespace std;
  list&lt;int&gt;::iterator I = MyList.begin();
}

// The type specifier for J would transform to auto since it&#39;s a typedef
// to a standard iterator type.
typedef std::map&lt;int, std::string&gt;::const_iterator map_iterator;
map_iterator J = MyMap.begin();

// The following implementation-specific iterator type for which
// std::vector&lt;int&gt;::iterator could be a typedef would not be transformed.
__gnu_cxx::__normal_iterator&lt;int*, std::vector&gt; K = MyVec.begin();</code></pre>
<ul>
<li>The initializer for the variable being declared is not a braced initializer list. Otherwise, use of <code>auto</code> would cause the type of the variable to be deduced as <code>std::initializer_list</code>.</li>
</ul>
<h2 id="new-expressions">New expressions</h2>
<p>Frequently, when a pointer is declared and initialized with <code>new</code>, the pointee type is written twice: in the declaration type and in the <code>new</code> expression. In this cases, the declaration type can be replaced with <code>auto</code> improving readability and maintainability.</p>
<pre class="sourceCode c++"><code>TypeName *my_pointer = new TypeName(my_param);

// becomes

auto *my_pointer = new TypeName(my_param);</code></pre>
<p>The check will also replace the declaration type in multiple declarations, if the following conditions are satisfied:</p>
<ul>
<li>All declared variables have the same type (i.e. all of them are pointers to the same type).</li>
<li>All declared variables are initialized with a <code>new</code> expression.</li>
<li>The types of all the new expressions are the same than the pointee of the declaration type.</li>
</ul>
<pre class="sourceCode c++"><code>TypeName *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// becomes

auto *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;</code></pre>
<h2 id="cast-expressions">Cast expressions</h2>
<p>Frequently, when a variable is declared and initialized with a cast, the variable type is written twice: in the declaration type and in the cast expression. In this cases, the declaration type can be replaced with <code>auto</code> improving readability and maintainability.</p>
<pre class="sourceCode c++"><code>TypeName *my_pointer = static_cast&lt;TypeName&gt;(my_param);

// becomes

auto *my_pointer = static_cast&lt;TypeName&gt;(my_param);</code></pre>
<p>The check handles <code>static_cast</code>, <code>dynamic_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>, functional casts, C-style casts and function templates that behave as casts, such as <code>llvm::dyn_cast</code>, <code>boost::lexical_cast</code> and <code>gsl::narrow_cast</code>. Calls to function templates are considered to behave as casts if the first template argument is explicit and is a type, and the function returns that type, or a pointer or reference to it.</p>
<h2 id="known-limitations">Known Limitations</h2>
<ul>
<li>If the initializer is an explicit conversion constructor, the check will not replace the type specifier even though it would be safe to do so.</li>
<li>User-defined iterators are not handled at this time.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>MinTypeNameLength</p>
<p>If the option is set to non-zero (default <span class="title-ref">5</span>), the check will ignore type names having a length less than the option value. The option affects expressions only, not iterators. Spaces between multi-lexeme type names (<code>long int</code>) are considered as one. If <code>RemoveStars</code> option (see below) is set to non-zero, then <code>*s</code> in the type are also counted as a part of the type name.</p>
</div>
<pre class="sourceCode c++"><code>// MinTypeNameLength = 0, RemoveStars=0

int a = static_cast&lt;int&gt;(foo());            // ---&gt; auto a = ...
// length(bool *) = 4
bool *b = new bool;                         // ---&gt; auto *b = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());  // ---&gt; auto c = ...

// MinTypeNameLength = 5, RemoveStars=0

int a = static_cast&lt;int&gt;(foo());                 // ---&gt; int  a = ...
bool b = static_cast&lt;bool&gt;(foo());               // ---&gt; bool b = ...
bool *pb = static_cast&lt;bool*&gt;(foo());            // ---&gt; bool *pb = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());       // ---&gt; auto c = ...
// length(long &lt;on-or-more-spaces&gt; int) = 8
long int d = static_cast&lt;long int&gt;(foo());       // ---&gt; auto d = ...

// MinTypeNameLength = 5, RemoveStars=1

int a = static_cast&lt;int&gt;(foo());                 // ---&gt; int  a = ...
// length(int * * ) = 5
int **pa = static_cast&lt;int**&gt;(foo());            // ---&gt; auto pa = ...
bool b = static_cast&lt;bool&gt;(foo());               // ---&gt; bool b = ...
bool *pb = static_cast&lt;bool*&gt;(foo());            // ---&gt; auto pb = ...
unsigned c = static_cast&lt;unsigned&gt;(foo());       // ---&gt; auto c = ...
long int d = static_cast&lt;long int&gt;(foo());       // ---&gt; auto d = ...</code></pre>
<div class="option">
<p>RemoveStars</p>
<p>If the option is set to non-zero (default is <span class="title-ref">0</span>), the check will remove stars from the non-typedef pointer types when replacing type names with <code>auto</code>. Otherwise, the check will leave stars. For example:</p>
</div>
<pre class="sourceCode c++"><code>TypeName *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// RemoveStars = 0

auto *my_first_pointer = new TypeName, *my_second_pointer = new TypeName;

// RemoveStars = 1

auto my_first_pointer = new TypeName, my_second_pointer = new TypeName;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-bool-literals</key>
  <name>modernize-use-bool-literals</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-bool-literals</p>
</div>
<h1 id="modernize-use-bool-literals">modernize-use-bool-literals</h1>
<p>Finds integer literals which are cast to <code>bool</code>.</p>
<pre class="sourceCode c++"><code>bool p = 1;
bool f = static_cast&lt;bool&gt;(1);
std::ios_base::sync_with_stdio(0);
bool x = p ? 1 : 0;

// transforms to

bool p = true;
bool f = true;
std::ios_base::sync_with_stdio(false);
bool x = p ? true : false;</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-bool-literals.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-default</key>
  <name>modernize-use-default</name>
  <description><![CDATA[
<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - modernize-use-default</p>
</div>
<div class="meta">

</div>
<h1 id="modernize-use-default">modernize-use-default</h1>
<p>This check has been renamed to <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html">modernize-use-equals-default</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-emplace</key>
  <name>modernize-use-emplace</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-emplace</p>
</div>
<h1 id="modernize-use-emplace">modernize-use-emplace</h1>
<p>The check flags insertions to an STL-style container done by calling the <code>push_back</code> method with an explicitly-constructed temporary of the container element type. In this case, the corresponding <code>emplace_back</code> method results in less verbose and potentially more efficient code. Right now the check doesn't support <code>push_front</code> and <code>insert</code>. It also doesn't support <code>insert</code> functions for associative containers because replacing <code>insert</code> with <code>emplace</code> may result in <a href="http://htmlpreview.github.io/?https://github.com/HowardHinnant/papers/blob/master/insert_vs_emplace.html">speed regression</a>, but it might get support with some addition flag in the future.</p>
<p>By default only <code>std::vector</code>, <code>std::deque</code>, <code>std::list</code> are considered. This list can be modified using the <code class="interpreted-text" data-role="option">ContainersWithPushBack</code> option.</p>
<p>Before:</p>
<pre class="sourceCode c++"><code>std::vector&lt;MyClass&gt; v;
v.push_back(MyClass(21, 37));

std::vector&lt;std::pair&lt;int, int&gt;&gt; w;

w.push_back(std::pair&lt;int, int&gt;(21, 37));
w.push_back(std::make_pair(21L, 37L));</code></pre>
<p>After:</p>
<pre class="sourceCode c++"><code>std::vector&lt;MyClass&gt; v;
v.emplace_back(21, 37);

std::vector&lt;std::pair&lt;int, int&gt;&gt; w;
w.emplace_back(21, 37);
w.emplace_back(21L, 37L);</code></pre>
<p>By default, the check is able to remove unnecessary <code>std::make_pair</code> and <code>std::make_tuple</code> calls from <code>push_back</code> calls on containers of <code>std::pair</code> and <code>std::tuple</code>. Custom tuple-like types can be modified by the <code class="interpreted-text" data-role="option">TupleTypes</code> option; custom make functions can be modified by the <code class="interpreted-text" data-role="option">TupleMakeFunctions</code> option.</p>
<p>The other situation is when we pass arguments that will be converted to a type inside a container.</p>
<p>Before:</p>
<pre class="sourceCode c++"><code>std::vector&lt;boost::optional&lt;std::string&gt; &gt; v;
v.push_back(&quot;abc&quot;);</code></pre>
<p>After:</p>
<pre class="sourceCode c++"><code>std::vector&lt;boost::optional&lt;std::string&gt; &gt; v;
v.emplace_back(&quot;abc&quot;);</code></pre>
<p>In some cases the transformation would be valid, but the code wouldn't be exception safe. In this case the calls of <code>push_back</code> won't be replaced.</p>
<pre class="sourceCode c++"><code>std::vector&lt;std::unique_ptr&lt;int&gt;&gt; v;
v.push_back(std::unique_ptr&lt;int&gt;(new int(0)));
auto *ptr = new int(1);
v.push_back(std::unique_ptr&lt;int&gt;(ptr));</code></pre>
<p>This is because replacing it with <code>emplace_back</code> could cause a leak of this pointer if <code>emplace_back</code> would throw exception before emplacement (e.g. not enough memory to add a new element).</p>
<p>For more info read item 42 - &quot;Consider emplacement instead of insertion.&quot; of Scott Meyers &quot;Effective Modern C++&quot;.</p>
<p>The default smart pointers that are considered are <code>std::unique_ptr</code>, <code>std::shared_ptr</code>, <code>std::auto_ptr</code>. To specify other smart pointers or other classes use the <code class="interpreted-text" data-role="option">SmartPointers</code> option.</p>
<p>Check also doesn't fire if any argument of the constructor call would be:</p>
<blockquote>
<ul>
<li>a bit-field (bit-fields can't bind to rvalue/universal reference)</li>
<li>a <code>new</code> expression (to avoid leak)</li>
<li>if the argument would be converted via derived-to-base cast.</li>
</ul>
</blockquote>
<p>This check requires C++11 or higher to run.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>ContainersWithPushBack</p>
<p>Semicolon-separated list of class names of custom containers that support <code>push_back</code>.</p>
</div>
<div class="option">
<p>IgnoreImplicitConstructors</p>
<p>When non-zero, the check will ignore implicitly constructed arguments of <code>push_back</code>, e.g.</p>
<pre class="sourceCode c++"><code>std::vector&lt;std::string&gt; v;
v.push_back(&quot;a&quot;); // Ignored when IgnoreImplicitConstructors is ``1``.</code></pre>
<p>Default is <code>0</code>.</p>
</div>
<div class="option">
<p>SmartPointers</p>
<p>Semicolon-separated list of class names of custom smart pointers.</p>
</div>
<div class="option">
<p>TupleTypes</p>
<p>Semicolon-separated list of <code>std::tuple</code>-like class names.</p>
</div>
<div class="option">
<p>TupleMakeFunctions</p>
<p>Semicolon-separated list of <code>std::make_tuple</code>-like function names. Those function calls will be removed from <code>push_back</code> calls and turned into <code>emplace_back</code>.</p>
</div>
<h3 id="example">Example</h3>
<pre class="sourceCode c++"><code>std::vector&lt;MyTuple&lt;int, bool, char&gt;&gt; x;
x.push_back(MakeMyTuple(1, false, &#39;x&#39;));</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>std::vector&lt;MyTuple&lt;int, bool, char&gt;&gt; x;
x.emplace_back(1, false, &#39;x&#39;);</code></pre>
<p>when <code class="interpreted-text" data-role="option">TupleTypes</code> is set to <code>MyTuple</code> and <code class="interpreted-text" data-role="option">TupleMakeFunctions</code> is set to <code>MakeMyTuple</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-nullptr</key>
  <name>modernize-use-nullptr</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-nullptr</p>
</div>
<h1 id="modernize-use-nullptr">modernize-use-nullptr</h1>
<p>The check converts the usage of null pointer constants (eg. <code>NULL</code>, <code>0</code>) to use the new C++11 <code>nullptr</code> keyword.</p>
<h2 id="example">Example</h2>
<pre class="sourceCode c++"><code>void assignment() {
  char *a = NULL;
  char *b = 0;
  char c = 0;
}

int *ret_ptr() {
  return 0;
}</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>void assignment() {
  char *a = nullptr;
  char *b = nullptr;
  char c = 0;
}

int *ret_ptr() {
  return nullptr;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>NullMacros</p>
<p>Comma-separated list of macro names that will be transformed along with <code>NULL</code>. By default this check will only replace the <code>NULL</code> macro and will skip any similar user-defined macros.</p>
</div>
<h3 id="example-1">Example</h3>
<pre class="sourceCode c++"><code>#define MY_NULL (void*)0
void assignment() {
  void *p = MY_NULL;
}</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>#define MY_NULL NULL
void assignment() {
  int *p = nullptr;
}</code></pre>
<p>if the <code class="interpreted-text" data-role="option">NullMacros</code> option is set to <code>MY_NULL</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-override</key>
  <name>modernize-use-override</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-override</p>
</div>
<h1 id="modernize-use-override">modernize-use-override</h1>
<p>Use C++11's <code>override</code> and remove <code>virtual</code> where applicable.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-override.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>modernize-use-using</key>
  <name>modernize-use-using</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - modernize-use-using</p>
</div>
<h1 id="modernize-use-using">modernize-use-using</h1>
<p>The check converts the usage of <code>typedef</code> with <code>using</code> keyword.</p>
<p>Before:</p>
<pre class="sourceCode c++"><code>typedef int variable;

class Class{};
typedef void (Class::* MyPtrType)() const;</code></pre>
<p>After:</p>
<pre class="sourceCode c++"><code>using variable = int;

class Class{};
using MyPtrType = void (Class::*)() const;</code></pre>
<p>This check requires using C++11 or higher to run.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-using.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>performance-faster-string-find</key>
  <name>performance-faster-string-find</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - performance-faster-string-find</p>
</div>
<h1 id="performance-faster-string-find">performance-faster-string-find</h1>
<p>Optimize calls to <code>std::string::find()</code> and friends when the needle passed is a single character string literal. The character literal overload is more efficient.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>str.find(&quot;A&quot;);

// becomes

str.find(&#39;A&#39;);</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringLikeClasses</p>
<p>Semicolon-separated list of names of string-like classes. By default only <code>std::basic_string</code> is considered. The list of methods to consired is fixed.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-faster-string-find.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>performance-for-range-copy</key>
  <name>performance-for-range-copy</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - performance-for-range-copy</p>
</div>
<h1 id="performance-for-range-copy">performance-for-range-copy</h1>
<p>Finds C++11 for ranges where the loop variable is copied in each iteration but it would suffice to obtain it by const reference.</p>
<p>The check is only applied to loop variables of types that are expensive to copy which means they are not trivially copyable or have a non-trivial copy constructor or destructor.</p>
<p>To ensure that it is safe to replace the copy with a const reference the following heuristic is employed:</p>
<ol type="1">
<li>The loop variable is const qualified.</li>
<li>The loop variable is not const, but only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</li>
</ol>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnAllAutoCopies</p>
<p>When non-zero, warns on any use of <span class="title-ref">auto</span> as the type of the range-based for loop variable. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-for-range-copy.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>performance-implicit-cast-in-loop</key>
  <name>performance-implicit-cast-in-loop</name>
  <description><![CDATA[
<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - performance-implicit-cast-in-loop</p>
</div>
<div class="meta">

</div>
<h1 id="performance-implicit-cast-in-loop">performance-implicit-cast-in-loop</h1>
<p>This check has been renamed to <a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html">performance-implicit-conversion-in-loop</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-cast-in-loop.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>performance-unnecessary-copy-initialization</key>
  <name>performance-unnecessary-copy-initialization</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - performance-unnecessary-copy-initialization</p>
</div>
<h1 id="performance-unnecessary-copy-initialization">performance-unnecessary-copy-initialization</h1>
<p>Finds local variable declarations that are initialized using the copy constructor of a non-trivially-copyable type but it would suffice to obtain a const reference.</p>
<p>The check is only applied if it is safe to replace the copy by a const reference. This is the case when the variable is const qualified or when it is only used as a const, i.e. only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>const string&amp; constReference();
void Function() {
  // The warning will suggest making this a const reference.
  const string UnnecessaryCopy = constReference();
}

struct Foo {
  const string&amp; name() const;
};
void Function(const Foo&amp; foo) {
  // The warning will suggest making this a const reference.
  string UnnecessaryCopy1 = foo.name();
  UnnecessaryCopy1.find(&quot;bar&quot;);

  // The warning will suggest making this a const reference.
  string UnnecessaryCopy2 = UnnecessaryCopy1;
  UnnecessaryCopy2.find(&quot;bar&quot;);
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-copy-initialization.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>performance-unnecessary-value-param</key>
  <name>performance-unnecessary-value-param</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - performance-unnecessary-value-param</p>
</div>
<h1 id="performance-unnecessary-value-param">performance-unnecessary-value-param</h1>
<p>Flags value parameter declarations of expensive to copy types that are copied for each invocation but it would suffice to pass them by const reference.</p>
<p>The check is only applied to parameters of types that are expensive to copy which means they are not trivially copyable or have a non-trivial copy constructor or destructor.</p>
<p>To ensure that it is safe to replace the value parameter with a const reference the following heuristic is employed:</p>
<ol type="1">
<li>the parameter is const qualified;</li>
<li>the parameter is not const, but only const methods or operators are invoked on it, or it is used as const reference or value argument in constructors or function calls.</li>
</ol>
<p>Example:</p>
<pre class="sourceCode c++"><code>void f(const string Value) {
  // The warning will suggest making Value a reference.
}

void g(ExpensiveToCopy Value) {
  // The warning will suggest making Value a const reference.
  Value.ConstMethd();
  ExpensiveToCopy Copy(Value);
}</code></pre>
<p>If the parameter is not const, only copied or assigned once and has a non-trivial move-constructor or move-assignment operator respectively the check will suggest to move it.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>void setValue(string Value) {
  Field = Value;
}</code></pre>
<p>Will become:</p>
<pre class="sourceCode c++"><code>#include &lt;utility&gt;

void setValue(string Value) {
  Field = std::move(Value);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-unnecessary-value-param.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-avoid-const-params-in-decls</key>
  <name>readability-avoid-const-params-in-decls</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-avoid-const-params-in-decls</p>
</div>
<h1 id="readability-avoid-const-params-in-decls">readability-avoid-const-params-in-decls</h1>
<p>Checks whether a function declaration has parameters that are top level <code>const</code>.</p>
<p><code>const</code> values in declarations do not affect the signature of a function, so they should not be put there.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>void f(const string);   // Bad: const is top level.
void f(const string&amp;);  // Good: const is not top level.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-avoid-const-params-in-decls.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-braces-around-statements</key>
  <name>readability-braces-around-statements</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-braces-around-statements</p>
</div>
<h1 id="readability-braces-around-statements">readability-braces-around-statements</h1>
<p><span class="title-ref">google-readability-braces-around-statements</span> redirects here as an alias for this check.</p>
<p>Checks that bodies of <code>if</code> statements and loops (<code>for</code>, <code>do while</code>, and <code>while</code>) are inside braces.</p>
<p>Before:</p>
<pre class="sourceCode c++"><code>if (condition)
  statement;</code></pre>
<p>After:</p>
<pre class="sourceCode c++"><code>if (condition) {
  statement;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ShortStatementLines</p>
<p>Defines the minimal number of lines that the statement should have in order to trigger this check.</p>
<p>The number of lines is counted from the end of condition or initial keyword (<code>do</code>/<code>else</code>) until the last line of the inner statement. Default value <span class="title-ref">0</span> means that braces will be added to all statements (not having them already).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-container-size-empty</key>
  <name>readability-container-size-empty</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-container-size-empty</p>
</div>
<h1 id="readability-container-size-empty">readability-container-size-empty</h1>
<p>Checks whether a call to the <code>size()</code> method can be replaced with a call to <code>empty()</code>.</p>
<p>The emptiness of a container should be checked using the <code>empty()</code> method instead of the <code>size()</code> method. It is not guaranteed that <code>size()</code> is a constant-time function, and it is generally more efficient and also shows clearer intent to use <code>empty()</code>. Furthermore some containers may implement the <code>empty()</code> method but not implement the <code>size()</code> method. Using <code>empty()</code> whenever possible makes it easier to switch to another container in the future.</p>
<p>The check issues warning if a container has <code>size()</code> and <code>empty()</code> methods matching following signatures:</p>
<pre class="sourceCode c++"><code>size_type size() const;
bool empty() const;</code></pre>
<p><span class="title-ref">size_type</span> can be any kind of integer type.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-container-size-empty.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-deleted-default</key>
  <name>readability-deleted-default</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-deleted-default</p>
</div>
<h1 id="readability-deleted-default">readability-deleted-default</h1>
<p>Checks that constructors and assignment operators marked as <code>= default</code> are not actually deleted by the compiler.</p>
<pre class="sourceCode c++"><code>class Example {
public:
  // This constructor is deleted because I is missing a default value.
  Example() = default;
  // This is fine.
  Example(const Example&amp; Other) = default;
  // This operator is deleted because I cannot be assigned (it is const).
  Example&amp; operator=(const Example&amp; Other) = default;

private:
  const int I;
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-deleted-default.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-else-after-return</key>
  <name>readability-else-after-return</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-else-after-return</p>
</div>
<h1 id="readability-else-after-return">readability-else-after-return</h1>
<p><a href="http://llvm.org/docs/CodingStandards.html">LLVM Coding Standards</a> advises to reduce indentation where possible and where it makes understanding code easier. Early exit is one of the suggested enforcements of that. Please do not use <code>else</code> or <code>else if</code> after something that interrupts control flow - like <code>return</code>, <code>break</code>, <code>continue</code>, <code>throw</code>.</p>
<p>The following piece of code illustrates how the check works. This piece of code:</p>
<pre class="sourceCode c++"><code>void foo(int Value) {
  int Local = 0;
  for (int i = 0; i &lt; 42; i++) {
    if (Value == 1) {
      return;
    } else {
      Local++;
    }

    if (Value == 2)
      continue;
    else
      Local++;

    if (Value == 3) {
      throw 42;
    } else {
      Local++;
    }
  }
}</code></pre>
<p>Would be transformed into:</p>
<pre class="sourceCode c++"><code>void foo(int Value) {
  int Local = 0;
  for (int i = 0; i &lt; 42; i++) {
    if (Value == 1) {
      return;
    }
    Local++;

    if (Value == 2)
      continue;
    Local++;

    if (Value == 3) {
      throw 42;
    }
    Local++;
  }
}</code></pre>
<p>This check helps to enforce this <a href="http://llvm.org/docs/CodingStandards.html#don-t-use-else-after-a-return">LLVM Coding Standards recommendation</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-else-after-return.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-function-size</key>
  <name>readability-function-size</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-function-size</p>
</div>
<h1 id="readability-function-size">readability-function-size</h1>
<p><span class="title-ref">google-readability-function-size</span> redirects here as an alias for this check.</p>
<p>Checks for large functions based on various metrics.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>LineThreshold</p>
<p>Flag functions exceeding this number of lines. The default is <span class="title-ref">-1</span> (ignore the number of lines).</p>
</div>
<div class="option">
<p>StatementThreshold</p>
<p>Flag functions exceeding this number of statements. This may differ significantly from the number of lines for macro-heavy code. The default is <span class="title-ref">800</span>.</p>
</div>
<div class="option">
<p>BranchThreshold</p>
<p>Flag functions exceeding this number of control statements. The default is <span class="title-ref">-1</span> (ignore the number of branches).</p>
</div>
<div class="option">
<p>ParameterThreshold</p>
<p>Flag functions that exceed a specified number of parameters. The default is <span class="title-ref">-1</span> (ignore the number of parameters).</p>
</div>
<div class="option">
<p>NestingThreshold</p>
<p>Flag compound statements which create next nesting level after <span class="title-ref">NestingThreshold</span>. This may differ significantly from the expected value for macro-heavy code. The default is <span class="title-ref">-1</span> (ignore the nesting level).</p>
</div>
<div class="option">
<p>VariableThreshold</p>
<p>Flag functions exceeding this number of variables declared in the body. The default is <span class="title-ref">-1</span> (ignore the number of variables). Please note that function parameters and variables declared in lambdas, GNU Statement Expressions, and nested class inline functions are not counted.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-identifier-naming</key>
  <name>readability-identifier-naming</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-identifier-naming</p>
</div>
<h1 id="readability-identifier-naming">readability-identifier-naming</h1>
<p>Checks for identifiers naming style mismatch.</p>
<p>This check will try to enforce coding guidelines on the identifiers naming. It supports <span class="title-ref">lower_case</span>, <span class="title-ref">UPPER_CASE</span>, <span class="title-ref">camelBack</span> and <span class="title-ref">CamelCase</span> casing and tries to convert from one to another if a mismatch is detected.</p>
<p>It also supports a fixed prefix and suffix that will be prepended or appended to the identifiers, regardless of the casing.</p>
<p>Many configuration options are available, in order to be able to create different rules for different kind of identifier. In general, the rules are falling back to a more generic rule if the specific case is not configured.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-identifier-naming.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-implicit-bool-cast</key>
  <name>readability-implicit-bool-cast</name>
  <description><![CDATA[
<dl>
<dt>orphan</dt>
<dd>
</dd>
</dl>
<div class="title">
<p>clang-tidy - readability-implicit-bool-cast</p>
</div>
<div class="meta">

</div>
<h1 id="readability-implicit-bool-cast">readability-implicit-bool-cast</h1>
<p>This check has been renamed to <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html">readability-implicit-bool-conversion</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-cast.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-inconsistent-declaration-parameter-name</key>
  <name>readability-inconsistent-declaration-parameter-name</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-inconsistent-declaration-parameter-name</p>
</div>
<h1 id="readability-inconsistent-declaration-parameter-name">readability-inconsistent-declaration-parameter-name</h1>
<p>Find function declarations which differ in parameter names.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>// in foo.hpp:
void foo(int a, int b, int c);

// in foo.cpp:
void foo(int d, int e, int f); // warning</code></pre>
<p>This check should help to enforce consistency in large projects, where it often happens that a definition of function is refactored, changing the parameter names, but its declaration in header file is not updated. With this check, we can easily find and correct such inconsistencies, keeping declaration and definition always in sync.</p>
<p>Unnamed parameters are allowed and are not taken into account when comparing function declarations, for example:</p>
<pre class="sourceCode c++"><code>void foo(int a);
void foo(int); // no warning</code></pre>
<p>One name is also allowed to be a case-insensitive prefix/suffix of the other:</p>
<pre class="sourceCode c++"><code>void foo(int count);
void foo(int count_input) { // no warning
  int count = adjustCount(count_input);
}</code></pre>
<p>To help with refactoring, in some cases fix-it hints are generated to align parameter names to a single naming convention. This works with the assumption that the function definition is the most up-to-date version, as it directly references parameter names in its body. Example:</p>
<pre class="sourceCode c++"><code>void foo(int a); // warning and fix-it hint (replace &quot;a&quot; to &quot;b&quot;)
int foo(int b) { return b + 2; } // definition with use of &quot;b&quot;</code></pre>
<p>In the case of multiple redeclarations or function template specializations, a warning is issued for every redeclaration or specialization inconsistent with the definition or the first declaration seen in a translation unit.</p>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to non-zero (default is <span class="title-ref">1</span>), the check will not warn about names declared inside macros.</p>
</div>
<div class="option">
<p>Strict</p>
<p>If this option is set to non-zero (default is <span class="title-ref">0</span>), then names must match exactly (or be absent).</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-inconsistent-declaration-parameter-name.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-named-parameter</key>
  <name>readability-named-parameter</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-named-parameter</p>
</div>
<h1 id="readability-named-parameter">readability-named-parameter</h1>
<p>Find functions with unnamed arguments.</p>
<p>The check implements the following rule originating in the Google C++ Style Guide:</p>
<p><a href="https://google.github.io/styleguide/cppguide.html#Function_Declarations_and_Definitions" class="uri">https://google.github.io/styleguide/cppguide.html#Function_Declarations_and_Definitions</a></p>
<p>All parameters should be named, with identical names in the declaration and implementation.</p>
<p>Corresponding cpplint.py check name: <span class="title-ref">readability/function</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-redundant-control-flow</key>
  <name>readability-redundant-control-flow</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-redundant-control-flow</p>
</div>
<h1 id="readability-redundant-control-flow">readability-redundant-control-flow</h1>
<p>This check looks for procedures (functions returning no value) with <code>return</code> statements at the end of the function. Such <code>return</code> statements are redundant.</p>
<p>Loop statements (<code>for</code>, <code>while</code>, <code>do while</code>) are checked for redundant <code>continue</code> statements at the end of the loop body.</p>
<p>Examples:</p>
<p>The following function <span class="title-ref">f</span> contains a redundant <code>return</code> statement:</p>
<pre class="sourceCode c++"><code>extern void g();
void f() {
  g();
  return;
}</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>extern void g();
void f() {
  g();
}</code></pre>
<p>The following function <span class="title-ref">k</span> contains a redundant <code>continue</code> statement:</p>
<pre class="sourceCode c++"><code>void k() {
  for (int i = 0; i &lt; 10; ++i) {
    continue;
  }
}</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>void k() {
  for (int i = 0; i &lt; 10; ++i) {
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-control-flow.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-redundant-smartptr-get</key>
  <name>readability-redundant-smartptr-get</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-redundant-smartptr-get</p>
</div>
<h1 id="readability-redundant-smartptr-get">readability-redundant-smartptr-get</h1>
<p>Find and remove redundant calls to smart pointer's <code>.get()</code> method.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>ptr.get()-&gt;Foo()  ==&gt;  ptr-&gt;Foo()
*ptr.get()  ==&gt;  *ptr
*ptr-&gt;get()  ==&gt;  **ptr
if (ptr.get() == nullptr) ... =&gt; if (ptr == nullptr) ...</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-smartptr-get.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-redundant-string-cstr</key>
  <name>readability-redundant-string-cstr</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-redundant-string-cstr</p>
</div>
<h1 id="readability-redundant-string-cstr">readability-redundant-string-cstr</h1>
<p>Finds unnecessary calls to <code>std::string::c_str()</code> and <code>std::string::data()</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-cstr.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-redundant-string-init</key>
  <name>readability-redundant-string-init</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-redundant-string-init</p>
</div>
<h1 id="readability-redundant-string-init">readability-redundant-string-init</h1>
<p>Finds unnecessary string initializations.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Initializing string with empty string literal is unnecessary.
std::string a = &quot;&quot;;
std::string b(&quot;&quot;);

// becomes

std::string a;
std::string b;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-string-init.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-simplify-boolean-expr</key>
  <name>readability-simplify-boolean-expr</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-simplify-boolean-expr</p>
</div>
<h1 id="readability-simplify-boolean-expr">readability-simplify-boolean-expr</h1>
<p>Looks for boolean expressions involving boolean constants and simplifies them to use the appropriate boolean expression directly.</p>
<p>Examples:</p>
<table>
<thead>
<tr class="header">
<th>Initial expression</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>if (b == true)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b == false)</code></td>
<td><blockquote>
<p><code>if (!b)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (b &amp;&amp; true)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b &amp;&amp; false)</code></td>
<td><blockquote>
<p><code>if (false)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (b || true)</code></td>
<td><blockquote>
<p><code>if (true)</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (b || false)</code></td>
<td><blockquote>
<p><code>if (b)</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>e ? true : false</code></td>
<td><blockquote>
<p><code>e</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>e ? false : true</code></td>
<td><blockquote>
<p><code>!e</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (true) t(); else f();</code></td>
<td><blockquote>
<p><code>t();</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (false) t(); else f();</code></td>
<td><blockquote>
<p><code>f();</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) return true; else return false;</code></td>
<td><blockquote>
<p><code>return e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) return false; else return true;</code></td>
<td><blockquote>
<p><code>return !e;</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) b = true; else b = false;</code></td>
<td><blockquote>
<p><code>b = e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) b = false; else b = true;</code></td>
<td><blockquote>
<p><code>b = !e;</code></p>
</blockquote></td>
</tr>
<tr class="odd">
<td><code>if (e) return true; return false;</code></td>
<td><blockquote>
<p><code>return e;</code></p>
</blockquote></td>
</tr>
<tr class="even">
<td><code>if (e) return false; return true;</code></td>
<td><blockquote>
<p><code>return !e;</code></p>
</blockquote></td>
</tr>
</tbody>
</table>
<dl>
<dt>The resulting expression <code>e</code> is modified as follows:</dt>
<dd><ol type="1">
<li>Unnecessary parentheses around the expression are removed.</li>
<li>Negated applications of <code>!</code> are eliminated.</li>
<li>Negated applications of comparison operators are changed to use the opposite condition.</li>
<li>Implicit conversions of pointers, including pointers to members, to <code>bool</code> are replaced with explicit comparisons to <code>nullptr</code> in C++11 or <code>NULL</code> in C++98/03.</li>
<li>Implicit casts to <code>bool</code> are replaced with explicit casts to <code>bool</code>.</li>
<li>Object expressions with <code>explicit operator bool</code> conversion operators are replaced with explicit casts to <code>bool</code>.</li>
<li>Implicit conversions of integral types to <code>bool</code> are replaced with explicit comparisons to <code>0</code>.</li>
</ol>
</dd>
<dt>Examples:</dt>
<dd><ol type="1">
<li>The ternary assignment <code>bool b = (i &lt; 0) ? true : false;</code> has redundant parentheses and becomes <code>bool b = i &lt; 0;</code>.</li>
<li>The conditional return <code>if (!b) return false; return true;</code> has an implied double negation and becomes <code>return b;</code>.</li>
<li><p>The conditional return <code>if (i &lt; 0) return false; return true;</code> becomes <code>return i &gt;= 0;</code>.</p>
<p>The conditional return <code>if (i != 0) return false; return true;</code> becomes <code>return i == 0;</code>.</p></li>
<li><p>The conditional return <code>if (p) return true; return false;</code> has an implicit conversion of a pointer to <code>bool</code> and becomes <code>return p != nullptr;</code>.</p>
<p>The ternary assignment <code>bool b = (i &amp; 1) ? true : false;</code> has an implicit conversion of <code>i &amp; 1</code> to <code>bool</code> and becomes <code>bool b = (i &amp; 1) != 0;</code>.</p></li>
<li>The conditional return <code>if (i &amp; 1) return true; else return false;</code> has an implicit conversion of an integer quantity <code>i &amp; 1</code> to <code>bool</code> and becomes <code>return (i &amp; 1) != 0;</code></li>
<li>Given <code>struct X { explicit operator bool(); };</code>, and an instance <code>x</code> of <code>struct X</code>, the conditional return <code>if (x) return true; return false;</code> becomes <code>return static_cast&lt;bool&gt;(x);</code></li>
</ol>
</dd>
</dl>
<h2 id="options">Options</h2>
<div class="option">
<p>ChainedConditionalReturn</p>
<p>If non-zero, conditional boolean return statements at the end of an <code>if/else if</code> chain will be transformed. Default is <span class="title-ref">0</span>.</p>
</div>
<div class="option">
<p>ChainedConditionalAssignment</p>
<p>If non-zero, conditional boolean assignments at the end of an <code>if/else if</code> chain will be transformed. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-boolean-expr.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-static-definition-in-anonymous-namespace</key>
  <name>readability-static-definition-in-anonymous-namespace</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-static-definition-in-anonymous-namespace</p>
</div>
<h1 id="readability-static-definition-in-anonymous-namespace">readability-static-definition-in-anonymous-namespace</h1>
<p>Finds static function and variable definitions in anonymous namespace.</p>
<p>In this case, <code>static</code> is redundant, because anonymous namespace limits the visibility of definitions to a single translation unit.</p>
<pre class="sourceCode c++"><code>namespace {
  static int a = 1; // Warning.
  static const b = 1; // Warning.
}</code></pre>
<p>The check will apply a fix by removing the redundant <code>static</code> qualifier.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-static-definition-in-anonymous-namespace.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>readability-uniqueptr-delete-release</key>
  <name>readability-uniqueptr-delete-release</name>
  <description><![CDATA[
<div class="title">
<p>clang-tidy - readability-uniqueptr-delete-release</p>
</div>
<h1 id="readability-uniqueptr-delete-release">readability-uniqueptr-delete-release</h1>
<p>Replace <code>delete &lt;unique_ptr&gt;.release()</code> with <code>&lt;unique_ptr&gt; = nullptr</code>. The latter is shorter, simpler and does not require use of raw pointer APIs.</p>
<pre class="sourceCode c++"><code>std::unique_ptr&lt;int&gt; P;
delete P.release();

// becomes

std::unique_ptr&lt;int&gt; P;
P = nullptr;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-uniqueptr-delete-release.html" target="_blank">clang.llvm.org</a></p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.CallAndMessage</key>
  <name>clang-analyzer-core.CallAndMessage</name>
  <description><![CDATA[<p>
Check for logical errors for function calls and Objective-C message expressions (e.g., uninitialized arguments, null function pointers).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.DivideZero</key>
  <name>clang-analyzer-core.DivideZero</name>
  <description><![CDATA[<p>
Check for division by zero.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.NonNullParamChecker</key>
  <name>clang-analyzer-core.NonNullParamChecker</name>
  <description><![CDATA[<p>
Check for null pointers passed as arguments to a function whose arguments are marked with the ``nonnull`` attribute.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.NullDereference</key>
  <name>clang-analyzer-core.NullDereference</name>
  <description><![CDATA[<p>
Check for dereferences of null pointers.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.StackAddressEscape</key>
  <name>clang-analyzer-core.StackAddressEscape</name>
  <description><![CDATA[<p>
Check that addresses of stack memory do not escape the function.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.UndefinedBinaryOperatorResult</key>
  <name>clang-analyzer-core.UndefinedBinaryOperatorResult</name>
  <description><![CDATA[<p>
Check for undefined results of binary operators.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.VLASize</key>
  <name>clang-analyzer-core.VLASize</name>
  <description><![CDATA[<p>
Check for declarations of VLA of undefined or zero size.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.uninitialized.ArraySubscript</key>
  <name>clang-analyzer-core.uninitialized.ArraySubscript</name>
  <description><![CDATA[<p>
Check for uninitialized values used as array subscripts.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.uninitialized.Assign</key>
  <name>clang-analyzer-core.uninitialized.Assign</name>
  <description><![CDATA[<p>
Check for assigning uninitialized values.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.uninitialized.Branch</key>
  <name>clang-analyzer-core.uninitialized.Branch</name>
  <description><![CDATA[<p>
Check for uninitialized values used as branch conditions.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.uninitialized.CapturedBlockVariable</key>
  <name>clang-analyzer-core.uninitialized.CapturedBlockVariable</name>
  <description><![CDATA[<p>
Check for blocks that capture uninitialized values.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-core.uninitialized.UndefReturn</key>
  <name>clang-analyzer-core.uninitialized.UndefReturn</name>
  <description><![CDATA[<p>
Check for uninitialized values being returned to the caller.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-cplusplus.NewDelete</key>
  <name>clang-analyzer-cplusplus.NewDelete</name>
  <description><![CDATA[<p>
Check for double-free, use-after-free and offset problems involving C++ ``delete``.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-deadcode.DeadStores</key>
  <name>clang-analyzer-deadcode.DeadStores</name>
  <description><![CDATA[<p>
Check for values stored to variables that are never read afterwards.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.API</key>
  <name>clang-analyzer-osx.API</name>
  <description><![CDATA[<p>
Check for proper uses of various Apple APIs.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.SecKeychainAPI</key>
  <name>clang-analyzer-osx.SecKeychainAPI</name>
  <description><![CDATA[<p>
Check for improper uses of the Security framework's Keychain APIs.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.coreFoundation.CFError</key>
  <name>clang-analyzer-osx.coreFoundation.CFError</name>
  <description><![CDATA[<p>
Check usage of ``CFErrorRef*`` parameters.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.coreFoundation.CFNumber</key>
  <name>clang-analyzer-osx.coreFoundation.CFNumber</name>
  <description><![CDATA[<p>
Check for improper uses of ``CFNumberCreate``.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.coreFoundation.CFRetainRelease</key>
  <name>clang-analyzer-osx.coreFoundation.CFRetainRelease</name>
  <description><![CDATA[<p>
Check for null arguments to ``CFRetain``, ``CFRelease``, ``CFMakeCollectable``.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.coreFoundation.containers.OutOfBounds</key>
  <name>clang-analyzer-osx.coreFoundation.containers.OutOfBounds</name>
  <description><![CDATA[<p>
Checks for index out-of-bounds when using ``CFArray`` API.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</key>
  <name>clang-analyzer-osx.coreFoundation.containers.PointerSizedValues</name>
  <description><![CDATA[<p>
Warns if ``CFArray``, ``CFDictionary``, ``CFSet`` are created with non-pointer-size values.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-security.FloatLoopCounter</key>
  <name>clang-analyzer-security.FloatLoopCounter</name>
  <description><![CDATA[<p>
Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <tag>cert</tag>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.UncheckedReturn</key>
  <name>clang-analyzer-security.insecureAPI.UncheckedReturn</name>
  <description><![CDATA[<p>
Warn on uses of functions whose return values must be always checked
(setuid, setgid, seteuid, setegid, setreuid, setregid).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.getpw</key>
  <name>clang-analyzer-security.insecureAPI.getpw</name>
  <description><![CDATA[<p>
Warn on uses of the ``getpw`` function.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.gets</key>
  <name>clang-analyzer-security.insecureAPI.gets</name>
  <description><![CDATA[<p>
Warn on uses of the ``gets`` function.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.mkstemp</key>
  <name>clang-analyzer-security.insecureAPI.mkstemp</name>
  <description><![CDATA[<p>
Warn when ``mktemp``, ``mkstemp``, ``mkstemps`` or ``mkdtemp`` is passed fewer than 6 X's in the format string.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.mktemp</key>
  <name>clang-analyzer-security.insecureAPI.mktemp</name>
  <description><![CDATA[<p>
Warn on uses of the ``mktemp`` function.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.rand</key>
  <name>clang-analyzer-security.insecureAPI.rand</name>
  <description><![CDATA[<p>
Warn on uses of inferior random number generating functions (only if ``arc4random`` function is available).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bad-practice</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.strcpy</key>
  <name>clang-analyzer-security.insecureAPI.strcpy</name>
  <description><![CDATA[<p>
Warn on uses of the ``strcpy`` and ``strcat`` functions.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-security.insecureAPI.vfork</key>
  <name>clang-analyzer-security.insecureAPI.vfork</name>
  <description><![CDATA[<p>
Warn on uses of the vfork function.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>cwe</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.API</key>
  <name>clang-analyzer-unix.API</name>
  <description><![CDATA[<p>
Check calls to various UNIX/POSIX functions
(open, pthread_once, calloc, malloc, realloc, alloca).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.Malloc</key>
  <name>clang-analyzer-unix.Malloc</name>
  <description><![CDATA[<p>
Check for memory leaks, double free, and use-after-free and offset problems involving ``malloc``.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.MallocSizeof</key>
  <name>clang-analyzer-unix.MallocSizeof</name>
  <description><![CDATA[<p>
Check for dubious ``malloc``, ``calloc`` or ``realloc`` arguments involving sizeof.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.MismatchedDeallocator</key>
  <name>clang-analyzer-unix.MismatchedDeallocator</name>
  <description><![CDATA[<p>
Check for mismatched deallocators (e.g. passing a pointer allocating with ``new`` to ``free()``).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.cstring.BadSizeArg</key>
  <name>clang-analyzer-unix.cstring.BadSizeArg</name>
  <description><![CDATA[<p>
Check the size argument passed to ``strncat`` for common erroneous patterns. Use -Wno-strncat-size compiler option to mute other strncat-related compiler warnings.
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>clang-analyzer-unix.cstring.NullArg</key>
  <name>clang-analyzer-unix.cstring.NullArg</name>
  <description><![CDATA[<p>
Check for null pointers being passed as arguments to C string functions
(strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp).
  </p>
]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  <tag>bug</tag>
</rule>
<rule>
  <key>abseil-duration-division</key>
  <name>abseil-duration-division</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-duration-division</p>
</div>
<h1 id="abseil-duration-division">abseil-duration-division</h1>
<p><code>absl::Duration</code> arithmetic works like it does with integers. That means that division of two <code>absl::Duration</code> objects returns an <code>int64</code> with any fractional component truncated toward 0. See <a href="https://github.com/abseil/abseil-cpp/blob/29ff6d4860070bf8fcbd39c8805d0c32d56628a3/absl/time/time.h#L137">this link</a> for more information on arithmetic with <code>absl::Duration</code>.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>absl::Duration d = absl::Seconds(3.5);
int64 sec1 = d / absl::Seconds(1);     // Truncates toward 0.
int64 sec2 = absl::ToInt64Seconds(d);  // Equivalent to division.
assert(sec1 == 3 &amp;&amp; sec2 == 3);

double dsec = d / absl::Seconds(1);  // WRONG: Still truncates toward 0.
assert(dsec == 3.0);</code></pre>
<p>If you want floating-point division, you should use either the <code>absl::FDivDuration()</code> function, or one of the unit conversion functions such as <code>absl::ToDoubleSeconds()</code>. For example:</p>
<pre class="sourceCode c++"><code>absl::Duration d = absl::Seconds(3.5);
double dsec1 = absl::FDivDuration(d, absl::Seconds(1));  // GOOD: No truncation.
double dsec2 = absl::ToDoubleSeconds(d);                 // GOOD: No truncation.
assert(dsec1 == 3.5 &amp;&amp; dsec2 == 3.5);</code></pre>
<p>This check looks for uses of <code>absl::Duration</code> division that is done in a floating-point context, and recommends the use of a function that returns a floating-point value.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-division.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-faster-strsplit-delimiter</key>
  <name>abseil-faster-strsplit-delimiter</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-faster-strsplit-delimiter</p>
</div>
<h1 id="abseil-faster-strsplit-delimiter">abseil-faster-strsplit-delimiter</h1>
<p>Finds instances of <code>absl::StrSplit()</code> or <code>absl::MaxSplits()</code> where the delimiter is a single character string literal and replaces with a character. The check will offer a suggestion to change the string literal into a character. It will also catch code using <code>absl::ByAnyChar()</code> for just a single character and will transform that into a single character as well.</p>
<p>These changes will give the same result, but using characters rather than single character string literals is more efficient and readable.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - the argument is a string literal.
for (auto piece : absl::StrSplit(str, &quot;B&quot;)) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used.
for (auto piece : absl::StrSplit(str, &#39;B&#39;)) {


// Original - the argument is a string literal inside absl::ByAnyChar call.
for (auto piece : absl::StrSplit(str, absl::ByAnyChar(&quot;B&quot;))) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used and we do not need absl::ByAnyChar
// anymore.
for (auto piece : absl::StrSplit(str, &#39;B&#39;)) {


// Original - the argument is a string literal inside absl::MaxSplits call.
for (auto piece : absl::StrSplit(str, absl::MaxSplits(&quot;B&quot;, 1))) {

// Suggested - the argument is a character, which causes the more efficient
// overload of absl::StrSplit() to be used.
for (auto piece : absl::StrSplit(str, absl::MaxSplits(&#39;B&#39;, 1))) {</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-faster-strsplit-delimiter.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-no-internal-dependencies</key>
  <name>abseil-no-internal-dependencies</name>
  <description><![CDATA[
      <p>subl.. title:: clang-tidy - abseil-no-internal-dependencies</p>
<h1 id="abseil-no-internal-dependencies">abseil-no-internal-dependencies</h1>
<p>Warns if code using Abseil depends on internal details. If something is in a namespace that includes the word ‚Äúinternal‚Äù, code is not allowed to depend upon it beaucse it‚Äôs an implementation detail. They cannot friend it, include it, you mention it or refer to it in any way. Doing so violates Abseil's compatibility guidelines and may result in breakage. See <a href="https://abseil.io/about/compatibility" class="uri">https://abseil.io/about/compatibility</a> for more information.</p>
<p>The following cases will result in warnings:</p>
<pre class="sourceCode c++"><code>absl::strings_internal::foo();
// warning triggered on this line
class foo {
  friend struct absl::container_internal::faa;
  // warning triggered on this line
};
absl::memory_internal::MakeUniqueResult();
// warning triggered on this line</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-no-internal-dependencies.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-no-namespace</key>
  <name>abseil-no-namespace</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-no-namespace</p>
</div>
<h1 id="abseil-no-namespace">abseil-no-namespace</h1>
<p>Ensures code does not open <code>namespace absl</code> as that violates Abseil's compatibility guidelines. Code should not open <code>namespace absl</code> as that conflicts with Abseil's compatibility guidelines and may result in breakage.</p>
<p>Any code that uses:</p>
<pre class="sourceCode c++"><code>namespace absl {
 ...
}</code></pre>
<p>will be prompted with a warning.</p>
<p>See <a href="https://abseil.io/about/compatibility">the full Abseil compatibility guidelines</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-no-namespace.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-redundant-strcat-calls</key>
  <name>abseil-redundant-strcat-calls</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-redundant-strcat-calls</p>
</div>
<h1 id="abseil-redundant-strcat-calls">abseil-redundant-strcat-calls</h1>
<p>Suggests removal of unnecessary calls to <code>absl::StrCat</code> when the result is being passed to another call to <code>absl::StrCat</code> or <code>absl::StrAppend</code>.</p>
<p>The extra calls cause unnecessary temporary strings to be constructed. Removing them makes the code smaller and faster.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string s = absl::StrCat(&quot;A&quot;, absl::StrCat(&quot;B&quot;, absl::StrCat(&quot;C&quot;, &quot;D&quot;)));
//before

std::string s = absl::StrCat(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;);
//after

absl::StrAppend(&amp;s, absl::StrCat(&quot;E&quot;, &quot;F&quot;, &quot;G&quot;));
//before

absl::StrAppend(&amp;s, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;);
//after</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-redundant-strcat-calls.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-str-cat-append</key>
  <name>abseil-str-cat-append</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-str-cat-append</p>
</div>
<h1 id="abseil-str-cat-append">abseil-str-cat-append</h1>
<p>Flags uses of <code>absl::StrCat()</code> to append to a <code>std::string</code>. Suggests <code>absl::StrAppend()</code> should be used instead.</p>
<p>The extra calls cause unnecessary temporary strings to be constructed. Removing them makes the code smaller and faster.</p>
<pre class="sourceCode c++"><code>a = absl::StrCat(a, b); // Use absl::StrAppend(&amp;a, b) instead.</code></pre>
<p>Does not diagnose cases where <code>abls::StrCat()</code> is used as a template argument for a functor.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-str-cat-append.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-string-find-startswith</key>
  <name>abseil-string-find-startswith</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - abseil-string-find-startswith</p>
</div>
<h1 id="abseil-string-find-startswith">abseil-string-find-startswith</h1>
<p>Checks whether a <code>std::string::find()</code> result is compared with 0, and suggests replacing with <code>absl::StartsWith()</code>. This is both a readability and performance issue.</p>
<pre class="sourceCode c++"><code>string s = &quot;...&quot;;
if (s.find(&quot;Hello World&quot;) == 0) { /* do something */ }</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>string s = &quot;...&quot;;
if (absl::StartsWith(s, &quot;Hello World&quot;)) { /* do something */ }</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StringLikeClasses</p>
<p>Semicolon-separated list of names of string-like classes. By default only <code>std::basic_string</code> is considered. The list of methods to considered is fixed.</p>
</div>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<div class="option">
<p>AbseilStringsMatchHeader</p>
<p>The location of Abseil's <code>strings/match.h</code>. Defaults to <code>absl/strings/match.h</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-string-find-startswith.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-accept</key>
  <name>android-cloexec-accept</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-accept</p>
</div>
<h1 id="android-cloexec-accept">android-cloexec-accept</h1>
<p>The usage of <code>accept()</code> is not recommended, it's better to use <code>accept4()</code>. Without this flag, an opened sensitive file descriptor would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>accept(sockfd, addr, addrlen);

// becomes

accept4(sockfd, addr, addrlen, SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-accept.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-accept4</key>
  <name>android-cloexec-accept4</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-accept4</p>
</div>
<h1 id="android-cloexec-accept4">android-cloexec-accept4</h1>
<p><code>accept4()</code> should include <code>SOCK_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>accept4(sockfd, addr, addrlen, SOCK_NONBLOCK);

// becomes

accept4(sockfd, addr, addrlen, SOCK_NONBLOCK | SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-accept4.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-creat</key>
  <name>android-cloexec-creat</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-creat</p>
</div>
<h1 id="android-cloexec-creat">android-cloexec-creat</h1>
<p>The usage of <code>creat()</code> is not recommended, it's better to use <code>open()</code>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>int fd = creat(path, mode);

// becomes

int fd = open(path, O_WRONLY | O_CREAT | O_TRUNC | O_CLOEXEC, mode);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-creat.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-dup</key>
  <name>android-cloexec-dup</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-dup</p>
</div>
<h1 id="android-cloexec-dup">android-cloexec-dup</h1>
<p>The usage of <code>dup()</code> is not recommended, it's better to use <code>fcntl()</code>, which can set the close-on-exec flag. Otherwise, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>int fd = dup(oldfd);

// becomes

int fd = fcntl(oldfd, F_DUPFD_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-dup.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-epoll-create</key>
  <name>android-cloexec-epoll-create</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-epoll-create</p>
</div>
<h1 id="android-cloexec-epoll-create">android-cloexec-epoll-create</h1>
<p>The usage of <code>epoll_create()</code> is not recommended, it's better to use <code>epoll_create1()</code>, which allows close-on-exec.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>epoll_create(size);

// becomes

epoll_create1(EPOLL_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-epoll-create.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-epoll-create1</key>
  <name>android-cloexec-epoll-create1</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-epoll-create1</p>
</div>
<h1 id="android-cloexec-epoll-create1">android-cloexec-epoll-create1</h1>
<p><code>epoll_create1()</code> should include <code>EPOLL_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>epoll_create1(0);

// becomes

epoll_create1(EPOLL_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-epoll-create1.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-fopen</key>
  <name>android-cloexec-fopen</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-fopen</p>
</div>
<h1 id="android-cloexec-fopen">android-cloexec-fopen</h1>
<p><code>fopen()</code> should include <code>e</code> in their mode string; so <code>re</code> would be valid. This is equivalent to having set <code>FD_CLOEXEC on</code> that descriptor.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>fopen(&quot;fn&quot;, &quot;r&quot;);

// becomes

fopen(&quot;fn&quot;, &quot;re&quot;);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-fopen.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-inotify-init</key>
  <name>android-cloexec-inotify-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-inotify-init</p>
</div>
<h1 id="android-cloexec-inotify-init">android-cloexec-inotify-init</h1>
<p>The usage of <code>inotify_init()</code> is not recommended, it's better to use <code>inotify_init1()</code>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>inotify_init();

// becomes

inotify_init1(IN_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-inotify-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-inotify-init1</key>
  <name>android-cloexec-inotify-init1</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-inotify-init1</p>
</div>
<h1 id="android-cloexec-inotify-init1">android-cloexec-inotify-init1</h1>
<p><code>inotify_init1()</code> should include <code>IN_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>inotify_init1(IN_NONBLOCK);

// becomes

inotify_init1(IN_NONBLOCK | IN_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-inotify-init1.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-memfd-create</key>
  <name>android-cloexec-memfd-create</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-memfd-create</p>
</div>
<h1 id="android-cloexec-memfd-create">android-cloexec-memfd-create</h1>
<p><code>memfd_create()</code> should include <code>MFD_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>memfd_create(name, MFD_ALLOW_SEALING);

// becomes

memfd_create(name, MFD_ALLOW_SEALING | MFD_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-memfd-create.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-open</key>
  <name>android-cloexec-open</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-open</p>
</div>
<h1 id="android-cloexec-open">android-cloexec-open</h1>
<p>A common source of security bugs is code that opens a file without using the <code>O_CLOEXEC</code> flag. Without that flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain, leaking that sensitive data. Open-like functions including <code>open()</code>, <code>openat()</code>, and <code>open64()</code> should include <code>O_CLOEXEC</code> in their flags argument.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>open(&quot;filename&quot;, O_RDWR);
open64(&quot;filename&quot;, O_RDWR);
openat(0, &quot;filename&quot;, O_RDWR);

// becomes

open(&quot;filename&quot;, O_RDWR | O_CLOEXEC);
open64(&quot;filename&quot;, O_RDWR | O_CLOEXEC);
openat(0, &quot;filename&quot;, O_RDWR | O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-open.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-socket</key>
  <name>android-cloexec-socket</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-cloexec-socket</p>
</div>
<h1 id="android-cloexec-socket">android-cloexec-socket</h1>
<p><code>socket()</code> should include <code>SOCK_CLOEXEC</code> in its type argument to avoid the file descriptor leakage. Without this flag, an opened sensitive file would remain open across a fork+exec to a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>socket(domain, type, SOCK_STREAM);

// becomes

socket(domain, type, SOCK_STREAM | SOCK_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-socket.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-comparison-in-temp-failure-retry</key>
  <name>android-comparison-in-temp-failure-retry</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - android-comparison-in-temp-failure-retry</p>
</div>
<h1 id="android-comparison-in-temp-failure-retry">android-comparison-in-temp-failure-retry</h1>
<p>Diagnoses comparisons that appear to be incorrectly placed in the argument to the <code>TEMP_FAILURE_RETRY</code> macro. Having such a use is incorrect in the vast majority of cases, and will often silently defeat the purpose of the <code>TEMP_FAILURE_RETRY</code> macro.</p>
<p>For context, <code>TEMP_FAILURE_RETRY</code> is <a href="https://www.gnu.org/software/libc/manual/html_node/Interrupted-Primitives.html">a convenience macro</a> provided by both glibc and Bionic. Its purpose is to repeatedly run a syscall until it either succeeds, or fails for reasons other than being interrupted.</p>
<p>Example buggy usage looks like:</p>
<pre class="sourceCode c"><code>char cs[1];
while (TEMP_FAILURE_RETRY(read(STDIN_FILENO, cs, sizeof(cs)) != 0)) {
  // Do something with cs.
}</code></pre>
<p>Because TEMP_FAILURE_RETRY will check for whether the result <em>of the comparison</em> is <code>-1</code>, and retry if so.</p>
<p>If you encounter this, the fix is simple: lift the comparison out of the <code>TEMP_FAILURE_RETRY</code> argument, like so:</p>
<pre class="sourceCode c"><code>char cs[1];
while (TEMP_FAILURE_RETRY(read(STDIN_FILENO, cs, sizeof(cs))) != 0) {
  // Do something with cs.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-comparison-in-temp-failure-retry.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-argument-comment</key>
  <name>bugprone-argument-comment</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-argument-comment</p>
</div>
<h1 id="bugprone-argument-comment">bugprone-argument-comment</h1>
<p>Checks that argument comments match parameter names.</p>
<p>The check understands argument comments in the form <code>/*parameter_name=*/</code> that are placed right before the argument.</p>
<pre class="sourceCode c++"><code>void f(bool foo);

...

f(/*bar=*/true);
// warning: argument name &#39;bar&#39; in comment does not match parameter name &#39;foo&#39;</code></pre>
<p>The check tries to detect typos and suggest automated fixes for them.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When zero (default value), the check will ignore leading and trailing underscores and case when comparing names -- otherwise they are taken into account.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-assert-side-effect</key>
  <name>bugprone-assert-side-effect</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-assert-side-effect</p>
</div>
<h1 id="bugprone-assert-side-effect">bugprone-assert-side-effect</h1>
<p>Finds <code>assert()</code> with side effect.</p>
<p>The condition of <code>assert()</code> is evaluated only in debug builds so a condition with side effect can cause different behavior in debug / release builds.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AssertMacros</p>
<p>A comma-separated list of the names of assert macros to be checked.</p>
</div>
<div class="option">
<p>CheckFunctionCalls</p>
<p>Whether to treat non-const member and non-member functions as they produce side effects. Disabled by default because it can increase the number of false positive warnings.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-assert-side-effect.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-bool-pointer-implicit-conversion</key>
  <name>bugprone-bool-pointer-implicit-conversion</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-bool-pointer-implicit-conversion</p>
</div>
<h1 id="bugprone-bool-pointer-implicit-conversion">bugprone-bool-pointer-implicit-conversion</h1>
<p>Checks for conditions based on implicit conversion from a <code>bool</code> pointer to <code>bool</code>.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>bool *p;
if (p) {
  // Never used in a pointer-specific way.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-bool-pointer-implicit-conversion.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-copy-constructor-init</key>
  <name>bugprone-copy-constructor-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-copy-constructor-init</p>
</div>
<h1 id="bugprone-copy-constructor-init">bugprone-copy-constructor-init</h1>
<p>Finds copy constructors where the constructor doesn't call the copy constructor of the base class.</p>
<pre class="sourceCode c++"><code>class Copyable {
public:
  Copyable() = default;
  Copyable(const Copyable &amp;) = default;
};
class X2 : public Copyable {
  X2(const X2 &amp;other) {} // Copyable(other) is missing
};</code></pre>
<p>Also finds copy constructors where the constructor of the base class don't have parameter.</p>
<pre class="sourceCode c++"><code>class X4 : public Copyable {
  X4(const X4 &amp;other) : Copyable() {} // other is missing
};</code></pre>
<p>The check also suggests a fix-its in some cases.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-copy-constructor-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-dangling-handle</key>
  <name>bugprone-dangling-handle</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-dangling-handle</p>
</div>
<h1 id="bugprone-dangling-handle">bugprone-dangling-handle</h1>
<p>Detect dangling references in value handles like <code>std::experimental::string_view</code>. These dangling references can be a result of constructing handles from temporary values, where the temporary is destroyed soon after the handle is created.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>string_view View = string();  // View will dangle.
string A;
View = A + &quot;A&quot;;  // still dangle.

vector&lt;string_view&gt; V;
V.push_back(string());  // V[0] is dangling.
V.resize(3, string());  // V[1] and V[2] will also dangle.

string_view f() {
  // All these return values will dangle.
  return string();
  string S;
  return S;
  char Array[10]{};
  return Array;
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>HandleClasses</p>
<p>A semicolon-separated list of class names that should be treated as handles. By default only <code>std::experimental::basic_string_view</code> is considered.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-dangling-handle.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-exception-escape</key>
  <name>bugprone-exception-escape</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-exception-escape</p>
</div>
<h1 id="bugprone-exception-escape">bugprone-exception-escape</h1>
<p>Finds functions which may throw an exception directly or indirectly, but they should not. The functions which should not throw exceptions are the following: * Destructors * Move constructors * Move assignment operators * The <code>main()</code> functions * <code>swap()</code> functions * Functions marked with <code>throw()</code> or <code>noexcept</code> * Other functions given as option</p>
<p>A destructor throwing an exception may result in undefined behavior, resource leaks or unexpected termination of the program. Throwing move constructor or move assignment also may result in undefined behavior or resource leak. The <code>swap()</code> operations expected to be non throwing most of the cases and they are always possible to implement in a non throwing way. Non throwing <code>swap()</code> operations are also used to create move operations. A throwing <code>main()</code> function also results in unexpected termination.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>FunctionsThatShouldNotThrow</p>
<p>Comma separated list containing function names which should not throw. An example value for this parameter can be <code>WinMain</code> which adds function <code>WinMain()</code> in the Windows API to the list of the funcions which should not throw. Default value is an empty string.</p>
</div>
<div class="option">
<p>IgnoredExceptions</p>
<p>Comma separated list containing type names which are not counted as thrown exceptions in the check. Default value is an empty string.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-exception-escape.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-fold-init-type</key>
  <name>bugprone-fold-init-type</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-fold-init-type</p>
</div>
<h1 id="bugprone-fold-init-type">bugprone-fold-init-type</h1>
<p>The check flags type mismatches in <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">folds</a> like <code>std::accumulate</code> that might result in loss of precision. <code>std::accumulate</code> folds an input range into an initial value using the type of the latter, with <code>operator+</code> by default. This can cause loss of precision through:</p>
<ul>
<li>Truncation: The following code uses a floating point range and an int initial value, so trucation wil happen at every application of <code>operator+</code> and the result will be <span class="title-ref">0</span>, which might not be what the user expected.</li>
</ul>
<pre class="sourceCode c++"><code>auto a = {0.5f, 0.5f, 0.5f, 0.5f};
return std::accumulate(std::begin(a), std::end(a), 0);</code></pre>
<ul>
<li>Overflow: The following code also returns <span class="title-ref">0</span>.</li>
</ul>
<pre class="sourceCode c++"><code>auto a = {65536LL * 65536 * 65536};
return std::accumulate(std::begin(a), std::end(a), 0);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-fold-init-type.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-forward-declaration-namespace</key>
  <name>bugprone-forward-declaration-namespace</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-forward-declaration-namespace</p>
</div>
<h1 id="bugprone-forward-declaration-namespace">bugprone-forward-declaration-namespace</h1>
<p>Checks if an unused forward declaration is in a wrong namespace.</p>
<p>The check inspects all unused forward declarations and checks if there is any declaration/definition with the same name existing, which could indicate that the forward declaration is in a potentially wrong namespace.</p>
<pre class="sourceCode c++"><code>namespace na { struct A; }
namespace nb { struct A {}; }
nb::A a;
// warning : no definition found for &#39;A&#39;, but a definition with the same name
// &#39;A&#39; found in another namespace &#39;nb::&#39;</code></pre>
<p>This check can only generate warnings, but it can't suggest a fix at this point.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-forward-declaration-namespace.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-forwarding-reference-overload</key>
  <name>bugprone-forwarding-reference-overload</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-forwarding-reference-overload</p>
</div>
<h1 id="bugprone-forwarding-reference-overload">bugprone-forwarding-reference-overload</h1>
<p>The check looks for perfect forwarding constructors that can hide copy or move constructors. If a non const lvalue reference is passed to the constructor, the forwarding reference parameter will be a better match than the const reference parameter of the copy constructor, so the perfect forwarding constructor will be called, which can be confusing. For detailed description of this issue see: Scott Meyers, Effective Modern C++, Item 26.</p>
<p>Consider the following example:</p>
<blockquote>
<pre class="sourceCode c++"><code>class Person {
public:
  // C1: perfect forwarding ctor
  template&lt;typename T&gt;
  explicit Person(T&amp;&amp; n) {}

  // C2: perfect forwarding ctor with parameter default value
  template&lt;typename T&gt;
  explicit Person(T&amp;&amp; n, int x = 1) {}

  // C3: perfect forwarding ctor guarded with enable_if
  template&lt;typename T, typename X = enable_if_t&lt;is_special&lt;T&gt;,void&gt;&gt;
  explicit Person(T&amp;&amp; n) {}

  // (possibly compiler generated) copy ctor
  Person(const Person&amp; rhs);
};</code></pre>
</blockquote>
<p>The check warns for constructors C1 and C2, because those can hide copy and move constructors. We suppress warnings if the copy and the move constructors are both disabled (deleted or private), because there is nothing the perfect forwarding constructor could hide in this case. We also suppress warnings for constructors like C3 that are guarded with an enable_if, assuming the programmer was aware of the possible hiding.</p>
<h2 id="background">Background</h2>
<p>For deciding whether a constructor is guarded with enable_if, we consider the default values of the type parameters and the types of the constructor parameters. If any part of these types is std::enable_if or std::enable_if_t, we assume the constructor is guarded.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-forwarding-reference-overload.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-inaccurate-erase</key>
  <name>bugprone-inaccurate-erase</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-inaccurate-erase</p>
</div>
<h1 id="bugprone-inaccurate-erase">bugprone-inaccurate-erase</h1>
<p>Checks for inaccurate use of the <code>erase()</code> method.</p>
<p>Algorithms like <code>remove()</code> do not actually remove any element from the container but return an iterator to the first redundant element at the end of the container. These redundant elements must be removed using the <code>erase()</code> method. This check warns when not all of the elements will be removed due to using an inappropriate overload.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-inaccurate-erase.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-incorrect-roundings</key>
  <name>bugprone-incorrect-roundings</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-incorrect-roundings</p>
</div>
<h1 id="bugprone-incorrect-roundings">bugprone-incorrect-roundings</h1>
<p>Checks the usage of patterns known to produce incorrect rounding. Programmers often use:</p>
<pre><code>(int)(double_expression + 0.5)</code></pre>
<p>to round the double expression to an integer. The problem with this:</p>
<ol type="1">
<li>It is unnecessarily slow.</li>
<li>It is incorrect. The number 0.499999975 (smallest representable float number below 0.5) rounds to 1.0. Even worse behavior for negative numbers where both -0.5f and -1.4f both round to 0.0.</li>
</ol>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-incorrect-roundings.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-integer-division</key>
  <name>bugprone-integer-division</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-integer-division</p>
</div>
<h1 id="bugprone-integer-division">bugprone-integer-division</h1>
<p>Finds cases where integer division in a floating point context is likely to cause unintended loss of precision.</p>
<p>No reports are made if divisions are part of the following expressions:</p>
<ul>
<li>operands of operators expecting integral or bool types,</li>
<li>call expressions of integral or bool types, and</li>
<li>explicit cast expressions to integral or bool types,</li>
</ul>
<p>as these are interpreted as signs of deliberateness from the programmer.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>float floatFunc(float);
int intFunc(int);
double d;
int i = 42;

// Warn, floating-point values expected.
d = 32 * 8 / (2 + i);
d = 8 * floatFunc(1 + 7 / 2);
d = i / (1 &lt;&lt; 4);

// OK, no integer division.
d = 32 * 8.0 / (2 + i);
d = 8 * floatFunc(1 + 7.0 / 2);
d = (double)i / (1 &lt;&lt; 4);

// OK, there are signs of deliberateness.
d = 1 &lt;&lt; (i / 2);
d = 9 + intFunc(6 * i / 32);
d = (int)(i / 32) - 8;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-integer-division.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-lambda-function-name</key>
  <name>bugprone-lambda-function-name</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-lambda-function-name</p>
</div>
<h1 id="bugprone-lambda-function-name">bugprone-lambda-function-name</h1>
<p>Checks for attempts to get the name of a function from within a lambda expression. The name of a lambda is always something like <code>operator()</code>, which is almost never what was intended.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>void FancyFunction() {
  [] { printf(&quot;Called from %s\n&quot;, __func__); }();
  [] { printf(&quot;Now called from %s\n&quot;, __FUNCTION__); }();
}</code></pre>
<p>Output:</p>
<pre><code>Called from operator()
Now called from operator()</code></pre>
<p>Likely intended output:</p>
<pre><code>Called from FancyFunction
Now called from FancyFunction</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-lambda-function-name.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-macro-parentheses</key>
  <name>bugprone-macro-parentheses</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-macro-parentheses</p>
</div>
<h1 id="bugprone-macro-parentheses">bugprone-macro-parentheses</h1>
<p>Finds macros that can have unexpected behaviour due to missing parentheses.</p>
<p>Macros are expanded by the preprocessor as-is. As a result, there can be unexpected behaviour; operators may be evaluated in unexpected order and unary operators may become binary operators, etc.</p>
<p>When the replacement list has an expression, it is recommended to surround it with parentheses. This ensures that the macro result is evaluated completely before it is used.</p>
<p>It is also recommended to surround macro arguments in the replacement list with parentheses. This ensures that the argument value is calculated properly.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-macro-parentheses.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-macro-repeated-side-effects</key>
  <name>bugprone-macro-repeated-side-effects</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-macro-repeated-side-effects</p>
</div>
<h1 id="bugprone-macro-repeated-side-effects">bugprone-macro-repeated-side-effects</h1>
<p>Checks for repeated argument with side effects in macros.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-macro-repeated-side-effects.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-misplaced-operator-in-strlen-in-alloc</key>
  <name>bugprone-misplaced-operator-in-strlen-in-alloc</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-misplaced-operator-in-strlen-in-alloc</p>
</div>
<h1 id="bugprone-misplaced-operator-in-strlen-in-alloc">bugprone-misplaced-operator-in-strlen-in-alloc</h1>
<p>Finds cases where <code>1</code> is added to the string in the argument to <code>strlen()</code>, <code>strnlen()</code>, <code>strnlen_s()</code>, <code>wcslen()</code>, <code>wcsnlen()</code>, and <code>wcsnlen_s()</code> instead of the result and the value is used as an argument to a memory allocation function (<code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code>, <code>alloca()</code>) or the <code>new[]</code> operator in <span class="title-ref">C++</span>. The check detects error cases even if one of these functions (except the <code>new[]</code> operator) is called by a constant function pointer. Cases where <code>1</code> is added both to the parameter and the result of the <code>strlen()</code>-like function are ignored, as are cases where the whole addition is surrounded by extra parentheses.</p>
<p><span class="title-ref">C</span> example code:</p>
<pre class="sourceCode c"><code>void bad_malloc(char *str) {
  char *c = (char*) malloc(strlen(str + 1));
}</code></pre>
<p>The suggested fix is to add <code>1</code> to the return value of <code>strlen()</code> and not to its argument. In the example above the fix would be</p>
<pre class="sourceCode c"><code>char *c = (char*) malloc(strlen(str) + 1);</code></pre>
<p><span class="title-ref">C++</span> example code:</p>
<pre class="sourceCode c++"><code>void bad_new(char *str) {
  char *c = new char[strlen(str + 1)];
}</code></pre>
<p>As in the <span class="title-ref">C</span> code with the <code>malloc()</code> function, the suggested fix is to add <code>1</code> to the return value of <code>strlen()</code> and not to its argument. In the example above the fix would be</p>
<pre class="sourceCode c++"><code>char *c = new char[strlen(str) + 1];</code></pre>
<p>Example for silencing the diagnostic:</p>
<pre class="sourceCode c"><code>void bad_malloc(char *str) {
  char *c = (char*) malloc(strlen((str + 1)));
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-misplaced-operator-in-strlen-in-alloc.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-misplaced-widening-cast</key>
  <name>bugprone-misplaced-widening-cast</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-misplaced-widening-cast</p>
</div>
<h1 id="bugprone-misplaced-widening-cast">bugprone-misplaced-widening-cast</h1>
<p>This check will warn when there is a cast of a calculation result to a bigger type. If the intention of the cast is to avoid loss of precision then the cast is misplaced, and there can be loss of precision. Otherwise the cast is ineffective.</p>
<p>Example code:</p>
<pre class="sourceCode c++"><code>long f(int x) {
    return (long)(x * 1000);
}</code></pre>
<p>The result <code>x * 1000</code> is first calculated using <code>int</code> precision. If the result exceeds <code>int</code> precision there is loss of precision. Then the result is casted to <code>long</code>.</p>
<p>If there is no loss of precision then the cast can be removed or you can explicitly cast to <code>int</code> instead.</p>
<p>If you want to avoid loss of precision then put the cast in a proper location, for instance:</p>
<pre class="sourceCode c++"><code>long f(int x) {
    return (long)x * 1000;
}</code></pre>
<h2 id="implicit-casts">Implicit casts</h2>
<p>Forgetting to place the cast at all is at least as dangerous and at least as common as misplacing it. If <code class="interpreted-text" data-role="option">CheckImplicitCasts</code> is enabled the check also detects these cases, for instance:</p>
<pre class="sourceCode c++"><code>long f(int x) {
    return x * 1000;
}</code></pre>
<h2 id="floating-point">Floating point</h2>
<p>Currently warnings are only written for integer conversion. No warning is written for this code:</p>
<pre class="sourceCode c++"><code>double f(float x) {
    return (double)(x * 10.0f);
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckImplicitCasts</p>
<p>If non-zero, enables detection of implicit casts. Default is non-zero.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-misplaced-widening-cast.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-move-forwarding-reference</key>
  <name>bugprone-move-forwarding-reference</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-move-forwarding-reference</p>
</div>
<h1 id="bugprone-move-forwarding-reference">bugprone-move-forwarding-reference</h1>
<p>Warns if <code>std::move</code> is called on a forwarding reference, for example:</p>
<blockquote>
<pre class="sourceCode c++"><code>template &lt;typename T&gt;
void foo(T&amp;&amp; t) {
  bar(std::move(t));
}</code></pre>
</blockquote>
<p><a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4164.pdf">Forwarding references</a> should typically be passed to <code>std::forward</code> instead of <code>std::move</code>, and this is the fix that will be suggested.</p>
<p>(A forwarding reference is an rvalue reference of a type that is a deduced function template argument.)</p>
<p>In this example, the suggested fix would be</p>
<blockquote>
<pre class="sourceCode c++"><code>bar(std::forward&lt;T&gt;(t));</code></pre>
</blockquote>
<h2 id="background">Background</h2>
<p>Code like the example above is sometimes written with the expectation that <code>T&amp;&amp;</code> will always end up being an rvalue reference, no matter what type is deduced for <code>T</code>, and that it is therefore not possible to pass an lvalue to <code>foo()</code>. However, this is not true. Consider this example:</p>
<blockquote>
<pre class="sourceCode c++"><code>std::string s = &quot;Hello, world&quot;;
foo(s);</code></pre>
</blockquote>
<p>This code compiles and, after the call to <code>foo()</code>, <code>s</code> is left in an indeterminate state because it has been moved from. This may be surprising to the caller of <code>foo()</code> because no <code>std::move</code> was used when calling <code>foo()</code>.</p>
<p>The reason for this behavior lies in the special rule for template argument deduction on function templates like <code>foo()</code> -- i.e. on function templates that take an rvalue reference argument of a type that is a deduced function template argument. (See section [temp.deduct.call]/3 in the C++11 standard.)</p>
<p>If <code>foo()</code> is called on an lvalue (as in the example above), then <code>T</code> is deduced to be an lvalue reference. In the example, <code>T</code> is deduced to be <code>std::string &amp;</code>. The type of the argument <code>t</code> therefore becomes <code>std::string&amp; &amp;&amp;</code>; by the reference collapsing rules, this collapses to <code>std::string&amp;</code>.</p>
<p>This means that the <code>foo(s)</code> call passes <code>s</code> as an lvalue reference, and <code>foo()</code> ends up moving <code>s</code> and thereby placing it into an indeterminate state.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-move-forwarding-reference.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-multiple-statement-macro</key>
  <name>bugprone-multiple-statement-macro</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-multiple-statement-macro</p>
</div>
<h1 id="bugprone-multiple-statement-macro">bugprone-multiple-statement-macro</h1>
<p>Detect multiple statement macros that are used in unbraced conditionals. Only the first statement of the macro will be inside the conditional and the other ones will be executed unconditionally.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>#define INCREMENT_TWO(x, y) (x)++; (y)++
if (do_increment)
  INCREMENT_TWO(a, b);  // (b)++ will be executed unconditionally.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-multiple-statement-macro.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-parent-virtual-call</key>
  <name>bugprone-parent-virtual-call</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-parent-virtual-call</p>
</div>
<h1 id="bugprone-parent-virtual-call">bugprone-parent-virtual-call</h1>
<p>Detects and fixes calls to grand-...parent virtual methods instead of calls to overridden parent's virtual methods.</p>
<pre class="sourceCode c++"><code>class A {
  int virtual foo() {...}
};

class B: public A {
  int foo() override {...}
};

class C: public B {
  int foo() override { A::foo(); }
//                     ^^^^^^^^
// warning: qualified name A::foo refers to a member overridden in subclass; did you mean &#39;B&#39;?  [bugprone-parent-virtual-call]
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-parent-virtual-call.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-sizeof-container</key>
  <name>bugprone-sizeof-container</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-sizeof-container</p>
</div>
<h1 id="bugprone-sizeof-container">bugprone-sizeof-container</h1>
<p>The check finds usages of <code>sizeof</code> on expressions of STL container types. Most likely the user wanted to use <code>.size()</code> instead.</p>
<p>All class/struct types declared in namespace <code>std::</code> having a const <code>size()</code> method are considered containers, with the exception of <code>std::bitset</code> and <code>std::array</code>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string s;
int a = 47 + sizeof(s); // warning: sizeof() doesn&#39;t return the size of the container. Did you mean .size()?

int b = sizeof(std::string); // no warning, probably intended.

std::string array_of_strings[10];
int c = sizeof(array_of_strings) / sizeof(array_of_strings[0]); // no warning, definitely intended.

std::array&lt;int, 3&gt; std_array;
int d = sizeof(std_array); // no warning, probably intended.</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-sizeof-container.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-sizeof-expression</key>
  <name>bugprone-sizeof-expression</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-sizeof-expression</p>
</div>
<h1 id="bugprone-sizeof-expression">bugprone-sizeof-expression</h1>
<p>The check finds usages of <code>sizeof</code> expressions which are most likely errors.</p>
<p>The <code>sizeof</code> operator yields the size (in bytes) of its operand, which may be an expression or the parenthesized name of a type. Misuse of this operator may be leading to errors and possible software vulnerabilities.</p>
<h2 id="suspicious-usage-of-sizeofk">Suspicious usage of 'sizeof(K)'</h2>
<p>A common mistake is to query the <code>sizeof</code> of an integer literal. This is equivalent to query the size of its type (probably <code>int</code>). The intent of the programmer was probably to simply get the integer and not its size.</p>
<pre class="sourceCode c++"><code>#define BUFLEN 42
char buf[BUFLEN];
memset(buf, 0, sizeof(BUFLEN));  // sizeof(42) ==&gt; sizeof(int)</code></pre>
<h2 id="suspicious-usage-of-sizeofexpr">Suspicious usage of 'sizeof(expr)'</h2>
<p>In cases, where there is an enum or integer to represent a type, a common mistake is to query the <code>sizeof</code> on the integer or enum that represents the type that should be used by <code>sizeof</code>. This results in the size of the integer and not of the type the integer represents:</p>
<pre class="sourceCode c++"><code>enum data_type {
  FLOAT_TYPE,
  DOUBLE_TYPE
};

struct data {
  data_type type;
  void* buffer;
  data_type get_type() {
    return type;
  }
};

void f(data d, int numElements) {
  // should be sizeof(float) or sizeof(double), depending on d.get_type()
  int numBytes = numElements * sizeof(d.get_type());
  ...
}</code></pre>
<h2 id="suspicious-usage-of-sizeofthis">Suspicious usage of 'sizeof(this)'</h2>
<p>The <code>this</code> keyword is evaluated to a pointer to an object of a given type. The expression <code>sizeof(this)</code> is returning the size of a pointer. The programmer most likely wanted the size of the object and not the size of the pointer.</p>
<pre class="sourceCode c++"><code>class Point {
  [...]
  size_t size() { return sizeof(this); }  // should probably be sizeof(*this)
  [...]
};</code></pre>
<h2 id="suspicious-usage-of-sizeofchar">Suspicious usage of 'sizeof(char*)'</h2>
<p>There is a subtle difference between declaring a string literal with <code>char* A = &quot;&quot;</code> and <code>char A[] = &quot;&quot;</code>. The first case has the type <code>char*</code> instead of the aggregate type <code>char[]</code>. Using <code>sizeof</code> on an object declared with <code>char*</code> type is returning the size of a pointer instead of the number of characters (bytes) in the string literal.</p>
<pre class="sourceCode c++"><code>const char* kMessage = &quot;Hello World!&quot;;      // const char kMessage[] = &quot;...&quot;;
void getMessage(char* buf) {
  memcpy(buf, kMessage, sizeof(kMessage));  // sizeof(char*)
}</code></pre>
<h2 id="suspicious-usage-of-sizeofa">Suspicious usage of 'sizeof(A*)'</h2>
<p>A common mistake is to compute the size of a pointer instead of its pointee. These cases may occur because of explicit cast or implicit conversion.</p>
<pre class="sourceCode c++"><code>int A[10];
memset(A, 0, sizeof(A + 0));

struct Point point;
memset(point, 0, sizeof(&amp;point));</code></pre>
<h2 id="suspicious-usage-of-sizeof...sizeof...">Suspicious usage of 'sizeof(...)/sizeof(...)'</h2>
<p>Dividing <code>sizeof</code> expressions is typically used to retrieve the number of elements of an aggregate. This check warns on incompatible or suspicious cases.</p>
<p>In the following example, the entity has 10-bytes and is incompatible with the type <code>int</code> which has 4 bytes.</p>
<pre class="sourceCode c++"><code>char buf[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };  // sizeof(buf) =&gt; 10
void getMessage(char* dst) {
  memcpy(dst, buf, sizeof(buf) / sizeof(int));  // sizeof(int) =&gt; 4  [incompatible sizes]
}</code></pre>
<p>In the following example, the expression <code>sizeof(Values)</code> is returning the size of <code>char*</code>. One can easily be fooled by its declaration, but in parameter declaration the size '10' is ignored and the function is receiving a <code>char*</code>.</p>
<pre class="sourceCode c++"><code>char OrderedValues[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
return CompareArray(char Values[10]) {
  return memcmp(OrderedValues, Values, sizeof(Values)) == 0;  // sizeof(Values) ==&gt; sizeof(char*) [implicit cast to char*]
}</code></pre>
<h2 id="suspicious-sizeof-by-sizeof-expression">Suspicious 'sizeof' by 'sizeof' expression</h2>
<p>Multiplying <code>sizeof</code> expressions typically makes no sense and is probably a logic error. In the following example, the programmer used <code>*</code> instead of <code>/</code>.</p>
<pre class="sourceCode c++"><code>const char kMessage[] = &quot;Hello World!&quot;;
void getMessage(char* buf) {
  memcpy(buf, kMessage, sizeof(kMessage) * sizeof(char));  //  sizeof(kMessage) / sizeof(char)
}</code></pre>
<p>This check may trigger on code using the arraysize macro. The following code is working correctly but should be simplified by using only the <code>sizeof</code> operator.</p>
<pre class="sourceCode c++"><code>extern Object objects[100];
void InitializeObjects() {
  memset(objects, 0, arraysize(objects) * sizeof(Object));  // sizeof(objects)
}</code></pre>
<h2 id="suspicious-usage-of-sizeofsizeof...">Suspicious usage of 'sizeof(sizeof(...))'</h2>
<p>Getting the <code>sizeof</code> of a <code>sizeof</code> makes no sense and is typically an error hidden through macros.</p>
<pre class="sourceCode c++"><code>#define INT_SZ sizeof(int)
int buf[] = { 42 };
void getInt(int* dst) {
  memcpy(dst, buf, sizeof(INT_SZ));  // sizeof(sizeof(int)) is suspicious.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnSizeOfConstant</p>
<p>When non-zero, the check will warn on an expression like <code>sizeof(CONSTANT)</code>. Default is <span class="title-ref">1</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfIntegerExpression</p>
<p>When non-zero, the check will warn on an expression like <code>sizeof(expr)</code> where the expression results in an integer. Default is <span class="title-ref">0</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfThis</p>
<p>When non-zero, the check will warn on an expression like <code>sizeof(this)</code>. Default is <span class="title-ref">1</span>.</p>
</div>
<div class="option">
<p>WarnOnSizeOfCompareToConstant</p>
<p>When non-zero, the check will warn on an expression like <code>sizeof(epxr) &lt;= k</code> for a suspicious constant <span class="title-ref">k</span> while <span class="title-ref">k</span> is <span class="title-ref">0</span> or greater than <span class="title-ref">0x8000</span>. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-sizeof-expression.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-string-constructor</key>
  <name>bugprone-string-constructor</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-string-constructor</p>
</div>
<h1 id="bugprone-string-constructor">bugprone-string-constructor</h1>
<p>Finds string constructors that are suspicious and probably errors.</p>
<p>A common mistake is to swap parameters to the 'fill' string-constructor.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string str(&#39;x&#39;, 50); // should be str(50, &#39;x&#39;)</code></pre>
<p>Calling the string-literal constructor with a length bigger than the literal is suspicious and adds extra random characters to the string.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string(&quot;test&quot;, 200);   // Will include random characters after &quot;test&quot;.</code></pre>
<p>Creating an empty string from constructors with parameters is considered suspicious. The programmer should use the empty constructor instead.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string(&quot;test&quot;, 0);   // Creation of an empty string.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnLargeLength</p>
<p>When non-zero, the check will warn on a string with a length greater than <span class="title-ref">LargeLengthThreshold</span>. Default is <span class="title-ref">1</span>.</p>
</div>
<div class="option">
<p>LargeLengthThreshold</p>
<p>An integer specifying the large length threshold. Default is <span class="title-ref">0x800000</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-constructor.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-string-integer-assignment</key>
  <name>bugprone-string-integer-assignment</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-string-integer-assignment</p>
</div>
<h1 id="bugprone-string-integer-assignment">bugprone-string-integer-assignment</h1>
<p>The check finds assignments of an integer to <code>std::basic_string&lt;CharT&gt;</code> (<code>std::string</code>, <code>std::wstring</code>, etc.). The source of the problem is the following assignment operator of <code>std::basic_string&lt;CharT&gt;</code>:</p>
<pre class="sourceCode c++"><code>basic_string&amp; operator=( CharT ch );</code></pre>
<p>Numeric types can be implicitly casted to character types.</p>
<pre class="sourceCode c++"><code>std::string s;
int x = 5965;
s = 6;
s = x;</code></pre>
<p>Use the appropriate conversion functions or character literals.</p>
<pre class="sourceCode c++"><code>std::string s;
int x = 5965;
s = &#39;6&#39;;
s = std::to_string(x);</code></pre>
<p>In order to suppress false positives, use an explicit cast.</p>
<pre class="sourceCode c++"><code>std::string s;
s = static_cast&lt;char&gt;(6);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-integer-assignment.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-string-literal-with-embedded-nul</key>
  <name>bugprone-string-literal-with-embedded-nul</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-string-literal-with-embedded-nul</p>
</div>
<h1 id="bugprone-string-literal-with-embedded-nul">bugprone-string-literal-with-embedded-nul</h1>
<p>Finds occurrences of string literal with embedded NUL character and validates their usage.</p>
<h2 id="invalid-escaping">Invalid escaping</h2>
<p>Special characters can be escaped within a string literal by using their hexadecimal encoding like <code>\x42</code>. A common mistake is to escape them like this <code>\0x42</code> where the <code>\0</code> stands for the NUL character.</p>
<pre class="sourceCode c++"><code>const char* Example[] = &quot;Invalid character: \0x12 should be \x12&quot;;
const char* Bytes[] = &quot;\x03\0x02\0x01\0x00\0xFF\0xFF\0xFF&quot;;</code></pre>
<h2 id="truncated-literal">Truncated literal</h2>
<p>String-like classes can manipulate strings with embedded NUL as they are keeping track of the bytes and the length. This is not the case for a <code>char*</code> (NUL-terminated) string.</p>
<p>A common mistake is to pass a string-literal with embedded NUL to a string constructor expecting a NUL-terminated string. The bytes after the first NUL character are truncated.</p>
<pre class="sourceCode c++"><code>std::string str(&quot;abc\0def&quot;);  // &quot;def&quot; is truncated
str += &quot;\0&quot;;                  // This statement is doing nothing
if (str == &quot;\0abc&quot;) return;   // This expression is always true</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-string-literal-with-embedded-nul.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-suspicious-enum-usage</key>
  <name>bugprone-suspicious-enum-usage</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-suspicious-enum-usage</p>
</div>
<h1 id="bugprone-suspicious-enum-usage">bugprone-suspicious-enum-usage</h1>
<p>The checker detects various cases when an enum is probably misused (as a bitmask ).</p>
<ol type="1">
<li>When &quot;ADD&quot; or &quot;bitwise OR&quot; is used between two enum which come from different types and these types value ranges are not disjoint.</li>
</ol>
<p>The following cases will be investigated only using <code class="interpreted-text" data-role="option">StrictMode</code>. We regard the enum as a (suspicious) bitmask if the three conditions below are true at the same time:</p>
<ul>
<li>at most half of the elements of the enum are non pow-of-2 numbers (because of short enumerations)</li>
<li>there is another non pow-of-2 number than the enum constant representing all choices (the result &quot;bitwise OR&quot; operation of all enum elements)</li>
<li>enum type variable/enumconstant is used as an argument of a <span class="title-ref">+</span> or &quot;bitwise OR &quot; operator</li>
</ul>
<p>So whenever the non pow-of-2 element is used as a bitmask element we diagnose a misuse and give a warning.</p>
<ol start="2" type="1">
<li>Investigating the right hand side of <span class="title-ref">+=</span> and <span class="title-ref">|=</span> operator.</li>
<li>Check only the enum value side of a <span class="title-ref">|</span> and <span class="title-ref">+</span> operator if one of them is not enum val.</li>
<li>Check both side of <span class="title-ref">|</span> or <span class="title-ref">+</span> operator where the enum values are from the same enum type.</li>
</ol>
<p>Examples:</p>
<pre class="sourceCode c++"><code>enum { A, B, C };
enum { D, E, F = 5 };
enum { G = 10, H = 11, I = 12 };

unsigned flag;
flag =
    A |
    H; // OK, disjoint value intervalls in the enum types -&gt;probably good use.
flag = B | F; // Warning, have common values so they are probably misused.

// Case 2:
enum Bitmask {
  A = 0,
  B = 1,
  C = 2,
  D = 4,
  E = 8,
  F = 16,
  G = 31 // OK, real bitmask.
};

enum Almostbitmask {
  AA = 0,
  BB = 1,
  CC = 2,
  DD = 4,
  EE = 8,
  FF = 16,
  GG // Problem, forgot to initialize.
};

unsigned flag = 0;
flag |= E; // OK.
flag |=
    EE; // Warning at the decl, and note that it was used here as a bitmask.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>Default value: 0. When non-null the suspicious bitmask usage will be investigated additionally to the different enum usage check.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-enum-usage.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-suspicious-memset-usage</key>
  <name>bugprone-suspicious-memset-usage</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-suspicious-memset-usage</p>
</div>
<h1 id="bugprone-suspicious-memset-usage">bugprone-suspicious-memset-usage</h1>
<p>This check finds <code>memset()</code> calls with potential mistakes in their arguments. Considering the function as <code>void* memset(void* destination, int fill_value, size_t byte_count)</code>, the following cases are covered:</p>
<p><strong>Case 1: Fill value is a character ``'0'``</strong></p>
<p>Filling up a memory area with ASCII code 48 characters is not customary, possibly integer zeroes were intended instead. The check offers a replacement of <code>'0'</code> with <code>0</code>. Memsetting character pointers with <code>'0'</code> is allowed.</p>
<p><strong>Case 2: Fill value is truncated</strong></p>
<p>Memset converts <code>fill_value</code> to <code>unsigned char</code> before using it. If <code>fill_value</code> is out of unsigned character range, it gets truncated and memory will not contain the desired pattern.</p>
<p><strong>Case 3: Byte count is zero</strong></p>
<p>Calling memset with a literal zero in its <code>byte_count</code> argument is likely to be unintended and swapped with <code>fill_value</code>. The check offers to swap these two arguments.</p>
<p>Corresponding cpplint.py check name: <code>runtime/memset</code>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>void foo() {
  int i[5] = {1, 2, 3, 4, 5};
  int *ip = i;
  char c = &#39;1&#39;;
  char *cp = &amp;c;
  int v = 0;

  // Case 1
  memset(ip, &#39;0&#39;, 1); // suspicious
  memset(cp, &#39;0&#39;, 1); // OK

  // Case 2
  memset(ip, 0xabcd, 1); // fill value gets truncated
  memset(ip, 0x00, 1);   // OK

  // Case 3
  memset(ip, sizeof(int), v); // zero length, potentially swapped
  memset(ip, 0, 1);           // OK
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-memset-usage.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-suspicious-missing-comma</key>
  <name>bugprone-suspicious-missing-comma</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-suspicious-missing-comma</p>
</div>
<h1 id="bugprone-suspicious-missing-comma">bugprone-suspicious-missing-comma</h1>
<p>String literals placed side-by-side are concatenated at translation phase 6 (after the preprocessor). This feature is used to represent long string literal on multiple lines.</p>
<p>For instance, the following declarations are equivalent:</p>
<pre class="sourceCode c++"><code>const char* A[] = &quot;This is a test&quot;;
const char* B[] = &quot;This&quot; &quot; is a &quot;    &quot;test&quot;;</code></pre>
<p>A common mistake done by programmers is to forget a comma between two string literals in an array initializer list.</p>
<pre class="sourceCode c++"><code>const char* Test[] = {
  &quot;line 1&quot;,
  &quot;line 2&quot;     // Missing comma!
  &quot;line 3&quot;,
  &quot;line 4&quot;,
  &quot;line 5&quot;
};</code></pre>
<p>The array contains the string &quot;line 2line3&quot; at offset 1 (i.e. Test[1]). Clang won't generate warnings at compile time.</p>
<p>This check may warn incorrectly on cases like:</p>
<pre class="sourceCode c++"><code>const char* SupportedFormat[] = {
  &quot;Error %s&quot;,
  &quot;Code &quot; PRIu64,   // May warn here.
  &quot;Warning %s&quot;,
};</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>SizeThreshold</p>
<p>An unsigned integer specifying the minimum size of a string literal to be considered by the check. Default is <span class="title-ref">5U</span>.</p>
</div>
<div class="option">
<p>RatioThreshold</p>
<p>A string specifying the maximum threshold ratio [0, 1.0] of suspicious string literals to be considered. Default is <span class="title-ref">&quot;.2&quot;</span>.</p>
</div>
<div class="option">
<p>MaxConcatenatedTokens</p>
<p>An unsigned integer specifying the maximum number of concatenated tokens. Default is <span class="title-ref">5U</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-missing-comma.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-suspicious-semicolon</key>
  <name>bugprone-suspicious-semicolon</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-suspicious-semicolon</p>
</div>
<h1 id="bugprone-suspicious-semicolon">bugprone-suspicious-semicolon</h1>
<p>Finds most instances of stray semicolons that unexpectedly alter the meaning of the code. More specifically, it looks for <code>if</code>, <code>while</code>, <code>for</code> and <code>for-range</code> statements whose body is a single semicolon, and then analyzes the context of the code (e.g. indentation) in an attempt to determine whether that is intentional.</p>
<blockquote>
<pre class="sourceCode c++"><code>if (x &lt; y);
{
  x++;
}</code></pre>
</blockquote>
<p>Here the body of the <code>if</code> statement consists of only the semicolon at the end of the first line, and <span class="title-ref">x</span> will be incremented regardless of the condition.</p>
<blockquote>
<pre class="sourceCode c++"><code>while ((line = readLine(file)) != NULL);
  processLine(line);</code></pre>
</blockquote>
<p>As a result of this code, <span class="title-ref">processLine()</span> will only be called once, when the <code>while</code> loop with the empty body exits with <span class="title-ref">line == NULL</span>. The indentation of the code indicates the intention of the programmer.</p>
<blockquote>
<pre class="sourceCode c++"><code>if (x &gt;= y);
x -= y;</code></pre>
</blockquote>
<p>While the indentation does not imply any nesting, there is simply no valid reason to have an <span class="title-ref">if</span> statement with an empty body (but it can make sense for a loop). So this check issues a warning for the code above.</p>
<p>To solve the issue remove the stray semicolon or in case the empty body is intentional, reflect this using code indentation or put the semicolon in a new line. For example:</p>
<blockquote>
<pre class="sourceCode c++"><code>while (readWhitespace());
  Token t = readNextToken();</code></pre>
</blockquote>
<p>Here the second line is indented in a way that suggests that it is meant to be the body of the <span class="title-ref">while</span> loop - whose body is in fact empty, because of the semicolon at the end of the first line.</p>
<p>Either remove the indentation from the second line:</p>
<blockquote>
<pre class="sourceCode c++"><code>while (readWhitespace());
Token t = readNextToken();</code></pre>
</blockquote>
<p>... or move the semicolon from the end of the first line to a new line:</p>
<blockquote>
<pre class="sourceCode c++"><code>while (readWhitespace())
  ;

  Token t = readNextToken();</code></pre>
</blockquote>
<p>In this case the check will assume that you know what you are doing, and will not raise a warning.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-semicolon.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-suspicious-string-compare</key>
  <name>bugprone-suspicious-string-compare</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-suspicious-string-compare</p>
</div>
<h1 id="bugprone-suspicious-string-compare">bugprone-suspicious-string-compare</h1>
<p>Find suspicious usage of runtime string comparison functions. This check is valid in C and C++.</p>
<p>Checks for calls with implicit comparator and proposed to explicitly add it.</p>
<pre class="sourceCode c++"><code>if (strcmp(...))       // Implicitly compare to zero
if (!strcmp(...))      // Won&#39;t warn
if (strcmp(...) != 0)  // Won&#39;t warn</code></pre>
<p>Checks that compare function results (i,e, <code>strcmp</code>) are compared to valid constant. The resulting value is</p>
<pre class="sourceCode "><code>&lt;  0    when lower than,
&gt;  0    when greater than,
== 0    when equals.</code></pre>
<p>A common mistake is to compare the result to <span class="title-ref">1</span> or <span class="title-ref">-1</span>.</p>
<pre class="sourceCode c++"><code>if (strcmp(...) == -1)  // Incorrect usage of the returned value.</code></pre>
<p>Additionally, the check warns if the results value is implicitly cast to a <em>suspicious</em> non-integer type. It's happening when the returned value is used in a wrong context.</p>
<pre class="sourceCode c++"><code>if (strcmp(...) &lt; 0.)  // Incorrect usage of the returned value.</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnImplicitComparison</p>
<p>When non-zero, the check will warn on implicit comparison. <span class="title-ref">1</span> by default.</p>
</div>
<div class="option">
<p>WarnOnLogicalNotComparison</p>
<p>When non-zero, the check will warn on logical not comparison. <span class="title-ref">0</span> by default.</p>
</div>
<div class="option">
<p>StringCompareLikeFunctions</p>
<p>A string specifying the comma-separated names of the extra string comparison functions. Default is an empty string. The check will detect the following string comparison functions: <span class="title-ref">__builtin_memcmp</span>, <span class="title-ref">__builtin_strcasecmp</span>, <span class="title-ref">__builtin_strcmp</span>, <span class="title-ref">__builtin_strncasecmp</span>, <span class="title-ref">__builtin_strncmp</span>, <span class="title-ref">_mbscmp</span>, <span class="title-ref">_mbscmp_l</span>, <span class="title-ref">_mbsicmp</span>, <span class="title-ref">_mbsicmp_l</span>, <span class="title-ref">_mbsnbcmp</span>, <span class="title-ref">_mbsnbcmp_l</span>, <span class="title-ref">_mbsnbicmp</span>, <span class="title-ref">_mbsnbicmp_l</span>, <span class="title-ref">_mbsncmp</span>, <span class="title-ref">_mbsncmp_l</span>, <span class="title-ref">_mbsnicmp</span>, <span class="title-ref">_mbsnicmp_l</span>, <span class="title-ref">_memicmp</span>, <span class="title-ref">_memicmp_l</span>, <span class="title-ref">_stricmp</span>, <span class="title-ref">_stricmp_l</span>, <span class="title-ref">_strnicmp</span>, <span class="title-ref">_strnicmp_l</span>, <span class="title-ref">_wcsicmp</span>, <span class="title-ref">_wcsicmp_l</span>, <span class="title-ref">_wcsnicmp</span>, <span class="title-ref">_wcsnicmp_l</span>, <span class="title-ref">lstrcmp</span>, <span class="title-ref">lstrcmpi</span>, <span class="title-ref">memcmp</span>, <span class="title-ref">memicmp</span>, <span class="title-ref">strcasecmp</span>, <span class="title-ref">strcmp</span>, <span class="title-ref">strcmpi</span>, <span class="title-ref">stricmp</span>, <span class="title-ref">strncasecmp</span>, <span class="title-ref">strncmp</span>, <span class="title-ref">strnicmp</span>, <span class="title-ref">wcscasecmp</span>, <span class="title-ref">wcscmp</span>, <span class="title-ref">wcsicmp</span>, <span class="title-ref">wcsncmp</span>, <span class="title-ref">wcsnicmp</span>, <span class="title-ref">wmemcmp</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-suspicious-string-compare.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-swapped-arguments</key>
  <name>bugprone-swapped-arguments</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-swapped-arguments</p>
</div>
<h1 id="bugprone-swapped-arguments">bugprone-swapped-arguments</h1>
<p>Finds potentially swapped arguments by looking at implicit conversions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-swapped-arguments.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-terminating-continue</key>
  <name>bugprone-terminating-continue</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-terminating-continue</p>
</div>
<h1 id="bugprone-terminating-continue">bugprone-terminating-continue</h1>
<p>Detects <span class="title-ref">do while</span> loops with a condition always evaluating to false that have a <span class="title-ref">continue</span> statement, as this <span class="title-ref">continue</span> terminates the loop effectively.</p>
<pre class="sourceCode c++"><code>void f() {
do {
  // some code
  continue; // terminating continue
  // some other code
} while(false);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-terminating-continue.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-throw-keyword-missing</key>
  <name>bugprone-throw-keyword-missing</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-throw-keyword-missing</p>
</div>
<h1 id="bugprone-throw-keyword-missing">bugprone-throw-keyword-missing</h1>
<p>Warns about a potentially missing <code>throw</code> keyword. If a temporary object is created, but the object's type derives from (or is the same as) a class that has 'EXCEPTION', 'Exception' or 'exception' in its name, we can assume that the programmer's intention was to throw that object.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>void f(int i) {
  if (i &lt; 0) {
    // Exception is created but is not thrown.
    std::runtime_error(&quot;Unexpected argument&quot;);
  }
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-throw-keyword-missing.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-undefined-memory-manipulation</key>
  <name>bugprone-undefined-memory-manipulation</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-undefined-memory-manipulation</p>
</div>
<h1 id="bugprone-undefined-memory-manipulation">bugprone-undefined-memory-manipulation</h1>
<p>Finds calls of memory manipulation functions <code>memset()</code>, <code>memcpy()</code> and <code>memmove()</code> on not TriviallyCopyable objects resulting in undefined behavior.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-undefined-memory-manipulation.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-undelegated-constructor</key>
  <name>bugprone-undelegated-constructor</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-undelegated-constructor</p>
</div>
<h1 id="bugprone-undelegated-constructor">bugprone-undelegated-constructor</h1>
<p>Finds creation of temporary objects in constructors that look like a function call to another constructor of the same class.</p>
<p>The user most likely meant to use a delegating constructor or base class initializer.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-undelegated-constructor.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-unused-raii</key>
  <name>bugprone-unused-raii</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-unused-raii</p>
</div>
<h1 id="bugprone-unused-raii">bugprone-unused-raii</h1>
<p>Finds temporaries that look like RAII objects.</p>
<p>The canonical example for this is a scoped lock.</p>
<pre class="sourceCode c++"><code>{
  scoped_lock(&amp;global_mutex);
  critical_section();
}</code></pre>
<p>The destructor of the scoped_lock is called before the <code>critical_section</code> is entered, leaving it unprotected.</p>
<p>We apply a number of heuristics to reduce the false positive count of this check:</p>
<ul>
<li>Ignore code expanded from macros. Testing frameworks make heavy use of this.</li>
<li>Ignore types with trivial destructors. They are very unlikely to be RAII objects and there's no difference when they are deleted.</li>
<li>Ignore objects at the end of a compound statement (doesn't change behavior).</li>
<li>Ignore objects returned from a call.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-unused-raii.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-unused-return-value</key>
  <name>bugprone-unused-return-value</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-unused-return-value</p>
</div>
<h1 id="bugprone-unused-return-value">bugprone-unused-return-value</h1>
<p>Warns on unused function return values. The checked funtions can be configured.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckedFunctions</p>
<p>Semicolon-separated list of functions to check. Defaults to <code>::std::async;::std::launder;::std::remove;::std::remove_if;::std::unique;::std::unique_ptr::release;::std::basic_string::empty;::std::vector::empty</code>. This means that the calls to following functions are checked by default:</p>
<ul>
<li><code>std::async()</code>. Not using the return value makes the call synchronous.</li>
<li><code>std::launder()</code>. Not using the return value usually means that the function interface was misunderstood by the programmer. Only the returned pointer is &quot;laundered&quot;, not the argument.</li>
<li><code>std::remove()</code>, <code>std::remove_if()</code> and <code>std::unique()</code>. The returned iterator indicates the boundary between elements to keep and elements to be removed. Not using the return value means that the information about which elements to remove is lost.</li>
<li><code>std::unique_ptr::release()</code>. Not using the return value can lead to resource leaks if the same pointer isn't stored anywhere else. Often, ignoring the <code>release()</code> return value indicates that the programmer confused the function with <code>reset()</code>.</li>
<li><code>std::basic_string::empty()</code> and <code>std::vector::empty()</code>. Not using the return value often indicates that the programmer confused the function with <code>clear()</code>.</li>
</ul>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-unused-return-value.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-use-after-move</key>
  <name>bugprone-use-after-move</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-use-after-move</p>
</div>
<h1 id="bugprone-use-after-move">bugprone-use-after-move</h1>
<p>Warns if an object is used after it has been moved, for example:</p>
<blockquote>
<pre class="sourceCode c++"><code>std::string str = &quot;Hello, world!\n&quot;;
std::vector&lt;std::string&gt; messages;
messages.emplace_back(std::move(str));
std::cout &lt;&lt; str;</code></pre>
</blockquote>
<p>The last line will trigger a warning that <code>str</code> is used after it has been moved.</p>
<p>The check does not trigger a warning if the object is reinitialized after the move and before the use. For example, no warning will be output for this code:</p>
<blockquote>
<pre class="sourceCode c++"><code>messages.emplace_back(std::move(str));
str = &quot;Greetings, stranger!\n&quot;;
std::cout &lt;&lt; str;</code></pre>
</blockquote>
<p>The check takes control flow into account. A warning is only emitted if the use can be reached from the move. This means that the following code does not produce a warning:</p>
<blockquote>
<pre class="sourceCode c++"><code>if (condition) {
  messages.emplace_back(std::move(str));
} else {
  std::cout &lt;&lt; str;
}</code></pre>
</blockquote>
<p>On the other hand, the following code does produce a warning:</p>
<blockquote>
<pre class="sourceCode c++"><code>for (int i = 0; i &lt; 10; ++i) {
  std::cout &lt;&lt; str;
  messages.emplace_back(std::move(str));
}</code></pre>
</blockquote>
<p>(The use-after-move happens on the second iteration of the loop.)</p>
<p>In some cases, the check may not be able to detect that two branches are mutually exclusive. For example (assuming that <code>i</code> is an int):</p>
<blockquote>
<pre class="sourceCode c++"><code>if (i == 1) {
  messages.emplace_back(std::move(str));
}
if (i == 2) {
  std::cout &lt;&lt; str;
}</code></pre>
</blockquote>
<p>In this case, the check will erroneously produce a warning, even though it is not possible for both the move and the use to be executed.</p>
<p>An erroneous warning can be silenced by reinitializing the object after the move:</p>
<blockquote>
<pre class="sourceCode c++"><code>if (i == 1) {
  messages.emplace_back(std::move(str));
  str = &quot;&quot;;
}
if (i == 2) {
  std::cout &lt;&lt; str;
}</code></pre>
</blockquote>
<p>Subsections below explain more precisely what exactly the check considers to be a move, use, and reinitialization.</p>
<h2 id="unsequenced-moves-uses-and-reinitializations">Unsequenced moves, uses, and reinitializations</h2>
<p>In many cases, C++ does not make any guarantees about the order in which sub-expressions of a statement are evaluated. This means that in code like the following, it is not guaranteed whether the use will happen before or after the move:</p>
<blockquote>
<pre class="sourceCode c++"><code>void f(int i, std::vector&lt;int&gt; v);
std::vector&lt;int&gt; v = { 1, 2, 3 };
f(v[1], std::move(v));</code></pre>
</blockquote>
<p>In this kind of situation, the check will note that the use and move are unsequenced.</p>
<p>The check will also take sequencing rules into account when reinitializations occur in the same statement as moves or uses. A reinitialization is only considered to reinitialize a variable if it is guaranteed to be evaluated after the move and before the use.</p>
<h2 id="move">Move</h2>
<p>The check currently only considers calls of <code>std::move</code> on local variables or function parameters. It does not check moves of member variables or global variables.</p>
<p>Any call of <code>std::move</code> on a variable is considered to cause a move of that variable, even if the result of <code>std::move</code> is not passed to an rvalue reference parameter.</p>
<p>This means that the check will flag a use-after-move even on a type that does not define a move constructor or move assignment operator. This is intentional. Developers may use <code>std::move</code> on such a type in the expectation that the type will add move semantics in the future. If such a <code>std::move</code> has the potential to cause a use-after-move, we want to warn about it even if the type does not implement move semantics yet.</p>
<p>Furthermore, if the result of <code>std::move</code> <em>is</em> passed to an rvalue reference parameter, this will always be considered to cause a move, even if the function that consumes this parameter does not move from it, or if it does so only conditionally. For example, in the following situation, the check will assume that a move always takes place:</p>
<blockquote>
<pre class="sourceCode c++"><code>std::vector&lt;std::string&gt; messages;
void f(std::string &amp;&amp;str) {
  // Only remember the message if it isn&#39;t empty.
  if (!str.empty()) {
    messages.emplace_back(std::move(str));
  }
}
std::string str = &quot;&quot;;
f(std::move(str));</code></pre>
</blockquote>
<p>The check will assume that the last line causes a move, even though, in this particular case, it does not. Again, this is intentional.</p>
<p>When analyzing the order in which moves, uses and reinitializations happen (see section <a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html#unsequenced-moves-uses-and-reinitializations">Unsequenced moves, uses, and reinitializations</a>), the move is assumed to occur in whichever function the result of the <code>std::move</code> is passed to.</p>
<h2 id="use">Use</h2>
<p>Any occurrence of the moved variable that is not a reinitialization (see below) is considered to be a use.</p>
<p>An exception to this are objects of type <code>std::unique_ptr</code>, <code>std::shared_ptr</code> and <code>std::weak_ptr</code>, which have defined move behavior (objects of these classes are guaranteed to be empty after they have been moved from). Therefore, an object of these classes will only be considered to be used if it is dereferenced, i.e. if <code>operator*</code>, <code>operator-&gt;</code> or <code>operator[]</code> (in the case of <code>std::unique_ptr&lt;T []&gt;</code>) is called on it.</p>
<p>If multiple uses occur after a move, only the first of these is flagged.</p>
<h2 id="reinitialization">Reinitialization</h2>
<p>The check considers a variable to be reinitialized in the following cases:</p>
<blockquote>
<ul>
<li>The variable occurs on the left-hand side of an assignment.</li>
<li>The variable is passed to a function as a non-const pointer or non-const lvalue reference. (It is assumed that the variable may be an out-parameter for the function.)</li>
<li><code>clear()</code> or <code>assign()</code> is called on the variable and the variable is of one of the standard container types <code>basic_string</code>, <code>vector</code>, <code>deque</code>, <code>forward_list</code>, <code>list</code>, <code>set</code>, <code>map</code>, <code>multiset</code>, <code>multimap</code>, <code>unordered_set</code>, <code>unordered_map</code>, <code>unordered_multiset</code>, <code>unordered_multimap</code>.</li>
<li><code>reset()</code> is called on the variable and the variable is of type <code>std::unique_ptr</code>, <code>std::shared_ptr</code> or <code>std::weak_ptr</code>.</li>
<li>A member function marked with the <code>[[clang::reinitializes]]</code> attribute is called on the variable.</li>
</ul>
</blockquote>
<p>If the variable in question is a struct and an individual member variable of that struct is written to, the check does not consider this to be a reinitialization -- even if, eventually, all member variables of the struct are written to. For example:</p>
<blockquote>
<pre class="sourceCode c++"><code>struct S {
  std::string str;
  int i;
};
S s = { &quot;Hello, world!\n&quot;, 42 };
S s_other = std::move(s);
s.str = &quot;Lorem ipsum&quot;;
s.i = 99;</code></pre>
</blockquote>
<p>The check will not consider <code>s</code> to be reinitialized after the last line; instead, the line that assigns to <code>s.str</code> will be flagged as a use-after-move. This is intentional as this pattern of reinitializing a struct is error-prone. For example, if an additional member variable is added to <code>S</code>, it is easy to forget to add the reinitialization for this additional member. Instead, it is safer to assign to the entire struct in one go, and this will also avoid the use-after-move warning.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-virtual-near-miss</key>
  <name>bugprone-virtual-near-miss</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - bugprone-virtual-near-miss</p>
</div>
<h1 id="bugprone-virtual-near-miss">bugprone-virtual-near-miss</h1>
<p>Warn if a function is a near miss (ie. the name is very similar and the function signiture is the same) to a virtual function from a base class.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>struct Base {
  virtual void func();
};

struct Derived : Base {
  virtual funk();
  // warning: &#39;Derived::funk&#39; has a similar name and the same signature as virtual method &#39;Base::func&#39;; did you mean to override it?
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-virtual-near-miss.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl03-c</key>
  <name>cert-dcl03-c</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-dcl03-c</p>
</div>
<div class="meta">

</div>
<h1 id="cert-dcl03-c">cert-dcl03-c</h1>
<p>The cert-dcl03-c check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html">misc-static-assert</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl03-c.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl21-cpp</key>
  <name>cert-dcl21-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-dcl21-cpp</p>
</div>
<h1 id="cert-dcl21-cpp">cert-dcl21-cpp</h1>
<p>This check flags postfix <code>operator++</code> and <code>operator--</code> declarations if the return type is not a const object. This also warns if the return type is a reference type.</p>
<p>This check corresponds to the CERT C++ Coding Standard recommendation <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL21-CPP.+Overloaded+postfix+increment+and+decrement+operators+should+return+a+const+object">DCL21-CPP. Overloaded postfix increment and decrement operators should return a const object</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl21-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl54-cpp</key>
  <name>cert-dcl54-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-dcl54-cpp</p>
</div>
<div class="meta">

</div>
<h1 id="cert-dcl54-cpp">cert-dcl54-cpp</h1>
<p>The cert-dcl54-cpp check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html">misc-new-delete-overloads</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl54-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl58-cpp</key>
  <name>cert-dcl58-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-dcl58-cpp</p>
</div>
<h1 id="cert-dcl58-cpp">cert-dcl58-cpp</h1>
<p>Modification of the <code>std</code> or <code>posix</code> namespace can result in undefined behavior. This check warns for such modifications.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>namespace std {
  int x; // May cause undefined behavior.
}</code></pre>
<p>This check corresponds to the CERT C++ Coding Standard rule <a href="https://www.securecoding.cert.org/confluence/display/cplusplus/DCL58-CPP.+Do+not+modify+the+standard+namespaces">DCL58-CPP. Do not modify the standard namespaces</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl58-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl59-cpp</key>
  <name>cert-dcl59-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-dcl59-cpp</p>
</div>
<div class="meta">

</div>
<h1 id="cert-dcl59-cpp">cert-dcl59-cpp</h1>
<p>The cert-dcl59-cpp check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html">google-build-namespaces</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl59-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-err09-cpp</key>
  <name>cert-err09-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-err09-cpp</p>
</div>
<div class="meta">

</div>
<h1 id="cert-err09-cpp">cert-err09-cpp</h1>
<p>The cert-err09-cpp check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html">misc-throw-by-value-catch-by-reference</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err09-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-err61-cpp</key>
  <name>cert-err61-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-err61-cpp</p>
</div>
<div class="meta">

</div>
<h1 id="cert-err61-cpp">cert-err61-cpp</h1>
<p>The cert-err61-cpp check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-throw-by-value-catch-by-reference.html">misc-throw-by-value-catch-by-reference</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-err61-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-fio38-c</key>
  <name>cert-fio38-c</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-fio38-c</p>
</div>
<div class="meta">

</div>
<h1 id="cert-fio38-c">cert-fio38-c</h1>
<p>The cert-fio38-c check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-non-copyable-objects.html">misc-non-copyable-objects</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-fio38-c.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-msc30-c</key>
  <name>cert-msc30-c</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-msc30-c</p>
</div>
<div class="meta">

</div>
<h1 id="cert-msc30-c">cert-msc30-c</h1>
<p>The cert-msc30-c check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc50-cpp.html">cert-msc50-cpp</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc30-c.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-msc32-c</key>
  <name>cert-msc32-c</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-msc32-c</p>
</div>
<div class="meta">

</div>
<h1 id="cert-msc32-c">cert-msc32-c</h1>
<p>The cert-msc32-c check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc51-cpp.html">cert-msc51-cpp</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc32-c.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-msc50-cpp</key>
  <name>cert-msc50-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-msc50-cpp</p>
</div>
<h1 id="cert-msc50-cpp">cert-msc50-cpp</h1>
<p>Pseudorandom number generators use mathematical algorithms to produce a sequence of numbers with good statistical properties, but the numbers produced are not genuinely random. The <code>std::rand()</code> function takes a seed (number), runs a mathematical operation on it and returns the result. By manipulating the seed the result can be predictable. This check warns for the usage of <code>std::rand()</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc50-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-msc51-cpp</key>
  <name>cert-msc51-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-msc51-cpp</p>
</div>
<h1 id="cert-msc51-cpp">cert-msc51-cpp</h1>
<p>This check flags all pseudo-random number engines, engine adaptor instantiations and <code>srand()</code> when initialized or seeded with default argument, constant expression or any user-configurable type. Pseudo-random number engines seeded with a predictable value may cause vulnerabilities e.g. in security protocols. This is a CERT security rule, see <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/MSC51-CPP.+Ensure+your+random+number+generator+is+properly+seeded">MSC51-CPP. Ensure your random number generator is properly seeded</a> and <a href="https://wiki.sei.cmu.edu/confluence/display/c/MSC32-C.+Properly+seed+pseudorandom+number+generators">MSC32-C. Properly seed pseudorandom number generators</a>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>void foo() {
  std::mt19937 engine1; // Diagnose, always generate the same sequence
  std::mt19937 engine2(1); // Diagnose
  engine1.seed(); // Diagnose
  engine2.seed(1); // Diagnose

  std::time_t t;
  engine1.seed(std::time(&amp;t)); // Diagnose, system time might be controlled by user

  int x = atoi(argv[1]);
  std::mt19937 engine3(x);  // Will not warn
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>DisallowedSeedTypes</p>
<p>A comma-separated list of the type names which are disallowed. Default values are <code>time_t</code>, <code>std::time_t</code>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-msc51-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-oop11-cpp</key>
  <name>cert-oop11-cpp</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cert-oop11-cpp</p>
</div>
<div class="meta">

</div>
<h1 id="cert-oop11-cpp">cert-oop11-cpp</h1>
<p>The cert-oop11-cpp check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html">performance-move-constructor-init</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-oop11-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-avoid-goto</key>
  <name>cppcoreguidelines-avoid-goto</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-goto</p>
</div>
<h1 id="cppcoreguidelines-avoid-goto">cppcoreguidelines-avoid-goto</h1>
<p>The usage of <code>goto</code> for control flow is error prone and should be replaced with looping constructs. Only forward jumps in nested loops are accepted.</p>
<p>This check implements <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es76-avoid-goto">ES.76</a> from the CppCoreGuidelines and <a href="http://www.codingstandard.com/rule/6-3-1-ensure-that-the-labels-for-a-jump-statement-or-a-switch-condition-appear-later-in-the-same-or-an-enclosing-block/">6.3.1 from High Integrity C++</a>.</p>
<p>For more information on why to avoid programming with <code>goto</code> you can read the famous paper <a href="https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF">A Case against the GO TO Statement.</a>.</p>
<p>The check diagnoses <code>goto</code> for backward jumps in every language mode. These should be replaced with <span class="title-ref">C/C++</span> looping constructs.</p>
<pre class="sourceCode c++"><code>// Bad, handwritten for loop.
int i = 0;
// Jump label for the loop
loop_start:
do_some_operation();

if (i &lt; 100) {
  ++i;
  goto loop_start;
}

// Better
for(int i = 0; i &lt; 100; ++i)
  do_some_operation();</code></pre>
<p>Modern C++ needs <code>goto</code> only to jump out of nested loops.</p>
<pre class="sourceCode c++"><code>for(int i = 0; i &lt; 100; ++i) {
  for(int j = 0; j &lt; 100; ++j) {
    if (i * j &gt; 500)
      goto early_exit;
  }
}

early_exit:
some_operation();</code></pre>
<p>All other uses of <code>goto</code> are diagnosed in <span class="title-ref">C++</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-avoid-goto.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-avoid-magic-numbers</key>
  <name>cppcoreguidelines-avoid-magic-numbers</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-avoid-magic-numbers</p>
</div>
<div class="meta">

</div>
<h1 id="cppcoreguidelines-avoid-magic-numbers">cppcoreguidelines-avoid-magic-numbers</h1>
<p>The cppcoreguidelines-avoid-magic-numbers check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-magic-numbers.html">readability-magic-numbers</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-avoid-magic-numbers.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-c-copy-assignment-signature</key>
  <name>cppcoreguidelines-c-copy-assignment-signature</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-c-copy-assignment-signature</p>
</div>
<div class="meta">

</div>
<h1 id="cppcoreguidelines-c-copy-assignment-signature">cppcoreguidelines-c-copy-assignment-signature</h1>
<p>The cppcoreguidelines-c-copy-assignment-signature check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-unconventional-assign-operator.html">misc-unconventional-assign-operator</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-c-copy-assignment-signature.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-narrowing-conversions</key>
  <name>cppcoreguidelines-narrowing-conversions</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-narrowing-conversions</p>
</div>
<h1 id="cppcoreguidelines-narrowing-conversions">cppcoreguidelines-narrowing-conversions</h1>
<p>Checks for silent narrowing conversions, e.g: <code>int i = 0; i += 0.1;</code>. While the issue is obvious in this former example, it might not be so in the following: <code>void MyClass::f(double d) { int_member_ += d; }</code>.</p>
<p>This rule is part of the &quot;Expressions and statements&quot; profile of the C++ Core Guidelines, corresponding to rule ES.46. See</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-narrowing" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Res-narrowing</a>.</p>
<dl>
<dt>We enforce only part of the guideline, more specifically, we flag:</dt>
<dd><ul>
<li>All floating-point to integer conversions that are not marked by an explicit cast (c-style or <code>static_cast</code>). For example: <code>int i = 0; i += 0.1;</code>, <code>void f(int); f(0.1);</code>,</li>
<li>All applications of binary operators where the left-hand-side is an integer and the right-hand-size is a floating-point. For example: <code>int i; i+= 0.1;</code>.</li>
</ul>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-narrowing-conversions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-owning-memory</key>
  <name>cppcoreguidelines-owning-memory</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-owning-memory</p>
</div>
<h1 id="cppcoreguidelines-owning-memory">cppcoreguidelines-owning-memory</h1>
<p>This check implements the type-based semantics of <code>gsl::owner&lt;T*&gt;</code>, which allows static analysis on code, that uses raw pointers to handle resources like dynamic memory, but won't introduce RAII concepts.</p>
<p>The relevant sections in the <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md">C++ Core Guidelines</a> are I.11, C.33, R.3 and GSL.Views The definition of a <code>gsl::owner&lt;T*&gt;</code> is straight forward</p>
<pre class="sourceCode c++"><code>namespace gsl { template &lt;typename T&gt; owner = T; }</code></pre>
<p>It is therefore simple to introduce the owner even without using an implementation of the <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#gsl-guideline-support-library">Guideline Support Library</a>.</p>
<p>All checks are purely type based and not (yet) flow sensitive.</p>
<p>The following examples will demonstrate the correct and incorrect initializations of owners, assignment is handled the same way. Note that both <code>new</code> and <code>malloc()</code>-like resource functions are considered to produce resources.</p>
<pre class="sourceCode c++"><code>// Creating an owner with factory functions is checked.
gsl::owner&lt;int*&gt; function_that_returns_owner() { return gsl::owner&lt;int*&gt;(new int(42)); }

// Dynamic memory must be assigned to an owner
int* Something = new int(42); // BAD, will be caught
gsl::owner&lt;int*&gt; Owner = new int(42); // Good
gsl::owner&lt;int*&gt; Owner = new int[42]; // Good as well

// Returned owner must be assigned to an owner
int* Something = function_that_returns_owner(); // Bad, factory function
gsl::owner&lt;int*&gt; Owner = function_that_returns_owner(); // Good, result lands in owner

// Something not a resource or owner should not be assigned to owners
int Stack = 42;
gsl::owner&lt;int*&gt; Owned = &amp;Stack; // Bad, not a resource assigned</code></pre>
<p>In the case of dynamic memory as resource, only <code>gsl::owner&lt;T*&gt;</code> variables are allowed to be deleted.</p>
<pre class="sourceCode c++"><code>// Example Bad, non-owner as resource handle, will be caught.
int* NonOwner = new int(42); // First warning here, since new must land in an owner
delete NonOwner; // Second warning here, since only owners are allowed to be deleted

// Example Good, Ownership correclty stated
gsl::owner&lt;int*&gt; Owner = new int(42); // Good
delete Owner; // Good as well, statically enforced, that only owners get deleted</code></pre>
<p>The check will furthermore ensure, that functions, that expect a <code>gsl::owner&lt;T*&gt;</code> as argument get called with either a <code>gsl::owner&lt;T*&gt;</code> or a newly created resource.</p>
<pre class="sourceCode c++"><code>void expects_owner(gsl::owner&lt;int*&gt; o) { delete o; }

// Bad Code
int NonOwner = 42;
expects_owner(&amp;NonOwner); // Bad, will get caught

// Good Code
gsl::owner&lt;int*&gt; Owner = new int(42);
expects_owner(Owner); // Good
expects_owner(new int(42)); // Good as well, recognized created resource

// Port legacy code for better resource-safety
gsl::owner&lt;FILE*&gt; File = fopen(&quot;my_file.txt&quot;, &quot;rw+&quot;);
FILE* BadFile = fopen(&quot;another_file.txt&quot;, &quot;w&quot;); // Bad, warned

// ... use the file

fclose(File); // Ok, File is annotated as &#39;owner&lt;&gt;&#39;
fclose(BadFile); // BadFile is not an &#39;owner&lt;&gt;&#39;, will be warned</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>LegacyResourceProducers</p>
<p>Semicolon-separated list of fully qualified names of legacy functions that create resources but cannot introduce <code>gsl::owner&lt;&gt;</code>. Defaults to <code>::malloc;::aligned_alloc;::realloc;::calloc;::fopen;::freopen;::tmpfile</code>.</p>
</div>
<div class="option">
<p>LegacyResourceConsumers</p>
<p>Semicolon-separated list of fully qualified names of legacy functions expecting resource owners as pointer arguments but cannot introduce <code>gsl::owner&lt;&gt;</code>. Defaults to <code>::free;::realloc;::freopen;::fclose</code>.</p>
</div>
<h2 id="limitations">Limitations</h2>
<p>Using <code>gsl::owner&lt;T*&gt;</code> in a typedef or alias is not handled correctly.</p>
<pre class="sourceCode c++"><code>using heap_int = gsl::owner&lt;int*&gt;;
heap_int allocated = new int(42); // False positive!</code></pre>
<p>The <code>gsl::owner&lt;T*&gt;</code> is declared as a templated type alias. In template functions and classes, like in the example below, the information of the type aliases gets lost. Therefore using <code>gsl::owner&lt;T*&gt;</code> in a heavy templated code base might lead to false positives.</p>
<p>Known code constructs that do not get diagnosed correctly are:</p>
<ul>
<li><code>std::exchange</code></li>
<li><code>std::vector&lt;gsl::owner&lt;T*&gt;&gt;</code></li>
</ul>
<pre class="sourceCode c++"><code>// This template function works as expected. Type information doesn&#39;t get lost.
template &lt;typename T&gt;
void delete_owner(gsl::owner&lt;T*&gt; owned_object) {
  delete owned_object; // Everything alright
}

gsl::owner&lt;int*&gt; function_that_returns_owner() { return gsl::owner&lt;int*&gt;(new int(42)); }

// Type deduction does not work for auto variables. 
// This is caught by the check and will be noted accordingly.
auto OwnedObject = function_that_returns_owner(); // Type of OwnedObject will be int*

// Problematic function template that looses the typeinformation on owner
template &lt;typename T&gt;
void bad_template_function(T some_object) {
  // This line will trigger the warning, that a non-owner is assigned to an owner
  gsl::owner&lt;T*&gt; new_owner = some_object;
}

// Calling the function with an owner still yields a false positive.
bad_template_function(gsl::owner&lt;int*&gt;(new int(42)));


// The same issue occurs with templated classes like the following.
template &lt;typename T&gt;
class OwnedValue {
public:
  const T getValue() const { return _val; }
private:
  T _val;
};

// Code, that yields a false positive.
OwnedValue&lt;gsl::owner&lt;int*&gt;&gt; Owner(new int(42)); // Type deduction yield T -&gt; int * 
// False positive, getValue returns int* and not gsl::owner&lt;int*&gt;
gsl::owner&lt;int*&gt; OwnedInt = Owner.getValue(); </code></pre>
<p>Another limitation of the current implementation is only the type based checking. Suppose you have code like the following:</p>
<pre class="sourceCode c++"><code>// Two owners with assigned resources
gsl::owner&lt;int*&gt; Owner1 = new int(42); 
gsl::owner&lt;int*&gt; Owner2 = new int(42);

Owner2 = Owner1; // Conceptual Leak of initial resource of Owner2!
Owner1 = nullptr;</code></pre>
<p>The semantic of a <code>gsl::owner&lt;T*&gt;</code> is mostly like a <code>std::unique_ptr&lt;T&gt;</code>, therefore assignment of two <code>gsl::owner&lt;T*&gt;</code> is considered a move, which requires that the resource <code>Owner2</code> must have been released before the assignment. This kind of condition could be catched in later improvements of this check with flowsensitive analysis. Currently, the <span class="title-ref">Clang Static Analyzer</span> catches this bug for dynamic memory, but not for general types of resources.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-owning-memory.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-slicing</key>
  <name>cppcoreguidelines-slicing</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-slicing</p>
</div>
<h1 id="cppcoreguidelines-slicing">cppcoreguidelines-slicing</h1>
<p>Flags slicing of member variables or vtable. Slicing happens when copying a derived object into a base object: the members of the derived object (both member variables and virtual member functions) will be discarded. This can be misleading especially for member function slicing, for example:</p>
<pre class="sourceCode c++"><code>struct B { int a; virtual int f(); };
struct D : B { int b; int f() override; };

void use(B b) {  // Missing reference, intended?
  b.f();  // Calls B::f.
}

D d;
use(d);  // Slice.</code></pre>
<p>See the relevant C++ Core Guidelines sections for details: <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es63-dont-slice" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es63-dont-slice</a> <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c145-access-polymorphic-objects-through-pointers-and-references" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c145-access-polymorphic-objects-through-pointers-and-references</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-slicing.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-special-member-functions</key>
  <name>cppcoreguidelines-special-member-functions</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - cppcoreguidelines-special-member-functions</p>
</div>
<h1 id="cppcoreguidelines-special-member-functions">cppcoreguidelines-special-member-functions</h1>
<p>The check finds classes where some but not all of the special member functions are defined.</p>
<p>By default the compiler defines a copy constructor, copy assignment operator, move constructor, move assignment operator and destructor. The default can be suppressed by explicit user-definitions. The relationship between which functions will be suppressed by definitions of other functions is complicated and it is advised that all five are defaulted or explicitly defined.</p>
<p>Note that defining a function with <code>= delete</code> is considered to be a definition.</p>
<p>This rule is part of the &quot;Constructors, assignments, and destructors&quot; profile of the C++ Core Guidelines, corresponding to rule C.21. See</p>
<p><a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all" class="uri">https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#c21-if-you-define-or-delete-any-default-operation-define-or-delete-them-all</a>.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowSoleDefaultDtor</p>
<p>When set to <span class="title-ref">1</span> (default is <span class="title-ref">0</span>), this check doesn't flag classes with a sole, explicitly defaulted destructor. An example for such a class is:</p>
<pre class="sourceCode c++"><code>struct A {
  virtual ~A() = default;
};</code></pre>
</div>
<div class="option">
<p>AllowMissingMoveFunctions</p>
<p>When set to <span class="title-ref">1</span> (default is <span class="title-ref">0</span>), this check doesn't flag classes which define no move operations at all. It still flags classes which define only one of either move constructor or move assignment operator. With this option enabled, the following class won't be flagged:</p>
<pre class="sourceCode c++"><code>struct A {
  A(const A&amp;);
  A&amp; operator=(const A&amp;);
  ~A();
}</code></pre>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-default-arguments</key>
  <name>fuchsia-default-arguments</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-default-arguments</p>
</div>
<h1 id="fuchsia-default-arguments">fuchsia-default-arguments</h1>
<p>Warns if a function or method is declared or called with default arguments.</p>
<p>For example, the declaration:</p>
<pre class="sourceCode c++"><code>int foo(int value = 5) { return value; }</code></pre>
<p>will cause a warning.</p>
<p>A function call expression that uses a default argument will be diagnosed. Calling it without defaults will not cause a warning:</p>
<pre class="sourceCode c++"><code>foo();  // warning
foo(0); // no warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-header-anon-namespaces</key>
  <name>fuchsia-header-anon-namespaces</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-header-anon-namespaces</p>
</div>
<div class="meta">

</div>
<h1 id="fuchsia-header-anon-namespaces">fuchsia-header-anon-namespaces</h1>
<p>The fuchsia-header-anon-namespaces check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/google-build-namespaces.html">google-build-namespace</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-header-anon-namespaces.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-multiple-inheritance</key>
  <name>fuchsia-multiple-inheritance</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-multiple-inheritance</p>
</div>
<h1 id="fuchsia-multiple-inheritance">fuchsia-multiple-inheritance</h1>
<p>Warns if a class inherits from multiple classes that are not pure virtual.</p>
<p>For example, declaring a class that inherits from multiple concrete classes is disallowed:</p>
<pre class="sourceCode c++"><code>class Base_A {
public:
  virtual int foo() { return 0; }
};

class Base_B {
public:
  virtual int bar() { return 0; }
};

// Warning
class Bad_Child1 : public Base_A, Base_B {};</code></pre>
<p>A class that inherits from a pure virtual is allowed:</p>
<pre class="sourceCode c++"><code>class Interface_A {
public:
  virtual int foo() = 0;
};

class Interface_B {
public:
  virtual int bar() = 0;
};

// No warning
class Good_Child1 : public Interface_A, Interface_B {
  virtual int foo() override { return 0; }
  virtual int bar() override { return 0; }
};</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-multiple-inheritance.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-overloaded-operator</key>
  <name>fuchsia-overloaded-operator</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-overloaded-operator</p>
</div>
<h1 id="fuchsia-overloaded-operator">fuchsia-overloaded-operator</h1>
<p>Warns if an operator is overloaded, except for the assignment (copy and move) operators.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>int operator+(int);     // Warning

B &amp;operator=(const B &amp;Other);  // No warning
B &amp;operator=(B &amp;&amp;Other) // No warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-overloaded-operator.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-restrict-system-includes</key>
  <name>fuchsia-restrict-system-includes</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-restrict-system-includes</p>
</div>
<h1 id="fuchsia-restrict-system-includes">fuchsia-restrict-system-includes</h1>
<p>Checks for allowed system includes and suggests removal of any others.</p>
<p>It is important to note that running this check with fixes may break code, as the fix removes headers. Fixes are applied to source and header files, but not to system headers.</p>
<p>For example, given the allowed system includes 'a.h,b*':</p>
<pre class="sourceCode c++"><code>#include &lt;a.h&gt;
#include &lt;b.h&gt;
#include &lt;bar.h&gt;
#include &lt;c.h&gt;    // Warning, as c.h is not explicitly allowed</code></pre>
<p>All system includes can be allowed with '*', and all can be disallowed with an empty string ('').</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Includes</p>
<p>A string containing a comma separated glob list of allowed include filenames. Similar to the -checks glob list for running clang-tidy itself, the two wildcard characters are '*' and '-', to include and exclude globs, respectively.The default is '*', which allows all includes.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-restrict-system-includes.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-statically-constructed-objects</key>
  <name>fuchsia-statically-constructed-objects</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-statically-constructed-objects</p>
</div>
<h1 id="fuchsia-statically-constructed-objects">fuchsia-statically-constructed-objects</h1>
<p>Warns if global, non-trivial objects with static storage are constructed, unless the object is statically initialized with a <code>constexpr</code> constructor or has no explicit constructor.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>class A {};

class B {
public:
  B(int Val) : Val(Val) {}
private:
  int Val;
};

class C {
public:
  C(int Val) : Val(Val) {}
  constexpr C() : Val(0) {}

private:
  int Val;
};

static A a;         // No warning, as there is no explicit constructor
static C c(0);      // No warning, as constructor is constexpr

static B b(0);      // Warning, as constructor is not constexpr
static C c2(0, 1);  // Warning, as constructor is not constexpr

static int i;       // No warning, as it is trivial

extern int get_i();
static C(get_i())   // Warning, as the constructor is dynamically initialized</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-statically-constructed-objects.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-trailing-return</key>
  <name>fuchsia-trailing-return</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-trailing-return</p>
</div>
<h1 id="fuchsia-trailing-return">fuchsia-trailing-return</h1>
<p>Functions that have trailing returns are disallowed, except for those using <code>decltype</code> specifiers and lambda with otherwise unutterable return types.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>// No warning
int add_one(const int arg) { return arg; }

// Warning
auto get_add_one() -&gt; int (*)(const int) {
  return add_one;
}</code></pre>
<p>Exceptions are made for lambdas and <code>decltype</code> specifiers:</p>
<pre class="sourceCode c++"><code>// No warning
auto lambda = [](double x, double y) -&gt; double {return x + y;};

// No warning
template &lt;typename T1, typename T2&gt;
auto fn(const T1 &amp;lhs, const T2 &amp;rhs) -&gt; decltype(lhs + rhs) {
  return lhs + rhs;
}</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-trailing-return.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-virtual-inheritance</key>
  <name>fuchsia-virtual-inheritance</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - fuchsia-virtual-inheritance</p>
</div>
<h1 id="fuchsia-virtual-inheritance">fuchsia-virtual-inheritance</h1>
<p>Warns if classes are defined with virtual inheritance.</p>
<p>For example, classes should not be defined with virtual inheritance:</p>
<pre class="sourceCode c++"><code>class B : public virtual A {};   // warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-virtual-inheritance.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-objc-avoid-throwing-exception</key>
  <name>google-objc-avoid-throwing-exception</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - google-objc-avoid-throwing-exception</p>
</div>
<h1 id="google-objc-avoid-throwing-exception">google-objc-avoid-throwing-exception</h1>
<p>Finds uses of throwing exceptions usages in Objective-C files.</p>
<p>For the same reason as the Google C++ style guide, we prefer not throwing exceptions from Objective-C code.</p>
<p>The corresponding C++ style guide rule: <a href="https://google.github.io/styleguide/cppguide.html#Exceptions" class="uri">https://google.github.io/styleguide/cppguide.html#Exceptions</a></p>
<p>Instead, prefer passing in <code>NSError **</code> and return <code>BOOL</code> to indicate success or failure.</p>
<p>A counterexample:</p>
<pre class="sourceCode objc"><code>- (void)readFile {
  if ([self isError]) {
    @throw [NSException exceptionWithName:...];
  }
}</code></pre>
<p>Instead, returning an error via <code>NSError **</code> is preferred:</p>
<pre class="sourceCode objc"><code>- (BOOL)readFileWithError:(NSError **)error {
  if ([self isError]) {
    *error = [NSError errorWithDomain:...];
    return NO;
  }
  return YES;
}</code></pre>
<p>The corresponding style guide rule: <a href="http://google.github.io/styleguide/objcguide.html#avoid-throwing-exceptions" class="uri">http://google.github.io/styleguide/objcguide.html#avoid-throwing-exceptions</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-throwing-exception.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-objc-global-variable-declaration</key>
  <name>google-objc-global-variable-declaration</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - google-objc-global-variable-declaration</p>
</div>
<h1 id="google-objc-global-variable-declaration">google-objc-global-variable-declaration</h1>
<p>Finds global variable declarations in Objective-C files that do not follow the pattern of variable names in Google's Objective-C Style Guide.</p>
<p>The corresponding style guide rule: <a href="http://google.github.io/styleguide/objcguide.html#variable-names" class="uri">http://google.github.io/styleguide/objcguide.html#variable-names</a></p>
<p>All the global variables should follow the pattern of <span class="title-ref">g[A-Z].*</span> (variables) or <span class="title-ref">k[A-Z].*</span> (constants). The check will suggest a variable name that follows the pattern if it can be inferred from the original name.</p>
<p>For code:</p>
<pre class="sourceCode objc"><code>static NSString* myString = @&quot;hello&quot;;</code></pre>
<p>The fix will be:</p>
<pre class="sourceCode objc"><code>static NSString* gMyString = @&quot;hello&quot;;</code></pre>
<p>Another example of constant:</p>
<pre class="sourceCode objc"><code>static NSString* const myConstString = @&quot;hello&quot;;</code></pre>
<p>The fix will be:</p>
<pre class="sourceCode objc"><code>static NSString* const kMyConstString = @&quot;hello&quot;;</code></pre>
<p>However for code that prefixed with non-alphabetical characters like:</p>
<pre class="sourceCode objc"><code>static NSString* __anotherString = @&quot;world&quot;;</code></pre>
<p>The check will give a warning message but will not be able to suggest a fix. The user need to fix it on his own.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-objc-global-variable-declaration.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-readability-braces-around-statements</key>
  <name>google-readability-braces-around-statements</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - google-readability-braces-around-statements</p>
</div>
<div class="meta">

</div>
<h1 id="google-readability-braces-around-statements">google-readability-braces-around-statements</h1>
<p>The google-readability-braces-around-statements check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html">readability-braces-around-statements</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-braces-around-statements.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-readability-function-size</key>
  <name>google-readability-function-size</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - google-readability-function-size</p>
</div>
<div class="meta">

</div>
<h1 id="google-readability-function-size">google-readability-function-size</h1>
<p>The google-readability-function-size check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html">readability-function-size</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-function-size.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-avoid-goto</key>
  <name>hicpp-avoid-goto</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-avoid-goto</p>
</div>
<h1 id="hicpp-avoid-goto">hicpp-avoid-goto</h1>
<p>The <span class="title-ref">hicpp-avoid-goto</span> check is an alias to <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-avoid-goto.html">cppcoreguidelines-avoid-goto</a>. Rule <a href="http://www.codingstandard.com/rule/6-3-1-ensure-that-the-labels-for-a-jump-statement-or-a-switch-condition-appear-later-in-the-same-or-an-enclosing-block/">6.3.1 High Integrity C++</a> requires that <code>goto</code> only skips parts of a block and is not used for other reasons.</p>
<p>Both coding guidelines implement the same exception to the usage of <code>goto</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-avoid-goto.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-braces-around-statements</key>
  <name>hicpp-braces-around-statements</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-braces-around-statements</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-braces-around-statements">hicpp-braces-around-statements</h1>
<p>The <span class="title-ref">hicpp-braces-around-statements</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-braces-around-statements.html">readability-braces-around-statements</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/6-1-1-enclose-the-body-of-a-selection-or-an-iteration-statement-in-a-compound-statement/">rule 6.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-braces-around-statements.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-deprecated-headers</key>
  <name>hicpp-deprecated-headers</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-deprecated-headers</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-deprecated-headers">hicpp-deprecated-headers</h1>
<p>The <span class="title-ref">hicpp-deprecated-headers</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-headers.html">modernize-deprecated-headers</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/1-3-3-do-not-use-the-c-standard-library-h-headers/">rule 1.3.3</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-deprecated-headers.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-exception-baseclass</key>
  <name>hicpp-exception-baseclass</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-exception-baseclass</p>
</div>
<h1 id="hicpp-exception-baseclass">hicpp-exception-baseclass</h1>
<p>Ensure that every value that in a <code>throw</code> expression is an instance of <code>std::exception</code>.</p>
<p>This enforces <a href="http://www.codingstandard.com/section/15-1-throwing-an-exception/">rule 15.1</a> of the High Integrity C++ Coding Standard.</p>
<pre class="sourceCode c++"><code>class custom_exception {};

void throwing() noexcept(false) {
  // Problematic throw expressions.
  throw int(42);
  throw custom_exception();
}

class mathematical_error : public std::exception {};

void throwing2() noexcept(false) {
  // These kind of throws are ok.
  throw mathematical_error();
  throw std::runtime_error();
  throw std::exception();
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-exception-baseclass.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-explicit-conversions</key>
  <name>hicpp-explicit-conversions</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-explicit-conversions</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-explicit-conversions">hicpp-explicit-conversions</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/google-explicit-constructor.html">google-explicit-constructor</a>. Used to enforce parts of <a href="http://www.codingstandard.com/rule/5-4-1-only-use-casting-forms-static_cast-excl-void-dynamic_cast-or-explicit-constructor-call/">rule 5.4.1</a>. This check will enforce that constructors and conversion operators are marked <span class="title-ref">explicit</span>. Other forms of casting checks are implemented in other places. The following checks can be used to check for more forms of casting:</p>
<ul>
<li><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-static-cast-downcast.html">cppcoreguidelines-pro-type-static-cast-downcast</a></li>
<li><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-reinterpret-cast.html">cppcoreguidelines-pro-type-reinterpret-cast</a></li>
<li><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-const-cast.html">cppcoreguidelines-pro-type-const-cast</a></li>
<li><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-cstyle-cast.html">cppcoreguidelines-pro-type-cstyle-cast</a></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-explicit-conversions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-function-size</key>
  <name>hicpp-function-size</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-function-size</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-function-size">hicpp-function-size</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-function-size.html">readability-function-size</a>. Useful to enforce multiple sections on function complexity.</p>
<ul>
<li><a href="http://www.codingstandard.com/rule/8-2-2-do-not-declare-functions-with-an-excessive-number-of-parameters/">rule 8.2.2</a></li>
<li><a href="http://www.codingstandard.com/rule/8-3-1-do-not-write-functions-with-an-excessive-mccabe-cyclomatic-complexity/">rule 8.3.1</a></li>
<li><a href="http://www.codingstandard.com/rule/8-3-2-do-not-write-functions-with-a-high-static-program-path-count/">rule 8.3.2</a></li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-function-size.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-invalid-access-moved</key>
  <name>hicpp-invalid-access-moved</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-invalid-access-moved</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-invalid-access-moved">hicpp-invalid-access-moved</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-use-after-move.html">bugprone-use-after-move</a>.</p>
<p>Implements parts of the <a href="http://www.codingstandard.com/rule/8-4-1-do-not-access-an-invalid-object-or-an-object-with-indeterminate-value/">rule 8.4.1</a> to check if moved-from objects are accessed.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-invalid-access-moved.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-member-init</key>
  <name>hicpp-member-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-member-init</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-member-init">hicpp-member-init</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-member-init.html">cppcoreguidelines-pro-type-member-init</a>. Implements the check for <a href="http://www.codingstandard.com/rule/12-4-2-ensure-that-a-constructor-initializes-explicitly-all-base-classes-and-non-static-data-members/">rule 12.4.2</a> to initialize class members in the right order.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-member-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-move-const-arg</key>
  <name>hicpp-move-const-arg</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-move-const-arg</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-move-const-arg">hicpp-move-const-arg</h1>
<p>The <span class="title-ref">hicpp-move-const-arg</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html">performance-move-const-arg</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/17-3-1-do-not-use-stdmove-on-objects-declared-with-const-or-const-type/">rule 17.3.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-move-const-arg.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-multiway-paths-covered</key>
  <name>hicpp-multiway-paths-covered</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-multiway-paths-covered</p>
</div>
<h1 id="hicpp-multiway-paths-covered">hicpp-multiway-paths-covered</h1>
<p>This check discovers situations where code paths are not fully-covered. It furthermore suggests using <code>if</code> instead of <code>switch</code> if the code will be more clear. The <a href="http://www.codingstandard.com/rule/6-1-2-explicitly-cover-all-paths-through-multi-way-selection-statements/">rule 6.1.2</a> and <a href="http://www.codingstandard.com/rule/6-1-4-ensure-that-a-switch-statement-has-at-least-two-case-labels-distinct-from-the-default-label/">rule 6.1.4</a> of the High Integrity C++ Coding Standard are enforced.</p>
<p><code>if-else if</code> chains that miss a final <code>else</code> branch might lead to unexpected program execution and be the result of a logical error. If the missing <code>else</code> branch is intended you can leave it empty with a clarifying comment. This warning can be noisy on some code bases, so it is disabled by default.</p>
<pre class="sourceCode c++"><code>void f1() {
  int i = determineTheNumber();

   if(i &gt; 0) { 
     // Some Calculation 
   } else if (i &lt; 0) { 
     // Precondition violated or something else. 
   }
   // ...
}</code></pre>
<p>Similar arguments hold for <code>switch</code> statements which do not cover all possible code paths.</p>
<pre class="sourceCode c++"><code>// The missing default branch might be a logical error. It can be kept empty
// if there is nothing to do, making it explicit.
void f2(int i) {
  switch (i) {
  case 0: // something
    break;
  case 1: // something else
    break;
  }
  // All other numbers?
}

// Violates this rule as well, but already emits a compiler warning (-Wswitch).
enum Color { Red, Green, Blue, Yellow };
void f3(enum Color c) {
  switch (c) {
  case Red: // We can&#39;t drive for now.
    break;
  case Green:  // We are allowed to drive.
    break;
  }
  // Other cases missing
}</code></pre>
<p>The <a href="http://www.codingstandard.com/rule/6-1-4-ensure-that-a-switch-statement-has-at-least-two-case-labels-distinct-from-the-default-label/">rule 6.1.4</a> requires every <code>switch</code> statement to have at least two <code>case</code> labels other than a <span class="title-ref">default</span> label. Otherwise, the <code>switch</code> could be better expressed with an <code>if</code> statement. Degenerated <code>switch</code> statements without any labels are caught as well.</p>
<pre class="sourceCode c++"><code>// Degenerated switch that could be better written as `if`
int i = 42;
switch(i) {
  case 1: // do something here
  default: // do somethe else here
}

// Should rather be the following:
if (i == 1) { 
  // do something here 
}
else { 
  // do something here 
}</code></pre>
<pre class="sourceCode c++"><code>// A completly degenerated switch will be diagnosed.
int i = 42;
switch(i) {}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>WarnOnMissingElse</p>
<p>Boolean flag that activates a warning for missing <code>else</code> branches. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-multiway-paths-covered.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-named-parameter</key>
  <name>hicpp-named-parameter</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-named-parameter</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-named-parameter">hicpp-named-parameter</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-named-parameter.html">readability-named-parameter</a>.</p>
<p>Implements <a href="http://www.codingstandard.com/rule/8-2-1-make-parameter-names-absent-or-identical-in-all-declarations/">rule 8.2.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-named-parameter.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-new-delete-operators</key>
  <name>hicpp-new-delete-operators</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-new-delete-operators</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-new-delete-operators">hicpp-new-delete-operators</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-new-delete-overloads.html">misc-new-delete-overloads</a>. Implements <a href="http://www.codingstandard.com/section/12-3-free-store/">rule 12.3.1</a> to ensure the <span class="title-ref">new</span> and <span class="title-ref">delete</span> operators have the correct signature.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-new-delete-operators.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-no-array-decay</key>
  <name>hicpp-no-array-decay</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-no-array-decay</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-no-array-decay">hicpp-no-array-decay</h1>
<p>The <span class="title-ref">hicpp-no-array-decay</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-bounds-array-to-pointer-decay.html">cppcoreguidelines-pro-bounds-array-to-pointer-decay</a> for more information. It enforces the <a href="http://www.codingstandard.com/section/4-1-array-to-pointer-conversion/">rule 4.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-array-decay.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-no-assembler</key>
  <name>hicpp-no-assembler</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-no-assembler</p>
</div>
<h1 id="hicpp-no-assembler">hicpp-no-assembler</h1>
<p>Check for assembler statements. No fix is offered.</p>
<p>Inline assembler is forbidden by the <a href="http://www.codingstandard.com/section/7-5-the-asm-declaration/">High Intergrity C++ Coding Standard</a> as it restricts the portability of code.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-assembler.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-no-malloc</key>
  <name>hicpp-no-malloc</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-no-malloc</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-no-malloc">hicpp-no-malloc</h1>
<p>The <span class="title-ref">hicpp-no-malloc</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-no-malloc.html">cppcoreguidelines-no-malloc</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/5-3-2-allocate-memory-using-new-and-release-it-using-delete/">rule 5.3.2</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-no-malloc.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-noexcept-move</key>
  <name>hicpp-noexcept-move</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-noexcept-move</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-noexcept-move">hicpp-noexcept-move</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-noexcept-moveconstructor.html">misc-noexcept-moveconstructor</a>. Checks <a href="http://www.codingstandard.com/rule/12-5-4-declare-noexcept-the-move-constructor-and-move-assignment-operator">rule 12.5.4</a> to mark move assignment and move construction <span class="title-ref">noexcept</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-noexcept-move.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-signed-bitwise</key>
  <name>hicpp-signed-bitwise</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-signed-bitwise</p>
</div>
<h1 id="hicpp-signed-bitwise">hicpp-signed-bitwise</h1>
<p>Finds uses of bitwise operations on signed integer types, which may lead to undefined or implementation defined behaviour.</p>
<p>The according rule is defined in the <a href="http://www.codingstandard.com/section/5-6-shift-operators/">High Integrity C++ Standard, Section 5.6.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-signed-bitwise.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-special-member-functions</key>
  <name>hicpp-special-member-functions</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-special-member-functions</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-special-member-functions">hicpp-special-member-functions</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-special-member-functions.html">cppcoreguidelines-special-member-functions</a>. Checks that special member functions have the correct signature, according to <a href="http://www.codingstandard.com/rule/12-5-7-declare-assignment-operators-with-the-ref-qualifier/">rule 12.5.7</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-special-member-functions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-static-assert</key>
  <name>hicpp-static-assert</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-static-assert</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-static-assert">hicpp-static-assert</h1>
<p>The <span class="title-ref">hicpp-static-assert</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-static-assert.html">misc-static-assert</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/6-1-1-enclose-the-body-of-a-selection-or-an-iteration-statement-in-a-compound-statement/">rule 7.1.10</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-static-assert.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-undelegated-constructor</key>
  <name>hicpp-undelegated-constructor</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-undelegated-construtor</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-undelegated-constructor">hicpp-undelegated-constructor</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-undelegated-constructor.html">bugprone-undelegated-constructor</a>. Partially implements <a href="http://www.codingstandard.com/rule/12-4-5-use-delegating-constructors-to-reduce-code-duplication/">rule 12.4.5</a> to find misplaced constructor calls inside a constructor.</p>
<pre class="sourceCode c++"><code>struct Ctor {
  Ctor();
  Ctor(int);
  Ctor(int, int);
  Ctor(Ctor *i) {
    // All Ctor() calls result in a temporary object
    Ctor(); // did you intend to call a delegated constructor? 
    Ctor(0); // did you intend to call a delegated constructor?
    Ctor(1, 2); // did you intend to call a delegated constructor?
    foo();
  }
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-undelegated-constructor.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-auto</key>
  <name>hicpp-use-auto</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-auto</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-auto">hicpp-use-auto</h1>
<p>The <span class="title-ref">hicpp-use-auto</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-auto.html">modernize-use-auto</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/7-1-8-use-auto-id-expr-when-declaring-a-variable-to-have-the-same-type-as-its-initializer-function-call/">rule 7.1.8</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-auto.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-emplace</key>
  <name>hicpp-use-emplace</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-emplace</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-emplace">hicpp-use-emplace</h1>
<p>The <span class="title-ref">hicpp-use-emplace</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-emplace.html">modernize-use-emplace</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/17-4-2-use-api-calls-that-construct-objects-in-place/">rule 17.4.2</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-emplace.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-equals-default</key>
  <name>hicpp-use-equals-default</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-equals-defaults</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-equals-default">hicpp-use-equals-default</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html">modernize-use-equals-default</a>. Implements <a href="http://www.codingstandard.com/rule/12-5-1-define-explicitly-default-or-delete-implicit-special-member-functions-of-concrete-classes/">rule 12.5.1</a> to explicitly default special member functions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-default.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-equals-delete</key>
  <name>hicpp-use-equals-delete</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-equals-delete</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-equals-delete">hicpp-use-equals-delete</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html">modernize-use-equals-delete</a>. Implements <a href="http://www.codingstandard.com/rule/12-5-1-define-explicitly-default-or-delete-implicit-special-member-functions-of-concrete-classes/">rule 12.5.1</a> to explicitly default or delete special member functions.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-equals-delete.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-noexcept</key>
  <name>hicpp-use-noexcept</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-noexcept</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-noexcept">hicpp-use-noexcept</h1>
<p>The <span class="title-ref">hicpp-use-noexcept</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-noexcept.html">modernize-use-noexcept</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/1-3-5-do-not-use-throw-exception-specifications/">rule 1.3.5</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-noexcept.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-nullptr</key>
  <name>hicpp-use-nullptr</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-nullptr</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-nullptr">hicpp-use-nullptr</h1>
<p>The <span class="title-ref">hicpp-use-nullptr</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nullptr.html">modernize-use-nullptr</a> for more information. It enforces the <a href="http://www.codingstandard.com/rule/2-5-3-use-nullptr-for-the-null-pointer-constant/">rule 2.5.3</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-nullptr.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-use-override</key>
  <name>hicpp-use-override</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-use-override</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-use-override">hicpp-use-override</h1>
<p>This check is an alias for <a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-override.html">modernize-use-override</a>. Implements <a href="http://www.codingstandard.com/section/10-2-virtual-functions/">rule 10.2.1</a> to declare a virtual function <span class="title-ref">override</span> when overriding.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-use-override.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-vararg</key>
  <name>hicpp-vararg</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - hicpp-vararg</p>
</div>
<div class="meta">

</div>
<h1 id="hicpp-vararg">hicpp-vararg</h1>
<p>The <span class="title-ref">hicpp-vararg</span> check is an alias, please see <a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-pro-type-vararg.html">cppcoreguidelines-pro-type-vararg</a> for more information. It enforces the <a href="http://www.codingstandard.com/section/14-1-template-declarations/">rule 14.1.1</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-vararg.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-replace-random-shuffle</key>
  <name>modernize-replace-random-shuffle</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-replace-random-shuffle</p>
</div>
<h1 id="modernize-replace-random-shuffle">modernize-replace-random-shuffle</h1>
<p>This check will find occurrences of <code>std::random_shuffle</code> and replace it with <code>std::shuffle</code>. In C++17 <code>std::random_shuffle</code> will no longer be available and thus we need to replace it.</p>
<p>Below are two examples of what kind of occurrences will be found and two examples of what it will be replaced with.</p>
<pre class="sourceCode c++"><code>std::vector&lt;int&gt; v;

// First example
std::random_shuffle(vec.begin(), vec.end());

// Second example
std::random_shuffle(vec.begin(), vec.end(), randomFunc);</code></pre>
<p>Both of these examples will be replaced with:</p>
<pre class="sourceCode c++"><code>std::shuffle(vec.begin(), vec.end(), std::mt19937(std::random_device()()));</code></pre>
<p>The second example will also receive a warning that <code>randomFunc</code> is no longer supported in the same way as before so if the user wants the same functionality, the user will need to change the implementation of the <code>randomFunc</code>.</p>
<p>One thing to be aware of here is that <code>std::random_device</code> is quite expensive to initialize. So if you are using the code in a performance critical place, you probably want to initialize it elsewhere. Another thing is that the seeding quality of the suggested fix is quite poor: <code>std::mt19937</code> has an internal state of 624 32-bit integers, but is only seeded with a single integer. So if you require higher quality randomness, you should consider seeding better, for example:</p>
<pre class="sourceCode c++"><code>std::shuffle(v.begin(), v.end(), []() {
  std::mt19937::result_type seeds[std::mt19937::state_size];
  std::random_device device;
  std::uniform_int_distribution&lt;typename std::mt19937::result_type&gt; dist;
  std::generate(std::begin(seeds), std::end(seeds), [&amp;] { return dist(device); });
  std::seed_seq seq(std::begin(seeds), std::end(seeds));
  return std::mt19937(seq);
}());</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-return-braced-init-list</key>
  <name>modernize-return-braced-init-list</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-return-braced-init-list</p>
</div>
<h1 id="modernize-return-braced-init-list">modernize-return-braced-init-list</h1>
<p>Replaces explicit calls to the constructor in a return with a braced initializer list. This way the return type is not needlessly duplicated in the function definition and the return statement.</p>
<pre class="sourceCode c++"><code>Foo bar() {
  Baz baz;
  return Foo(baz);
}

// transforms to:

Foo bar() {
  Baz baz;
  return {baz};
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-return-braced-init-list.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-unary-static-assert</key>
  <name>modernize-unary-static-assert</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-unary-static-assert</p>
</div>
<h1 id="modernize-unary-static-assert">modernize-unary-static-assert</h1>
<p>The check diagnoses any <code>static_assert</code> declaration with an empty string literal and provides a fix-it to replace the declaration with a single-argument <code>static_assert</code> declaration.</p>
<p>The check is only applicable for C++17 and later code.</p>
<p>The following code:</p>
<pre class="sourceCode c++"><code>void f_textless(int a) {
  static_assert(sizeof(a) &lt;= 10, &quot;&quot;);
}</code></pre>
<p>is replaced by:</p>
<pre class="sourceCode c++"><code>void f_textless(int a) {
  static_assert(sizeof(a) &lt;= 10);
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-unary-static-assert.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-default-member-init</key>
  <name>modernize-use-default-member-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-default-member-init</p>
</div>
<h1 id="modernize-use-default-member-init">modernize-use-default-member-init</h1>
<p>This check converts a default constructor's member initializers into the new default member initializers in C++11. Other member initializers that match the default member initializer are removed. This can reduce repeated code or allow use of '= default'.</p>
<pre class="sourceCode c++"><code>struct A {
  A() : i(5), j(10.0) {}
  A(int i) : i(i), j(10.0) {}
  int i;
  double j;
};

// becomes

struct A {
  A() {}
  A(int i) : i(i) {}
  int i{5};
  double j{10.0};
};</code></pre>
<div class="note">
<div class="admonition-title">
<p>Note</p>
</div>
<p>Only converts member initializers for built-in types, enums, and pointers. The <span class="title-ref">readability-redundant-member-init</span> check will remove redundant member initializers for classes.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>UseAssignment</p>
<p>If this option is set to non-zero (default is <span class="title-ref">0</span>), the check will initialise members with an assignment. For example:</p>
</div>
<pre class="sourceCode c++"><code>struct A {
  A() {}
  A(int i) : i(i) {}
  int i = 5;
  double j = 10.0;
};</code></pre>
<div class="option">
<p>IgnoreMacros</p>
<p>If this option is set to non-zero (default is <span class="title-ref">1</span>), the check will not warn about members declared inside macros.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-default-member-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-equals-default</key>
  <name>modernize-use-equals-default</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-equals-default</p>
</div>
<h1 id="modernize-use-equals-default">modernize-use-equals-default</h1>
<p>This check replaces default bodies of special member functions with <code>= default;</code>. The explicitly defaulted function declarations enable more opportunities in optimization, because the compiler might treat explicitly defaulted functions as trivial.</p>
<pre class="sourceCode c++"><code>struct A {
  A() {}
  ~A();
};
A::~A() {}

// becomes

struct A {
  A() = default;
  ~A();
};
A::~A() = default;</code></pre>
<div class="note">
<div class="admonition-title">
<p>Note</p>
</div>
<p>Move-constructor and move-assignment operator are not supported yet.</p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-default.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-equals-delete</key>
  <name>modernize-use-equals-delete</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-equals-delete</p>
</div>
<h1 id="modernize-use-equals-delete">modernize-use-equals-delete</h1>
<p>This check marks unimplemented private special member functions with <code>= delete</code>. To avoid false-positives, this check only applies in a translation unit that has all other member functions implemented.</p>
<pre class="sourceCode c++"><code>struct A {
private:
  A(const A&amp;);
  A&amp; operator=(const A&amp;);
};

// becomes

struct A {
private:
  A(const A&amp;) = delete;
  A&amp; operator=(const A&amp;) = delete;
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-equals-delete.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-noexcept</key>
  <name>modernize-use-noexcept</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-noexcept</p>
</div>
<h1 id="modernize-use-noexcept">modernize-use-noexcept</h1>
<p>This check replaces deprecated dynamic exception specifications with the appropriate noexcept specification (introduced in C++11). By default this check will replace <code>throw()</code> with <code>noexcept</code>, and <code>throw(&lt;exception&gt;[,...])</code> or <code>throw(...)</code> with <code>noexcept(false)</code>.</p>
<h2 id="example">Example</h2>
<pre class="sourceCode c++"><code>void foo() throw();
  void bar() throw(int) {}</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>void foo() noexcept;
  void bar() noexcept(false) {}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>ReplacementString</p>
</div>
<p>Users can use <code class="interpreted-text" data-role="option">ReplacementString</code> to specify a macro to use instead of <code>noexcept</code>. This is useful when maintaining source code that uses custom exception specification marking other than <code>noexcept</code>. Fix-it hints will only be generated for non-throwing specifications.</p>
<h3 id="example-1">Example</h3>
<pre class="sourceCode c++"><code>void bar() throw(int);
void foo() throw();</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>void bar() throw(int);  // No fix-it generated.
void foo() NOEXCEPT;</code></pre>
<p>if the <code class="interpreted-text" data-role="option">ReplacementString</code> option is set to <span class="title-ref">NOEXCEPT</span>.</p>
<div class="option">
<p>UseNoexceptFalse</p>
</div>
<p>Enabled by default, disabling will generate fix-it hints that remove throwing dynamic exception specs, e.g., <code>throw(&lt;something&gt;)</code>, completely without providing a replacement text, except for destructors and delete operators that are <code>noexcept(true)</code> by default.</p>
<h3 id="example-2">Example</h3>
<pre class="sourceCode c++"><code>void foo() throw(int) {}

struct bar {
  void foobar() throw(int);
  void operator delete(void *ptr) throw(int);
  void operator delete[](void *ptr) throw(int);
  ~bar() throw(int);
}</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>void foo() {}

struct bar {
  void foobar();
  void operator delete(void *ptr) noexcept(false);
  void operator delete[](void *ptr) noexcept(false);
  ~bar() noexcept(false);
}</code></pre>
<p>if the <code class="interpreted-text" data-role="option">UseNoexceptFalse</code> option is set to <span class="title-ref">0</span>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-noexcept.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-transparent-functors</key>
  <name>modernize-use-transparent-functors</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-transparent-functors</p>
</div>
<h1 id="modernize-use-transparent-functors">modernize-use-transparent-functors</h1>
<p>Prefer transparent functors to non-transparent ones. When using transparent functors, the type does not need to be repeated. The code is easier to read, maintain and less prone to errors. It is not possible to introduce unwanted conversions.</p>
<blockquote>
<pre class="sourceCode c++"><code>// Non-transparent functor
std::map&lt;int, std::string, std::greater&lt;int&gt;&gt; s;

// Transparent functor.
std::map&lt;int, std::string, std::greater&lt;&gt;&gt; s;

// Non-transparent functor
using MyFunctor = std::less&lt;MyType&gt;;</code></pre>
</blockquote>
<p>It is not always a safe transformation though. The following case will be untouched to preserve the semantics.</p>
<blockquote>
<pre class="sourceCode c++"><code>// Non-transparent functor
std::map&lt;const char *, std::string, std::greater&lt;std::string&gt;&gt; s;</code></pre>
</blockquote>
<h2 id="options">Options</h2>
<div class="option">
<p>SafeMode</p>
<p>If the option is set to non-zero, the check will not diagnose cases where using a transparent functor cannot be guaranteed to produce identical results as the original code. The default value for this option is <span class="title-ref">0</span>.</p>
</div>
<p>This check requires using C++14 or higher to run.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-transparent-functors.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-uncaught-exceptions</key>
  <name>modernize-use-uncaught-exceptions</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - modernize-use-uncaught-exceptions</p>
</div>
<h1 id="modernize-use-uncaught-exceptions">modernize-use-uncaught-exceptions</h1>
<p>This check will warn on calls to <code>std::uncaught_exception</code> and replace them with calls to <code>std::uncaught_exceptions</code>, since <code>std::uncaught_exception</code> was deprecated in C++17.</p>
<p>Below are a few examples of what kind of occurrences will be found and what they will be replaced with.</p>
<pre class="sourceCode c++"><code>#define MACRO1 std::uncaught_exception
#define MACRO2 std::uncaught_exception

int uncaught_exception() {
    return 0;
}

int main() {
    int res;

  res = uncaught_exception();
  // No warning, since it is not the deprecated function from namespace std

  res = MACRO2();
  // Warning, but will not be replaced

  res = std::uncaught_exception();
  // Warning and replaced

  using std::uncaught_exception;
  // Warning and replaced

  res = uncaught_exception();
  // Warning and replaced
}</code></pre>
<p>After applying the fixes the code will look like the following:</p>
<pre class="sourceCode c++"><code>#define MACRO1 std::uncaught_exception
#define MACRO2 std::uncaught_exception

int uncaught_exception() {
    return 0;
}

int main() {
  int res;

  res = uncaught_exception();

  res = MACRO2();

  res = std::uncaught_exceptions();

  using std::uncaught_exceptions;

  res = uncaught_exceptions();
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-uncaught-exceptions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>mpi-buffer-deref</key>
  <name>mpi-buffer-deref</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - mpi-buffer-deref</p>
</div>
<h1 id="mpi-buffer-deref">mpi-buffer-deref</h1>
<p>This check verifies if a buffer passed to an MPI (Message Passing Interface) function is sufficiently dereferenced. Buffers should be passed as a single pointer or array. As MPI function signatures specify <code>void *</code> for their buffer types, insufficiently dereferenced buffers can be passed, like for example as double pointers or multidimensional arrays, without a compiler warning emitted.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// A double pointer is passed to the MPI function.
char *buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);

// A multidimensional array is passed to the MPI function.
short buf[1][1];
MPI_Send(buf, 1, MPI_SHORT, 0, 0, MPI_COMM_WORLD);

// A pointer to an array is passed to the MPI function.
short *buf[1];
MPI_Send(buf, 1, MPI_SHORT, 0, 0, MPI_COMM_WORLD);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/mpi-buffer-deref.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>mpi-type-mismatch</key>
  <name>mpi-type-mismatch</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - mpi-type-mismatch</p>
</div>
<h1 id="mpi-type-mismatch">mpi-type-mismatch</h1>
<p>This check verifies if buffer type and MPI (Message Passing Interface) datatype pairs match for used MPI functions. All MPI datatypes defined by the MPI standard (3.1) are verified by this check. User defined typedefs, custom MPI datatypes and null pointer constants are skipped, in the course of verification.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>// In this case, the buffer type matches MPI datatype.
char buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);

// In the following case, the buffer type does not match MPI datatype.
int buf;
MPI_Send(&amp;buf, 1, MPI_CHAR, 0, 0, MPI_COMM_WORLD);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/mpi-type-mismatch.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>objc-avoid-nserror-init</key>
  <name>objc-avoid-nserror-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - objc-avoid-nserror-init</p>
</div>
<h1 id="objc-avoid-nserror-init">objc-avoid-nserror-init</h1>
<p>Finds improper initialization of <code>NSError</code> objects.</p>
<p>According to Apple developer document, we should always use factory method <code>errorWithDomain:code:userInfo:</code> to create new NSError objects instead of <code>[NSError alloc] init]</code>. Otherwise it will lead to a warning message during runtime.</p>
<p>The corresponding information about <code>NSError</code> creation: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/CreateCustomizeNSError/CreateCustomizeNSError.html" class="uri">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/CreateCustomizeNSError/CreateCustomizeNSError.html</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-nserror-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>objc-avoid-spinlock</key>
  <name>objc-avoid-spinlock</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - objc-avoid-spinlock</p>
</div>
<h1 id="objc-avoid-spinlock">objc-avoid-spinlock</h1>
<p>Finds usages of <code>OSSpinlock</code>, which is deprecated due to potential livelock problems.</p>
<p>This check will detect following function invocations:</p>
<ul>
<li><code>OSSpinlockLock</code></li>
<li><code>OSSpinlockTry</code></li>
<li><code>OSSpinlockUnlock</code></li>
</ul>
<p>The corresponding information about the problem of <code>OSSpinlock</code>: <a href="https://blog.postmates.com/why-spinlocks-are-bad-on-ios-b69fc5221058" class="uri">https://blog.postmates.com/why-spinlocks-are-bad-on-ios-b69fc5221058</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc-avoid-spinlock.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>objc-forbidden-subclassing</key>
  <name>objc-forbidden-subclassing</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - objc-forbidden-subclassing</p>
</div>
<h1 id="objc-forbidden-subclassing">objc-forbidden-subclassing</h1>
<p>Finds Objective-C classes which are subclasses of classes which are not designed to be subclassed.</p>
<p>By default, includes a list of Objective-C classes which are publicly documented as not supporting subclassing.</p>
<div class="note">
<div class="admonition-title">
<p>Note</p>
</div>
<p>Instead of using this check, for code under your control, you should add <code>__attribute__((objc_subclassing_restricted))</code> before your <code>@interface</code> declarations to ensure the compiler prevents others from subclassing your Objective-C classes. See <a href="https://clang.llvm.org/docs/AttributeReference.html#objc-subclassing-restricted" class="uri">https://clang.llvm.org/docs/AttributeReference.html#objc-subclassing-restricted</a></p>
</div>
<h2 id="options">Options</h2>
<div class="option">
<p>ForbiddenSuperClassNames</p>
<p>Semicolon-separated list of names of Objective-C classes which do not support subclassing.</p>
<p>Defaults to <span class="title-ref">ABNewPersonViewController;ABPeoplePickerNavigationController;ABPersonViewController;ABUnknownPersonViewController;NSHashTable;NSMapTable;NSPointerArray;NSPointerFunctions;NSTimer;UIActionSheet;UIAlertView;UIImagePickerController;UITextInputMode;UIWebView</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc-forbidden-subclassing.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>objc-property-declaration</key>
  <name>objc-property-declaration</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - objc-property-declaration</p>
</div>
<h1 id="objc-property-declaration">objc-property-declaration</h1>
<p>Finds property declarations in Objective-C files that do not follow the pattern of property names in Apple's programming guide. The property name should be in the format of Lower Camel Case.</p>
<p>For code:</p>
<pre class="sourceCode objc"><code>@property(nonatomic, assign) int LowerCamelCase;</code></pre>
<p>The fix will be:</p>
<pre class="sourceCode objc"><code>@property(nonatomic, assign) int lowerCamelCase;</code></pre>
<p>The check will only fix 'CamelCase' to 'camelCase'. In some other cases we will only provide warning messages since the property name could be complicated. Users will need to come up with a proper name by their own.</p>
<p>This check also accepts special acronyms as prefixes or suffixes. Such prefixes or suffixes will suppress the Lower Camel Case check according to the guide: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-1002931-BBCFHEAB" class="uri">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingBasics.html#//apple_ref/doc/uid/20001281-1002931-BBCFHEAB</a></p>
<p>For a full list of well-known acronyms: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE" class="uri">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/APIAbbreviations.html#//apple_ref/doc/uid/20001285-BCIHCGAE</a></p>
<p>The corresponding style rule: <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-1001757" class="uri">https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/CodingGuidelines/Articles/NamingIvarsAndTypes.html#//apple_ref/doc/uid/20001284-1001757</a></p>
<p>The check will also accept property declared in category with a prefix of lowercase letters followed by a '_' to avoid naming conflict. For example:</p>
<pre class="sourceCode objc"><code>@property(nonatomic, assign) int abc_lowerCamelCase;</code></pre>
<p>The corresponding style rule: <a href="https://developer.apple.com/library/content/qa/qa1908/_index.html" class="uri">https://developer.apple.com/library/content/qa/qa1908/_index.html</a></p>
<h2 id="options">Options</h2>
<div class="option">
<p>Acronyms</p>
<p>Semicolon-separated list of custom acronyms that can be used as a prefix or a suffix of property names.</p>
<p>By default, appends to the list of default acronyms ( <code>IncludeDefaultAcronyms</code> set to <code>1</code>). If <code>IncludeDefaultAcronyms</code> is set to <code>0</code>, instead replaces the default list of acronyms.</p>
</div>
<div class="option">
<p>IncludeDefaultAcronyms</p>
<p>Integer value (defaults to <code>1</code>) to control whether the default acronyms are included in the list of acronyms.</p>
<p>If set to <code>1</code>, the value in <code>Acronyms</code> is appended to the default list of acronyms:</p>
<p><code>[2-9]G;ACL;API;APN;APNS;AR;ARGB;ASCII;AV;BGRA;CA;CDN;CF;CG;CI;CRC;CV;CMYK;DNS;FPS;FTP;GIF;GL;GPS;GUID;HD;HDR;HMAC;HTML;HTTP;HTTPS;HUD;ID;JPG;JS;JSON;LAN;LZW;LTR;MAC;MD;MDNS;MIDI;NS;OS;P2P;PDF;PIN;PNG;POI;PSTN;PTR;QA;QOS;RGB;RGBA;RGBX;RIPEMD;ROM;RPC;RTF;RTL;SC;SDK;SHA;SQL;SSO;TCP;TIFF;TOS;TTS;UI;URI;URL;UUID;VC;VO;VOIP;VPN;VR;W;WAN;X;XML;Y;Z</code>.</p>
<p>If set to <code>0</code>, the value in <code>Acronyms</code> replaces the default list of acronyms.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc-property-declaration.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-implicit-conversion-in-loop</key>
  <name>performance-implicit-conversion-in-loop</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-implicit-conversion-in-loop</p>
</div>
<h1 id="performance-implicit-conversion-in-loop">performance-implicit-conversion-in-loop</h1>
<p>This warning appears in a range-based loop with a loop variable of const ref type where the type of the variable does not match the one returned by the iterator. This means that an implicit conversion happens, which can for example result in expensive deep copies.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>map&lt;int, vector&lt;string&gt;&gt; my_map;
for (const pair&lt;int, vector&lt;string&gt;&gt;&amp; p : my_map) {}
// The iterator type is in fact pair&lt;const int, vector&lt;string&gt;&gt;, which means
// that the compiler added a conversion, resulting in a copy of the vectors.</code></pre>
<p>The easiest solution is usually to use <code>const auto&amp;</code> instead of writing the type manually.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-implicit-conversion-in-loop.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-inefficient-algorithm</key>
  <name>performance-inefficient-algorithm</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-inefficient-algorithm</p>
</div>
<h1 id="performance-inefficient-algorithm">performance-inefficient-algorithm</h1>
<p>Warns on inefficient use of STL algorithms on associative containers.</p>
<p>Associative containers implements some of the algorithms as methods which should be preferred to the algorithms in the algorithm header. The methods can take advanatage of the order of the elements.</p>
<pre class="sourceCode c++"><code>std::set&lt;int&gt; s;
auto it = std::find(s.begin(), s.end(), 43);

// becomes

auto it = s.find(43);</code></pre>
<pre class="sourceCode c++"><code>std::set&lt;int&gt; s;
auto c = std::count(s.begin(), s.end(), 43);

// becomes

auto c = s.count(43);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-algorithm.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-inefficient-string-concatenation</key>
  <name>performance-inefficient-string-concatenation</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-inefficient-string-concatenation</p>
</div>
<h1 id="performance-inefficient-string-concatenation">performance-inefficient-string-concatenation</h1>
<p>This check warns about the performance overhead arising from concatenating strings using the <code>operator+</code>, for instance:</p>
<pre class="sourceCode c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Bar&quot;);
a = a + b;</code></pre>
<p>Instead of this structure you should use <code>operator+=</code> or <code>std::string</code>'s (<code>std::basic_string</code>) class member function <code>append()</code>. For instance:</p>
<pre class="sourceCode c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
for (int i = 0; i &lt; 20000; ++i) {
    a = a + &quot;Bar&quot; + b;
}</code></pre>
<p>Could be rewritten in a greatly more efficient way like:</p>
<pre class="sourceCode c++"><code>std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
for (int i = 0; i &lt; 20000; ++i) {
    a.append(&quot;Bar&quot;).append(b);
}</code></pre>
<p>And this can be rewritten too:</p>
<pre class="sourceCode c++"><code>void f(const std::string&amp;) {}
std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
void g() {
    f(a + &quot;Bar&quot; + b);
}</code></pre>
<p>In a slightly more efficient way like:</p>
<pre class="sourceCode c++"><code>void f(const std::string&amp;) {}
std::string a(&quot;Foo&quot;), b(&quot;Baz&quot;);
void g() {
    f(std::string(a).append(&quot;Bar&quot;).append(b));
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>StrictMode</p>
<p>When zero, the check will only check the string usage in <code>while</code>, <code>for</code> and <code>for-range</code> statements. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-string-concatenation.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-inefficient-vector-operation</key>
  <name>performance-inefficient-vector-operation</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-inefficient-vector-operation</p>
</div>
<h1 id="performance-inefficient-vector-operation">performance-inefficient-vector-operation</h1>
<p>Finds possible inefficient <code>std::vector</code> operations (e.g. <code>push_back</code>, <code>emplace_back</code>) that may cause unnecessary memory reallocations.</p>
<p>Currently, the check only detects following kinds of loops with a single statement body:</p>
<ul>
<li>Counter-based for loops start with 0:</li>
</ul>
<pre class="sourceCode c++"><code>std::vector&lt;int&gt; v;
for (int i = 0; i &lt; n; ++i) {
  v.push_back(n);
  // This will trigger the warning since the push_back may cause multiple
  // memory reallocations in v. This can be avoid by inserting a &#39;reserve(n)&#39;
  // statement before the for statement.
}</code></pre>
<ul>
<li>For-range loops like <code>for (range-declaration : range_expression)</code>, the type of <code>range_expression</code> can be <code>std::vector</code>, <code>std::array</code>, <code>std::deque</code>, <code>std::set</code>, <code>std::unordered_set</code>, <code>std::map</code>, <code>std::unordered_set</code>:</li>
</ul>
<pre class="sourceCode c++"><code>std::vector&lt;int&gt; data;
std::vector&lt;int&gt; v;

for (auto element : data) {
  v.push_back(element);
  // This will trigger the warning since the &#39;push_back&#39; may cause multiple
  // memory reallocations in v. This can be avoid by inserting a
  // &#39;reserve(data.size())&#39; statement before the for statement.
}</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>VectorLikeClasses</p>
<p>Semicolon-separated list of names of vector-like classes. By default only <code>::std::vector</code> is considered.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-inefficient-vector-operation.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-move-const-arg</key>
  <name>performance-move-const-arg</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-move-const-arg</p>
</div>
<h1 id="performance-move-const-arg">performance-move-const-arg</h1>
<p>The check warns</p>
<ul>
<li>if <code>std::move()</code> is called with a constant argument,</li>
<li>if <code>std::move()</code> is called with an argument of a trivially-copyable type,</li>
<li>if the result of <code>std::move()</code> is passed as a const reference argument.</li>
</ul>
<p>In all three cases, the check will suggest a fix that removes the <code>std::move()</code>.</p>
<p>Here are examples of each of the three cases:</p>
<pre class="sourceCode c++"><code>const string s;
return std::move(s);  // Warning: std::move of the const variable has no effect

int x;
return std::move(x);  // Warning: std::move of the variable of a trivially-copyable type has no effect

void f(const string &amp;s);
string s;
f(std::move(s));  // Warning: passing result of std::move as a const reference argument; no move will actually happen</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>CheckTriviallyCopyableMove</p>
<p>If non-zero, enables detection of trivially copyable types that do not have a move constructor. Default is non-zero.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-move-const-arg.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-move-constructor-init</key>
  <name>performance-move-constructor-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-move-constructor-init</p>
</div>
<h1 id="performance-move-constructor-init">performance-move-constructor-init</h1>
<p>&quot;cert-oop11-cpp&quot; redirects here as an alias for this check.</p>
<p>The check flags user-defined move constructors that have a ctor-initializer initializing a member or base class through a copy constructor instead of a move constructor.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IncludeStyle</p>
<p>A string specifying which include-style is used, <span class="title-ref">llvm</span> or <span class="title-ref">google</span>. Default is <span class="title-ref">llvm</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-move-constructor-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-noexcept-move-constructor</key>
  <name>performance-noexcept-move-constructor</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-noexcept-move-constructor</p>
</div>
<h1 id="performance-noexcept-move-constructor">performance-noexcept-move-constructor</h1>
<p>The check flags user-defined move constructors and assignment operators not marked with <code>noexcept</code> or marked with <code>noexcept(expr)</code> where <code>expr</code> evaluates to <code>false</code> (but is not a <code>false</code> literal itself).</p>
<p>Move constructors of all the types used with STL containers, for example, need to be declared <code>noexcept</code>. Otherwise STL will choose copy constructors instead. The same is valid for move assignment operations.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-noexcept-move-constructor.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>performance-type-promotion-in-math-fn</key>
  <name>performance-type-promotion-in-math-fn</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - performance-type-promotion-in-math-fn</p>
</div>
<h1 id="performance-type-promotion-in-math-fn">performance-type-promotion-in-math-fn</h1>
<p>Finds calls to C math library functions (from <code>math.h</code> or, in C++, <code>cmath</code>) with implicit <code>float</code> to <code>double</code> promotions.</p>
<p>For example, warns on <code>::sin(0.f)</code>, because this funciton's parameter is a double. You probably meant to call <code>std::sin(0.f)</code> (in C++), or <code>sinf(0.f)</code> (in C).</p>
<pre class="sourceCode c++"><code>float a;
asin(a);

// becomes

float a;
std::asin(a);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/performance-type-promotion-in-math-fn.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>portability-simd-intrinsics</key>
  <name>portability-simd-intrinsics</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - portability-simd-intrinsics</p>
</div>
<h1 id="portability-simd-intrinsics">portability-simd-intrinsics</h1>
<p>Finds SIMD intrinsics calls and suggests <code>std::experimental::simd</code> (<a href="http://wg21.link/p0214">P0214</a>) alternatives.</p>
<p>If the option <code>Suggest</code> is set to non-zero, for</p>
<pre class="sourceCode c++"><code>_mm_add_epi32(a, b); // x86
vec_add(a, b);       // Power</code></pre>
<p>the check suggests an alternative: <code>operator+</code> on <code>std::experimental::simd</code> objects.</p>
<p>Otherwise, it just complains the intrinsics are non-portable (and there are <a href="http://wg21.link/p0214">P0214</a> alternatives).</p>
<p>Many architectures provide SIMD operations (e.g. x86 SSE/AVX, Power AltiVec/VSX, ARM NEON). It is common that SIMD code implementing the same algorithm, is written in multiple target-dispatching pieces to optimize for different architectures or micro-architectures.</p>
<p>The C++ standard proposal <a href="http://wg21.link/p0214">P0214</a> and its extensions cover many common SIMD operations. By migrating from target-dependent intrinsics to <a href="http://wg21.link/p0214">P0214</a> operations, the SIMD code can be simplified and pieces for different targets can be unified.</p>
<p>Refer to <a href="http://wg21.link/p0214">P0214</a> for introduction and motivation for the data-parallel standard library.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>Suggest</p>
<p>If this option is set to non-zero (default is <span class="title-ref">0</span>), the check will suggest <a href="http://wg21.link/p0214">P0214</a> alternatives, otherwise it only points out the intrinsic function is non-portable.</p>
</div>
<div class="option">
<p>Std</p>
<p>The namespace used to suggest <a href="http://wg21.link/p0214">P0214</a> alternatives. If not specified, <span class="title-ref">std::</span> for <span class="title-ref">-std=c++2a</span> and <span class="title-ref">std::experimental::</span> for <span class="title-ref">-std=c++11</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/portability-simd-intrinsics.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-delete-null-pointer</key>
  <name>readability-delete-null-pointer</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-delete-null-pointer</p>
</div>
<h1 id="readability-delete-null-pointer">readability-delete-null-pointer</h1>
<p>Checks the <code>if</code> statements where a pointer's existence is checked and then deletes the pointer. The check is unnecessary as deleting a null pointer has no effect.</p>
<pre class="sourceCode c++"><code>int *p;
if (p)
  delete p;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-delete-null-pointer.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-implicit-bool-conversion</key>
  <name>readability-implicit-bool-conversion</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-implicit-bool-conversion</p>
</div>
<h1 id="readability-implicit-bool-conversion">readability-implicit-bool-conversion</h1>
<p>This check can be used to find implicit conversions between built-in types and booleans. Depending on use case, it may simply help with readability of the code, or in some cases, point to potential bugs which remain unnoticed due to implicit conversions.</p>
<p>The following is a real-world example of bug which was hiding behind implicit <code>bool</code> conversion:</p>
<pre class="sourceCode c++"><code>class Foo {
  int m_foo;

public:
  void setFoo(bool foo) { m_foo = foo; } // warning: implicit conversion bool -&gt; int
  int getFoo() { return m_foo; }
};

void use(Foo&amp; foo) {
  bool value = foo.getFoo(); // warning: implicit conversion int -&gt; bool
}</code></pre>
<p>This code is the result of unsuccessful refactoring, where type of <code>m_foo</code> changed from <code>bool</code> to <code>int</code>. The programmer forgot to change all occurrences of <code>bool</code>, and the remaining code is no longer correct, yet it still compiles without any visible warnings.</p>
<p>In addition to issuing warnings, fix-it hints are provided to help solve the reported issues. This can be used for improving readability of code, for example:</p>
<pre class="sourceCode c++"><code>void conversionsToBool() {
  float floating;
  bool boolean = floating;
  // ^ propose replacement: bool boolean = floating != 0.0f;

  int integer;
  if (integer) {}
  // ^ propose replacement: if (integer != 0) {}

  int* pointer;
  if (!pointer) {}
  // ^ propose replacement: if (pointer == nullptr) {}

  while (1) {}
  // ^ propose replacement: while (true) {}
}

void functionTakingInt(int param);

void conversionsFromBool() {
  bool boolean;
  functionTakingInt(boolean);
  // ^ propose replacement: functionTakingInt(static_cast&lt;int&gt;(boolean));

  functionTakingInt(true);
  // ^ propose replacement: functionTakingInt(1);
}</code></pre>
<p>In general, the following conversion types are checked:</p>
<ul>
<li>integer expression/literal to boolean,</li>
<li>floating expression/literal to boolean,</li>
<li>pointer/pointer to member/<code>nullptr</code>/<code>NULL</code> to boolean,</li>
<li>boolean expression/literal to integer,</li>
<li>boolean expression/literal to floating.</li>
</ul>
<p>The rules for generating fix-it hints are:</p>
<ul>
<li>in case of conversions from other built-in type to bool, an explicit comparison is proposed to make it clear what exaclty is being compared:
<ul>
<li><code>bool boolean = floating;</code> is changed to <code>bool boolean = floating == 0.0f;</code>,</li>
<li>for other types, appropriate literals are used (<code>0</code>, <code>0u</code>, <code>0.0f</code>, <code>0.0</code>, <code>nullptr</code>),</li>
</ul></li>
<li>in case of negated expressions conversion to bool, the proposed replacement with comparison is simplified:
<ul>
<li><code>if (!pointer)</code> is changed to <code>if (pointer == nullptr)</code>,</li>
</ul></li>
<li>in case of conversions from bool to other built-in types, an explicit <code>static_cast</code> is proposed to make it clear that a conversion is taking place:
<ul>
<li><code>int integer = boolean;</code> is changed to <code>int integer = static_cast&lt;int&gt;(boolean);</code>,</li>
</ul></li>
<li>if the conversion is performed on type literals, an equivalent literal is proposed, according to what type is actually expected, for example:
<ul>
<li><code>functionTakingBool(0);</code> is changed to <code>functionTakingBool(false);</code>,</li>
<li><code>functionTakingInt(true);</code> is changed to <code>functionTakingInt(1);</code>,</li>
<li>for other types, appropriate literals are used (<code>false</code>, <code>true</code>, <code>0</code>, <code>1</code>, <code>0u</code>, <code>1u</code>, <code>0.0f</code>, <code>1.0f</code>, <code>0.0</code>, <code>1.0f</code>).</li>
</ul></li>
</ul>
<p>Some additional accommodations are made for pre-C++11 dialects:</p>
<ul>
<li><code>false</code> literal conversion to pointer is detected,</li>
<li>instead of <code>nullptr</code> literal, <code>0</code> is proposed as replacement.</li>
</ul>
<p>Occurrences of implicit conversions inside macros and template instantiations are deliberately ignored, as it is not clear how to deal with such cases.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>AllowIntegerConditions</p>
<p>When non-zero, the check will allow conditional integer conversions. Default is <span class="title-ref">0</span>.</p>
</div>
<div class="option">
<p>AllowPointerConditions</p>
<p>When non-zero, the check will allow conditional pointer conversions. Default is <span class="title-ref">0</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-implicit-bool-conversion.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-magic-numbers</key>
  <name>readability-magic-numbers</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-magic-numbers</p>
</div>
<h1 id="readability-magic-numbers">readability-magic-numbers</h1>
<p>Detects magic numbers, integer or floating point literals that are embedded in code and not introduced via constants or symbols.</p>
<p>Many coding guidelines advise replacing the magic values with symbolic constants to improve readability. Here are a few references:</p>
<blockquote>
<ul>
<li><a href="http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Res-magic">Rule ES.45: Avoid ‚Äúmagic constants‚Äù; use symbolic constants in C++ Core Guidelines</a></li>
<li><a href="http://www.codingstandard.com/rule/5-1-1-use-symbolic-names-instead-of-literal-values-in-code/">Rule 5.1.1 Use symbolic names instead of literal values in code in High Integrity C++</a></li>
<li>Item 17 in &quot;C++ Coding Standards: 101 Rules, Guidelines and Best Practices&quot; by Herb Sutter and Andrei Alexandrescu</li>
<li>Chapter 17 in &quot;Clean Code - A handbook of agile software craftsmanship.&quot; by Robert C. Martin</li>
<li>Rule 20701 in &quot;TRAIN REAL TIME DATA PROTOCOL Coding Rules&quot; by Armin-Hagen Weiss, Bombardier</li>
<li><a href="http://wiki.c2.com/?MagicNumber" class="uri">http://wiki.c2.com/?MagicNumber</a></li>
</ul>
</blockquote>
<p>Examples of magic values:</p>
<pre class="sourceCode c++"><code>double circleArea = 3.1415926535 * radius * radius;

double totalCharge = 1.08 * itemPrice;

int getAnswer() {
   return -3; // FILENOTFOUND
}

for (int mm = 1; mm &lt;= 12; ++mm) {
   std::cout &lt;&lt; month[mm] &lt;&lt; &#39;\n&#39;;
}</code></pre>
<p>Example with magic values refactored:</p>
<pre class="sourceCode c++"><code>double circleArea = M_PI * radius * radius;

const double TAX_RATE = 0.08;  // or make it variable and read from a file

double totalCharge = (1.0 + TAX_RATE) * itemPrice;

int getAnswer() {
   return E_FILE_NOT_FOUND;
}

for (int mm = 1; mm &lt;= MONTHS_IN_A_YEAR; ++mm) {
   std::cout &lt;&lt; month[mm] &lt;&lt; &#39;\n&#39;;
}</code></pre>
<p>For integral literals by default only <span class="title-ref">0</span> and <span class="title-ref">1</span> (and <span class="title-ref">-1</span>) integer values are accepted without a warning. This can be overridden with the <code class="interpreted-text" data-role="option">IgnoredIntegerValues</code> option. Negative values are accepted if their absolute value is present in the <code class="interpreted-text" data-role="option">IgnoredIntegerValues</code> list.</p>
<p>As a special case for integral values, all powers of two can be accepted without warning by enabling the <code class="interpreted-text" data-role="option">IgnorePowersOf2IntegerValues</code> option.</p>
<p>For floating point literals by default the <span class="title-ref">0.0</span> floating point value is accepted without a warning. The set of ignored floating point literals can be configured using the <code class="interpreted-text" data-role="option">IgnoredFloatingPointValues</code> option. For each value in that set, the given string value is converted to a floating-point value representation used by the target architecture. If a floating-point literal value compares equal to one of the converted values, then that literal is not diagnosed by this check. Because floating-point equality is used to determine whether to diagnose or not, the user needs to be aware of the details of floating-point representations for any values that cannot be precisely represented for their target architecture.</p>
<p>For each value in the <code class="interpreted-text" data-role="option">IgnoredFloatingPointValues</code> set, both the single-precision form and double-precision form are accepted (for example, if 3.14 is in the set, neither 3.14f nor 3.14 will produce a warning).</p>
<p>Scientific notation is supported for both source code input and option. Alternatively, the check for the floating point numbers can be disabled for all floating point values by enabling the <code class="interpreted-text" data-role="option">IgnoreAllFloatingPointValues</code> option.</p>
<p>Since values <span class="title-ref">0</span> and <span class="title-ref">0.0</span> are so common as the base counter of loops, or initialization values for sums, they are always accepted without warning, even if not present in the respective ignored values list.</p>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoredIntegerValues</p>
<p>Semicolon-separated list of magic positive integers that will be accepted without a warning. Default values are <span class="title-ref">{1, 2, 3, 4}</span>, and <span class="title-ref">0</span> is accepted unconditionally.</p>
</div>
<div class="option">
<p>IgnorePowersOf2IntegerValues</p>
<p>Boolean value indicating whether to accept all powers-of-two integer values without warning. Default value is <span class="title-ref">false</span>.</p>
</div>
<div class="option">
<p>IgnoredFloatingPointValues</p>
<p>Semicolon-separated list of magic positive floating point values that will be accepted without a warning. Default values are <span class="title-ref">{1.0, 100.0}</span> and <span class="title-ref">0.0</span> is accepted unconditionally.</p>
</div>
<div class="option">
<p>IgnoreAllFloatingPointValues</p>
<p>Boolean value indicating whether to accept all floating point values without warning. Default value is <span class="title-ref">false</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-magic-numbers.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-misleading-indentation</key>
  <name>readability-misleading-indentation</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-misleading-indentation</p>
</div>
<h1 id="readability-misleading-indentation">readability-misleading-indentation</h1>
<p>Correct indentation helps to understand code. Mismatch of the syntactical structure and the indentation of the code may hide serious problems. Missing braces can also make it significantly harder to read the code, therefore it is important to use braces.</p>
<p>The way to avoid dangling else is to always check that an <code>else</code> belongs to the <code>if</code> that begins in the same column.</p>
<p>You can omit braces when your inner part of e.g. an <code>if</code> statement has only one statement in it. Although in that case you should begin the next statement in the same column with the <code>if</code>.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Dangling else:
if (cond1)
  if (cond2)
    foo1();
else
  foo2();  // Wrong indentation: else belongs to if(cond2) statement.

// Missing braces:
if (cond1)
  foo1();
  foo2();  // Not guarded by if(cond1).</code></pre>
<h2 id="limitations">Limitations</h2>
<p>Note that this check only works as expected when the tabs or spaces are used consistently and not mixed.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-misleading-indentation.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-misplaced-array-index</key>
  <name>readability-misplaced-array-index</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-misplaced-array-index</p>
</div>
<h1 id="readability-misplaced-array-index">readability-misplaced-array-index</h1>
<p>This check warns for unusual array index syntax.</p>
<p>The following code has unusual array index syntax:</p>
<pre class="sourceCode c++"><code>void f(int *X, int Y) {
  Y[X] = 0;
}</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>void f(int *X, int Y) {
  X[Y] = 0;
}</code></pre>
<dl>
<dt>The check warns about such unusual syntax for readability reasons:</dt>
<dd><ul>
<li>There are programmers that are not familiar with this unusual syntax.</li>
<li>It is possible that variables are mixed up.</li>
</ul>
</dd>
</dl>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-misplaced-array-index.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-non-const-parameter</key>
  <name>readability-non-const-parameter</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-non-const-parameter</p>
</div>
<h1 id="readability-non-const-parameter">readability-non-const-parameter</h1>
<p>The check finds function parameters of a pointer type that could be changed to point to a constant type instead.</p>
<p>When <code>const</code> is used properly, many mistakes can be avoided. Advantages when using <code>const</code> properly:</p>
<ul>
<li>prevent unintentional modification of data;</li>
<li>get additional warnings such as using uninitialized data;</li>
<li>make it easier for developers to see possible side effects.</li>
</ul>
<p>This check is not strict about constness, it only warns when the constness will make the function interface safer.</p>
<pre class="sourceCode c++"><code>// warning here; the declaration &quot;const char *p&quot; would make the function
// interface safer.
char f1(char *p) {
  return *p;
}

// no warning; the declaration could be more const &quot;const int * const p&quot; but
// that does not make the function interface safer.
int f2(const int *p) {
  return *p;
}

// no warning; making x const does not make the function interface safer
int f3(int x) {
  return x;
}

// no warning; Technically, *p can be const (&quot;const struct S *p&quot;). But making
// *p const could be misleading. People might think that it&#39;s safe to pass
// const data to this function.
struct S { int *a; int *b; };
int f3(struct S *p) {
  *(p-&gt;a) = 0;
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-non-const-parameter.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-redundant-declaration</key>
  <name>readability-redundant-declaration</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-redundant-declaration</p>
</div>
<h1 id="readability-redundant-declaration">readability-redundant-declaration</h1>
<p>Finds redundant variable and function declarations.</p>
<pre class="sourceCode c++"><code>extern int X;
extern int X;</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>extern int X;</code></pre>
<p>Such redundant declarations can be removed without changing program behaviour. They can for instance be unintentional left overs from previous refactorings when code has been moved around. Having redundant declarations could in worst case mean that there are typos in the code that cause bugs.</p>
<p>Normally the code can be automatically fixed, <code class="interpreted-text" data-role="program">clang-tidy</code> can remove the second declaration. However there are 2 cases when you need to fix the code manually:</p>
<ul>
<li>When the declarations are in different header files;</li>
<li>When multiple variables are declared together.</li>
</ul>
<h2 id="options">Options</h2>
<div class="option">
<p>IgnoreMacros</p>
<p>If set to non-zero, the check will not give warnings inside macros. Default is <span class="title-ref">1</span>.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-declaration.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-redundant-function-ptr-dereference</key>
  <name>readability-redundant-function-ptr-dereference</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-redundant-function-ptr-dereference</p>
</div>
<h1 id="readability-redundant-function-ptr-dereference">readability-redundant-function-ptr-dereference</h1>
<p>Finds redundant dereferences of a function pointer.</p>
<p>Before:</p>
<pre class="sourceCode c++"><code>int f(int,int);
int (*p)(int, int) = &amp;f;

int i = (**p)(10, 50);</code></pre>
<p>After:</p>
<pre class="sourceCode c++"><code>int f(int,int);
int (*p)(int, int) = &amp;f;

int i = (*p)(10, 50);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-function-ptr-dereference.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-redundant-member-init</key>
  <name>readability-redundant-member-init</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-redundant-member-init</p>
</div>
<h1 id="readability-redundant-member-init">readability-redundant-member-init</h1>
<p>Finds member initializations that are unnecessary because the same default constructor would be called if they were not present.</p>
<p>Example:</p>
<pre class="sourceCode c++"><code>// Explicitly initializing the member s is unnecessary.
class Foo {
public:
  Foo() : s() {}

private:
  std::string s;
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-member-init.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-simplify-subscript-expr</key>
  <name>readability-simplify-subscript-expr</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-simplify-subscript-expr</p>
</div>
<h1 id="readability-simplify-subscript-expr">readability-simplify-subscript-expr</h1>
<p>This check simplifies subscript expressions. Currently this covers calling <code>.data()</code> and immediately doing an array subscript operation to obtain a single element, in which case simply calling <code>operator[]</code> suffice.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string s = ...;
char c = s.data()[i];  // char c = s[i];</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Types</p>
<p>The list of type(s) that triggers this check. Default is <span class="title-ref">::std::basic_string;::std::basic_string_view;::std::vector;::std::array</span></p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-simplify-subscript-expr.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-static-accessed-through-instance</key>
  <name>readability-static-accessed-through-instance</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-static-accessed-through-instance</p>
</div>
<h1 id="readability-static-accessed-through-instance">readability-static-accessed-through-instance</h1>
<p>Checks for member expressions that access static members through instances, and replaces them with uses of the appropriate qualified-id.</p>
<p>Example:</p>
<p>The following code:</p>
<pre class="sourceCode c++"><code>struct C {
  static void foo();
  static int x;
};

C *c1 = new C();
c1-&gt;foo();
c1-&gt;x;</code></pre>
<p>is changed to:</p>
<pre class="sourceCode c++"><code>C *c1 = new C();
C::foo();
C::x;</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-static-accessed-through-instance.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-string-compare</key>
  <name>readability-string-compare</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - readability-string-compare</p>
</div>
<h1 id="readability-string-compare">readability-string-compare</h1>
<p>Finds string comparisons using the compare method.</p>
<p>A common mistake is to use the string's <code>compare</code> method instead of using the equality or inequality operators. The compare method is intended for sorting functions and thus returns a negative number, a positive number or zero depending on the lexicographical relationship between the strings compared. If an equality or inequality check can suffice, that is recommended. This is recommended to avoid the risk of incorrect interpretation of the return value and to simplify the code. The string equality and inequality operators can also be faster than the <code>compare</code> method due to early termination.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>std::string str1{&quot;a&quot;};
std::string str2{&quot;b&quot;};

// use str1 != str2 instead.
if (str1.compare(str2)) {
}

// use str1 == str2 instead.
if (!str1.compare(str2)) {
}

// use str1 == str2 instead.
if (str1.compare(str2) == 0) {
}

// use str1 != str2 instead.
if (str1.compare(str2) != 0) {
}

// use str1 == str2 instead.
if (0 == str1.compare(str2)) {
}

// use str1 != str2 instead.
if (0 != str1.compare(str2)) {
}

// Use str1 == &quot;foo&quot; instead.
if (str1.compare(&quot;foo&quot;) == 0) {
}</code></pre>
<p>The above code examples shows the list of if-statements that this check will give a warning for. All of them uses <code>compare</code> to check if equality or inequality of two strings instead of using the correct operators.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-string-compare.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>zircon-temporary-objects</key>
  <name>zircon-temporary-objects</name>
  <description><![CDATA[
      <div class="title">
<p>clang-tidy - zircon-temporary-objects</p>
</div>
<h1 id="zircon-temporary-objects">zircon-temporary-objects</h1>
<p>Warns on construction of specific temporary objects in the Zircon kernel. If the object should be flagged, If the object should be flagged, the fully qualified type name must be explicitly passed to the check.</p>
<p>For example, given the list of classes &quot;Foo&quot; and &quot;NS::Bar&quot;, all of the following will trigger the warning:</p>
<pre class="sourceCode c++"><code>Foo();
Foo F = Foo();
func(Foo());

namespace NS {

Bar();

}</code></pre>
<p>With the same list, the following will not trigger the warning:</p>
<pre class="sourceCode c++"><code>Foo F;                         // Non-temporary construction okay
Foo F(param);              // Non-temporary construction okay
Foo *F = new Foo();      // New construction okay

Bar();                         // Not NS::Bar, so okay
NS::Bar B;                   // Non-temporary construction okay</code></pre>
<p>Note that objects must be explicitly specified in order to be flagged, and so objects that inherit a specified object will not be flagged.</p>
<p>This check matches temporary objects without regard for inheritance and so a prohibited base class type does not similarly prohibit derived class types.</p>
<pre class="sourceCode c++"><code>class Derived : Foo {} // Derived is not explicitly disallowed
Derived();             // and so temporary construction is okay</code></pre>
<h2 id="options">Options</h2>
<div class="option">
<p>Names</p>
<p>A semi-colon-separated list of fully-qualified names of C++ classes that should not be constructed as temporaries. Default is empty.</p>
</div>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/zircon-temporary-objects.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-#pragma-messages</key>
  <name>clang-diagnostic-#pragma-messages</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#w-pragma-messages" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-#warnings</key>
  <name>clang-diagnostic-#warnings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#w-warnings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-CFString-literal</key>
  <name>clang-diagnostic-CFString-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: input conversion stopped due to an input byte that does not belong to the input codeset UTF-8</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wCFString-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-CL4</key>
  <name>clang-diagnostic-CL4</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: call to function without interrupt attribute could clobber interruptee's VFP registers</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: control may reach end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control may reach end of non-void function</li>
<li>warning: control may reach end of non-void lambda</li>
<li>warning: control reaches end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control reaches end of non-void function</li>
<li>warning: control reaches end of non-void lambda</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicit declaration of function %0 is invalid in C99</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: initializer overrides prior initialization of this subobject</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: method has no return type specified; defaults to 'id'</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: missing field %0 initializer</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: semicolon before method body is ignored</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: subobject initialization overrides initialization of other fields within its enclosing subobject</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: switch condition has boolean value</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused parameter %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wCL4" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-IndependentClass-attribute</key>
  <name>clang-diagnostic-IndependentClass-attribute</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'objc_independent_class' attribute may be put on Objective-C object pointer type only; attribute is ignored</li>
<li>warning: 'objc_independent_class' attribute may be put on a typedef only; attribute is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wIndependentClass-attribute" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-NSObject-attribute</key>
  <name>clang-diagnostic-NSObject-attribute</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'NSObject' attribute may be put on a typedef only; attribute is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wNSObject-attribute" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-absolute-value</key>
  <name>clang-diagnostic-absolute-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: absolute value function %0 given an argument of type %1 but has parameter of type %2 which may cause truncation of value</li>
<li>warning: taking the absolute value of %select{pointer|function|array}0 type %1 is suspicious</li>
<li>warning: taking the absolute value of unsigned type %0 has no effect</li>
<li>warning: using %select{integer|floating point|complex}1 absolute value function %0 when argument is of %select{integer|floating point|complex}2 type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabsolute-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-abstract-final-class</key>
  <name>clang-diagnostic-abstract-final-class</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: abstract class is marked '%select{final|sealed}0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabstract-final-class" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-abstract-vbase-init</key>
  <name>clang-diagnostic-abstract-vbase-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: initializer for virtual base class %0 of abstract class %1 will never be used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wabstract-vbase-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-address</key>
  <name>clang-diagnostic-address</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: result of comparison against %select{a string literal|@encode}0 is unspecified (use strncmp instead)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-address-of-packed-member</key>
  <name>clang-diagnostic-address-of-packed-member</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: taking address of packed member %0 of class or structure %q1 may result in an unaligned pointer value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress-of-packed-member" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-address-of-temporary</key>
  <name>clang-diagnostic-address-of-temporary</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: taking the address of a temporary object of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#waddress-of-temporary" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-all</key>
  <name>clang-diagnostic-all</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: control may reach end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control may reach end of non-void function</li>
<li>warning: control may reach end of non-void lambda</li>
<li>warning: control reaches end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control reaches end of non-void function</li>
<li>warning: control reaches end of non-void lambda</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicit declaration of function %0 is invalid in C99</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: switch condition has boolean value</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wall" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-alloca-with-align-alignof</key>
  <name>clang-diagnostic-alloca-with-align-alignof</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: second argument to __builtin_alloca_with_align is supposed to be in bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#walloca-with-align-alignof" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ambiguous-delete</key>
  <name>clang-diagnostic-ambiguous-delete</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple suitable %0 functions for %1; no 'operator delete' function will be invoked if initialization throws an exception</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-delete" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ambiguous-ellipsis</key>
  <name>clang-diagnostic-ambiguous-ellipsis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '...' in this location creates a C-style varargs function%select{, not a function parameter pack|}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-ellipsis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ambiguous-macro</key>
  <name>clang-diagnostic-ambiguous-macro</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ambiguous expansion of macro %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-macro" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ambiguous-member-template</key>
  <name>clang-diagnostic-ambiguous-member-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: lookup of %0 in member access expression is ambiguous; using member of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wambiguous-member-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-analyzer-incompatible-plugin</key>
  <name>clang-diagnostic-analyzer-incompatible-plugin</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: checker plugin '%0' is not compatible with this version of the analyzer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wanalyzer-incompatible-plugin" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-anonymous-pack-parens</key>
  <name>clang-diagnostic-anonymous-pack-parens</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 requires a parenthesized pack declaration to have a name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wanonymous-pack-parens" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc</key>
  <name>clang-diagnostic-arc</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2</li>
<li>warning: assigning %select{array literal|dictionary literal|numeric literal|boxed expression|&lt;should not happen&gt;|block literal}0 to a weak %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to unsafe property; object will be released after assignment</li>
<li>warning: capturing %0 strongly in this block is likely to lead to a retain cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-bridge-casts-disallowed-in-nonarc</key>
  <name>clang-diagnostic-arc-bridge-casts-disallowed-in-nonarc</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' casts have no effect when not using ARC</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-bridge-casts-disallowed-in-nonarc" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-maybe-repeated-use-of-weak</key>
  <name>clang-diagnostic-arc-maybe-repeated-use-of-weak</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-maybe-repeated-use-of-weak" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-non-pod-memaccess</key>
  <name>clang-diagnostic-arc-non-pod-memaccess</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of}0 this %1 call is a pointer to ownership-qualified type %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-non-pod-memaccess" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-performSelector-leaks</key>
  <name>clang-diagnostic-arc-performSelector-leaks</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: performSelector may cause a leak because its selector is unknown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-performSelector-leaks" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-repeated-use-of-weak</key>
  <name>clang-diagnostic-arc-repeated-use-of-weak</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 is accessed multiple times in this %select{function|method|block|lambda}2 but may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
<li>warning: weak %select{variable|property|implicit property|instance variable}0 %1 may be accessed multiple times in this %select{function|method|block|lambda}2 and may be unpredictably set to nil; assign to a strong variable to keep the object alive</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-repeated-use-of-weak" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-retain-cycles</key>
  <name>clang-diagnostic-arc-retain-cycles</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: capturing %0 strongly in this block is likely to lead to a retain cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-retain-cycles" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-arc-unsafe-retained-assign</key>
  <name>clang-diagnostic-arc-unsafe-retained-assign</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{array literal|dictionary literal|numeric literal|boxed expression|&lt;should not happen&gt;|block literal}0 to a weak %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to %select{weak|unsafe_unretained}0 %select{property|variable}1; object will be released after assignment</li>
<li>warning: assigning retained object to unsafe property; object will be released after assignment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warc-unsafe-retained-assign" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-argument-outside-range</key>
  <name>clang-diagnostic-argument-outside-range</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: argument value %0 is outside the valid range [%1, %2]</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wargument-outside-range" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-array-bounds</key>
  <name>clang-diagnostic-array-bounds</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'static' has no effect on zero-length arrays</li>
<li>warning: array argument is too small; %select{contains %0 elements|is of size %0}2, callee requires at least %1</li>
<li>warning: array index %0 is before the beginning of the array</li>
<li>warning: array index %0 is past the end of the array (which contains %1 element%s2)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warray-bounds" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-array-bounds-pointer-arithmetic</key>
  <name>clang-diagnostic-array-bounds-pointer-arithmetic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: the pointer decremented by %0 refers before the beginning of the array</li>
<li>warning: the pointer incremented by %0 refers past the end of the array (that contains %1 element%s2)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#warray-bounds-pointer-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-asm</key>
  <name>clang-diagnostic-asm</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignored %0 qualifier on asm</li>
<li>warning: meaningless 'volatile' on asm outside function</li>
<li>warning: value size does not match register size specified by the constraint and modifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wasm" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-asm-ignored-qualifier</key>
  <name>clang-diagnostic-asm-ignored-qualifier</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignored %0 qualifier on asm</li>
<li>warning: meaningless 'volatile' on asm outside function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wasm-ignored-qualifier" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-asm-operand-widths</key>
  <name>clang-diagnostic-asm-operand-widths</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: value size does not match register size specified by the constraint and modifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wasm-operand-widths" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-assign-enum</key>
  <name>clang-diagnostic-assign-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: integer constant not in range of enumerated type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wassign-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-assume</key>
  <name>clang-diagnostic-assume</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: the argument to %0 has side effects that will be discarded</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wassume" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atimport-in-framework-header</key>
  <name>clang-diagnostic-atimport-in-framework-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of '@import' in framework header is discouraged, including this header requires -fmodules</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watimport-in-framework-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atomic-alignment</key>
  <name>clang-diagnostic-atomic-alignment</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{large|misaligned}0 atomic operation may incur significant performance penalty</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-alignment" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atomic-implicit-seq-cst</key>
  <name>clang-diagnostic-atomic-implicit-seq-cst</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit use of sequentially-consistent atomic may incur stronger memory barriers than necessary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-implicit-seq-cst" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atomic-memory-ordering</key>
  <name>clang-diagnostic-atomic-memory-ordering</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: memory order argument to atomic operation is invalid</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-memory-ordering" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atomic-properties</key>
  <name>clang-diagnostic-atomic-properties</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)</li>
<li>warning: property is assumed atomic by default</li>
<li>warning: property is assumed atomic when auto-synthesizing the property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-properties" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-atomic-property-with-user-defined-accessor</key>
  <name>clang-diagnostic-atomic-property-with-user-defined-accessor</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: writable atomic property %0 cannot pair a synthesized %select{getter|setter}1 with a user defined %select{getter|setter}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#watomic-property-with-user-defined-accessor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-attribute-packed-for-bitfield</key>
  <name>clang-diagnostic-attribute-packed-for-bitfield</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'packed' attribute was ignored on bit-fields with single-byte alignment in older versions of GCC and Clang</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wattribute-packed-for-bitfield" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-attributes</key>
  <name>clang-diagnostic-attributes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute argument not supported: %1</li>
<li>warning: %0 attribute can only be applied to instance variables or properties</li>
<li>warning: %0 attribute ignored</li>
<li>warning: %0 attribute ignored for field of type %1</li>
<li>warning: %0 attribute ignored on inline function</li>
<li>warning: %0 attribute ignored when parsing type</li>
<li>warning: %0 attribute is deprecated and ignored in OpenCL version %1</li>
<li>warning: %0 attribute only applies to %1</li>
<li>warning: %0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters</li>
<li>warning: %0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2</li>
<li>warning: %0 attribute only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions}1</li>
<li>warning: %0 attribute only applies to a pointer or reference (%1 is invalid)</li>
<li>warning: %0 attribute only applies to return values that are pointers</li>
<li>warning: %0 attribute only applies to return values that are pointers or references</li>
<li>warning: %0 attribute only applies to%select{| constant}1 pointer arguments</li>
<li>warning: %0 calling convention ignored %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</li>
<li>warning: %q0 redeclared inline; %1 attribute ignored</li>
<li>warning: %select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1</li>
<li>warning: %select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2</li>
<li>warning: %select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden</li>
<li>warning: %select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored</li>
<li>warning: %select{unsupported|duplicate}0%select{| architecture}1 '%2' in the 'target' attribute string; 'target' attribute ignored</li>
<li>warning: '%0' attribute cannot be specified on a definition</li>
<li>warning: '%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</li>
<li>warning: '__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?</li>
<li>warning: 'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored</li>
<li>warning: 'deprecated' attribute on anonymous namespace ignored</li>
<li>warning: 'dllexport' attribute ignored on explicit instantiation definition</li>
<li>warning: 'gnu_inline' attribute requires function to be marked 'inline', attribute ignored</li>
<li>warning: 'internal_linkage' attribute on a non-static local variable is ignored</li>
<li>warning: 'mig_server_routine' attribute only applies to routines that return a kern_return_t</li>
<li>warning: 'nocf_check' attribute ignored; use -fcf-protection to enable the attribute</li>
<li>warning: 'noderef' can only be used on an array or pointer type</li>
<li>warning: 'nonnull' attribute applied to function with no pointer arguments</li>
<li>warning: 'nonnull' attribute when used on parameters takes no arguments</li>
<li>warning: 'nothrow' attribute conflicts with exception specification; attribute ignored</li>
<li>warning: 'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0</li>
<li>warning: 'sentinel' attribute only supported for variadic %select{functions|blocks}0</li>
<li>warning: 'sentinel' attribute requires named arguments</li>
<li>warning: 'trivial_abi' cannot be applied to %0</li>
<li>warning: Objective-C GC does not allow weak variables on the stack</li>
<li>warning: __declspec attribute %0 is not supported</li>
<li>warning: __weak attribute cannot be specified on a field declaration</li>
<li>warning: __weak attribute cannot be specified on an automatic variable when ARC is not enabled</li>
<li>warning: attribute %0 after definition is ignored</li>
<li>warning: attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value</li>
<li>warning: attribute %0 ignored, because it cannot be applied to a type</li>
<li>warning: attribute %0 ignored, because it cannot be applied to omitted return type</li>
<li>warning: attribute %0 ignored, because it is not attached to a declaration</li>
<li>warning: attribute %0 is already applied</li>
<li>warning: attribute %0 is already applied with different parameters</li>
<li>warning: attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum}1" to apply attribute to type declaration</li>
<li>warning: attribute declaration must precede definition</li>
<li>warning: first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored</li>
<li>warning: ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type</li>
<li>warning: inheritance model ignored on %select{primary template|partial specialization}0</li>
<li>warning: qualifiers after comma in declarator list are ignored</li>
<li>warning: repeated RISC-V 'interrupt' attribute</li>
<li>warning: transparent union definition must contain at least one field; transparent_union attribute ignored</li>
<li>warning: transparent_union attribute can only be applied to a union definition; attribute ignored</li>
<li>warning: unknown attribute %0 ignored</li>
<li>warning: unknown attribute '%0'</li>
<li>warning: unknown visibility %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wattributes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-auto-disable-vptr-sanitizer</key>
  <name>clang-diagnostic-auto-disable-vptr-sanitizer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicitly disabling vptr sanitizer because rtti wasn't enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-disable-vptr-sanitizer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-auto-import</key>
  <name>clang-diagnostic-auto-import</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: treating #%select{include|import|include_next|__include_macros}0 as an import of module '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-import" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-auto-storage-class</key>
  <name>clang-diagnostic-auto-storage-class</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'auto' storage class specifier is not permitted in C++11, and will not be supported in future releases</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-storage-class" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-auto-var-id</key>
  <name>clang-diagnostic-auto-var-id</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'auto' deduced as 'id' in declaration of %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wauto-var-id" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-availability</key>
  <name>clang-diagnostic-availability</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{|overriding }1method cannot be unavailable on %0 when %select{the protocol method it implements|its overridden method}1 is available</li>
<li>warning: %select{|overriding }4method %select{introduced after|deprecated before|obsoleted before}0 %select{the protocol method it implements|overridden method}4 on %1 (%2 vs. %3)</li>
<li>warning: 'unavailable' availability overrides all other availability information</li>
<li>warning: availability does not match previous declaration</li>
<li>warning: feature cannot be %select{introduced|deprecated|obsoleted}0 in %1 version %2 before it was %select{introduced|deprecated|obsoleted}3 in version %4; attribute ignored</li>
<li>warning: ignoring availability attribute %select{on '+load' method|with constructor attribute|with destructor attribute}0</li>
<li>warning: only 'unavailable' and 'deprecated' are supported for Swift availability</li>
<li>warning: unknown platform %0 in availability macro</li>
<li>warning: use same version number separators '_' or '.'; as in 'major[.minor[.subminor]]'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wavailability" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-backend-plugin</key>
  <name>clang-diagnostic-backend-plugin</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbackend-plugin" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-backslash-newline-escape</key>
  <name>clang-diagnostic-backslash-newline-escape</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: backslash and newline separated by space</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbackslash-newline-escape" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bad-function-cast</key>
  <name>clang-diagnostic-bad-function-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast from function call of type %0 to non-matching type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbad-function-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-binary-literal</key>
  <name>clang-diagnostic-binary-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: binary integer literals are a GNU extension</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbinary-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bind-to-temporary-copy</key>
  <name>clang-diagnostic-bind-to-temporary-copy</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
<li>warning: C++98 requires an accessible copy constructor for class %2 when binding a reference to a temporary; was %select{private|protected}0</li>
<li>warning: no viable constructor %sub{select_initialized_entity_kind}0 of type %1; C++98 requires a copy constructor when binding a reference to a temporary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbind-to-temporary-copy" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-binding-in-condition</key>
  <name>clang-diagnostic-binding-in-condition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not permit structured binding declaration in a condition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbinding-in-condition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bitfield-constant-conversion</key>
  <name>clang-diagnostic-bitfield-constant-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-constant-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bitfield-enum-conversion</key>
  <name>clang-diagnostic-bitfield-enum-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-enum-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bitfield-width</key>
  <name>clang-diagnostic-bitfield-width</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: width of anonymous bit-field (%0 bits) exceeds width of its type; value will be truncated to %1 bit%s1</li>
<li>warning: width of bit-field %0 (%1 bits) exceeds the width of its type; value will be truncated to %2 bit%s2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitfield-width" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bitwise-op-parentheses</key>
  <name>clang-diagnostic-bitwise-op-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' within '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbitwise-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-block-capture-autoreleasing</key>
  <name>clang-diagnostic-block-capture-autoreleasing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: block captures an autoreleasing out-parameter, which may result in use-after-free bugs</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wblock-capture-autoreleasing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bool-conversion</key>
  <name>clang-diagnostic-bool-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbool-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bool-conversions</key>
  <name>clang-diagnostic-bool-conversions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbool-conversions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-braced-scalar-init</key>
  <name>clang-diagnostic-braced-scalar-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: braces around scalar initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbraced-scalar-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-bridge-cast</key>
  <name>clang-diagnostic-bridge-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 bridges to %1, not %2</li>
<li>warning: %0 cannot bridge to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbridge-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-builtin-macro-redefined</key>
  <name>clang-diagnostic-builtin-macro-redefined</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redefining builtin macro</li>
<li>warning: undefining builtin macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-macro-redefined" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-builtin-memcpy-chk-size</key>
  <name>clang-diagnostic-builtin-memcpy-chk-size</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' will always overflow; destination buffer has size %1, but size argument is %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-memcpy-chk-size" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-builtin-requires-header</key>
  <name>clang-diagnostic-builtin-requires-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration of built-in function '%1' requires inclusion of the header &lt;%0&gt;</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wbuiltin-requires-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++-compat</key>
  <name>clang-diagnostic-c++-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++0x-compat</key>
  <name>clang-diagnostic-c++0x-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++0x-extensions</key>
  <name>clang-diagnostic-c++0x-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{defaulted|deleted}0 function definitions are a C++11 extension</li>
<li>warning: '%0' keyword is a C++11 extension</li>
<li>warning: 'auto' type specifier is a C++11 extension</li>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'template' keyword outside of a template</li>
<li>warning: 'typename' occurs outside of a template</li>
<li>warning: alias declarations are a C++11 extension</li>
<li>warning: befriending enumeration type %0 is a C++11 extension</li>
<li>warning: commas at the end of enumerator lists are a C++11 extension</li>
<li>warning: default template arguments for a function template are a C++11 extension</li>
<li>warning: enumeration types with a fixed underlying type are a C++11 extension</li>
<li>warning: explicit conversion functions are a C++11 extension</li>
<li>warning: extern templates are a C++11 extension</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: generalized initializer lists are a C++11 extension</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension</li>
<li>warning: in-class initialization of non-static data member is a C++11 extension</li>
<li>warning: inline namespaces are a C++11 feature</li>
<li>warning: non-class friend type %0 is a C++11 extension</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension</li>
<li>warning: range-based for loop is a C++11 extension</li>
<li>warning: reference qualifiers on functions are a C++11 extension</li>
<li>warning: rvalue references are a C++11 extension</li>
<li>warning: scoped enumerations are a C++11 extension</li>
<li>warning: static data member %0 in union is a C++11 extension</li>
<li>warning: unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1</li>
<li>warning: use of enumeration in a nested name specifier is a C++11 extension</li>
<li>warning: variadic templates are a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++0x-narrowing</key>
  <name>clang-diagnostic-c++0x-narrowing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-0x-narrowing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-compat</key>
  <name>clang-diagnostic-c++11-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-compat-deprecated-writable-strings</key>
  <name>clang-diagnostic-c++11-compat-deprecated-writable-strings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-deprecated-writable-strings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-compat-pedantic</key>
  <name>clang-diagnostic-c++11-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' is a keyword in C++11</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'auto' storage class specifier is redundant and incompatible with C++11</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit instantiation cannot be 'inline'</li>
<li>warning: explicit instantiation of %0 must occur at global scope</li>
<li>warning: explicit instantiation of %0 not in a namespace enclosing %1</li>
<li>warning: explicit instantiation of %q0 must occur in namespace %1</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: identifier after literal will be treated as a user-defined literal suffix in C++11</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: integer literal is too large to be represented in type 'long' and is subject to undefined behavior under C++98, interpreting as 'unsigned long'; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C++98; this literal will %select{have type 'long long'|be ill-formed}0 in C++11 onwards</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++2a</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of right-shift operator ('&gt;&gt;') in template argument will require parentheses in C++11</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-compat-reserved-user-defined-literal</key>
  <name>clang-diagnostic-c++11-compat-reserved-user-defined-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-compat-reserved-user-defined-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-extensions</key>
  <name>clang-diagnostic-c++11-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{defaulted|deleted}0 function definitions are a C++11 extension</li>
<li>warning: '%0' keyword is a C++11 extension</li>
<li>warning: 'auto' type specifier is a C++11 extension</li>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'template' keyword outside of a template</li>
<li>warning: 'typename' occurs outside of a template</li>
<li>warning: alias declarations are a C++11 extension</li>
<li>warning: befriending enumeration type %0 is a C++11 extension</li>
<li>warning: commas at the end of enumerator lists are a C++11 extension</li>
<li>warning: default template arguments for a function template are a C++11 extension</li>
<li>warning: enumeration types with a fixed underlying type are a C++11 extension</li>
<li>warning: explicit conversion functions are a C++11 extension</li>
<li>warning: extern templates are a C++11 extension</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: generalized initializer lists are a C++11 extension</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is a C++11 extension</li>
<li>warning: in-class initialization of non-static data member is a C++11 extension</li>
<li>warning: inline namespaces are a C++11 feature</li>
<li>warning: non-class friend type %0 is a C++11 extension</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is a C++11 extension</li>
<li>warning: range-based for loop is a C++11 extension</li>
<li>warning: reference qualifiers on functions are a C++11 extension</li>
<li>warning: rvalue references are a C++11 extension</li>
<li>warning: scoped enumerations are a C++11 extension</li>
<li>warning: static data member %0 in union is a C++11 extension</li>
<li>warning: unelaborated friend declaration is a C++11 extension; specify '%select{struct|interface|union|class|enum}0' to befriend %1</li>
<li>warning: use of enumeration in a nested name specifier is a C++11 extension</li>
<li>warning: variadic templates are a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-extra-semi</key>
  <name>clang-diagnostic-c++11-extra-semi</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-extra-semi" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-inline-namespace</key>
  <name>clang-diagnostic-c++11-inline-namespace</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: inline namespaces are a C++11 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-inline-namespace" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-long-long</key>
  <name>clang-diagnostic-c++11-long-long</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'long long' is a C++11 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-long-long" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++11-narrowing</key>
  <name>clang-diagnostic-c++11-narrowing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-11-narrowing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++14-binary-literal</key>
  <name>clang-diagnostic-c++14-binary-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++14-compat</key>
  <name>clang-diagnostic-c++14-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++14-compat-pedantic</key>
  <name>clang-diagnostic-c++14-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++2a</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++14-extensions</key>
  <name>clang-diagnostic-c++14-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is a C++14 extension</li>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: initialized lambda captures are a C++14 extension</li>
<li>warning: multiple return statements in constexpr function is a C++14 extension</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: use of the %0 attribute is a C++14 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable templates are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-14-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++17-compat</key>
  <name>clang-diagnostic-c++17-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++17-compat-mangling</key>
  <name>clang-diagnostic-c++17-compat-mangling</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat-mangling" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++17-compat-pedantic</key>
  <name>clang-diagnostic-c++17-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++2a</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++17-extensions</key>
  <name>clang-diagnostic-c++17-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%select{if|switch}0' initialization statements are a C++17 extension</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is a C++17 extension</li>
<li>warning: 'constexpr' on lambda expressions is a C++17 extension</li>
<li>warning: ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension</li>
<li>warning: capture of '*this' by copy is a C++17 extension</li>
<li>warning: constexpr if is a C++17 extension</li>
<li>warning: decomposition declarations are a C++17 extension</li>
<li>warning: default scope specifier for attributes is a C++17 extension</li>
<li>warning: hexadecimal floating literals are a C++17 feature</li>
<li>warning: inline variables are a C++17 extension</li>
<li>warning: nested namespace definition is a C++17 extension; define each namespace separately</li>
<li>warning: pack expansion of using declaration is a C++17 extension</li>
<li>warning: pack fold expression is a C++17 extension</li>
<li>warning: static_assert with no message is a C++17 extension</li>
<li>warning: template template parameter using 'typename' is a C++17 extension</li>
<li>warning: use of multiple declarators in a single using declaration is a C++17 extension</li>
<li>warning: use of the %0 attribute is a C++17 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-17-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++1y-extensions</key>
  <name>clang-diagnostic-c++1y-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is a C++14 extension</li>
<li>warning: binary integer literals are a C++14 extension</li>
<li>warning: initialized lambda captures are a C++14 extension</li>
<li>warning: multiple return statements in constexpr function is a C++14 extension</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: use of the %0 attribute is a C++14 extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is a C++14 extension</li>
<li>warning: variable templates are a C++14 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1y-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++1z-compat</key>
  <name>clang-diagnostic-c++1z-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++1z-compat-mangling</key>
  <name>clang-diagnostic-c++1z-compat-mangling</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-compat-mangling" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++1z-extensions</key>
  <name>clang-diagnostic-c++1z-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%select{if|switch}0' initialization statements are a C++17 extension</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is a C++17 extension</li>
<li>warning: 'constexpr' on lambda expressions is a C++17 extension</li>
<li>warning: ISO C++ standards before C++17 do not allow new expression for type %0 to use list-initialization</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are a C++17 extension</li>
<li>warning: capture of '*this' by copy is a C++17 extension</li>
<li>warning: constexpr if is a C++17 extension</li>
<li>warning: decomposition declarations are a C++17 extension</li>
<li>warning: default scope specifier for attributes is a C++17 extension</li>
<li>warning: hexadecimal floating literals are a C++17 feature</li>
<li>warning: inline variables are a C++17 extension</li>
<li>warning: nested namespace definition is a C++17 extension; define each namespace separately</li>
<li>warning: pack expansion of using declaration is a C++17 extension</li>
<li>warning: pack fold expression is a C++17 extension</li>
<li>warning: static_assert with no message is a C++17 extension</li>
<li>warning: template template parameter using 'typename' is a C++17 extension</li>
<li>warning: use of multiple declarators in a single using declaration is a C++17 extension</li>
<li>warning: use of the %0 attribute is a C++17 extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-1z-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++2a-compat</key>
  <name>clang-diagnostic-c++2a-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is a keyword in C++2a</li>
<li>warning: '&lt;=&gt;' is a single token in C++2a; add a space to avoid a change in behavior</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++2a</li>
<li>warning: consteval is incompatible with C++ standards before C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++2a</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++2a-compat-pedantic</key>
  <name>clang-diagnostic-c++2a-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is a keyword in C++2a</li>
<li>warning: '&lt;=&gt;' is a single token in C++2a; add a space to avoid a change in behavior</li>
<li>warning: aggregate initialization of type %0 with user-declared constructors is incompatible with C++2a</li>
<li>warning: consteval is incompatible with C++ standards before C++20</li>
<li>warning: this expression will be parsed as explicit(bool) in C++2a</li>
<li>warning: type of UTF-8 string literal will change from array of const char to array of const char8_t in C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++2a-extensions</key>
  <name>clang-diagnostic-c++2a-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is a C++2a extension</li>
<li>warning: default member initializer for bit-field is a C++2a extension</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is a C++2a extension</li>
<li>warning: explicit template parameter list for lambdas is a C++2a extension</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is a C++2a extension</li>
<li>warning: initialized lambda pack captures are a C++2a extension</li>
<li>warning: inline nested namespace definition is a C++2a extension</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is a C++2a extension</li>
<li>warning: range-based for loop initialization statements are a C++2a extension</li>
<li>warning: use of function template name with no prior declaration in function call with explicit template arguments is a C++2a extension</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is a C++2a extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-2a-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-c++14-c++17-compat</key>
  <name>clang-diagnostic-c++98-c++11-c++14-c++17-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-c++14-c++17-compat-pedantic</key>
  <name>clang-diagnostic-c++98-c++11-c++14-c++17-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-c-17-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-c++14-compat</key>
  <name>clang-diagnostic-c++98-c++11-c++14-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-c++14-compat-pedantic</key>
  <name>clang-diagnostic-c++98-c++11-c++14-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-c-14-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-compat</key>
  <name>clang-diagnostic-c++98-c++11-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-compat-binary-literal</key>
  <name>clang-diagnostic-c++98-c++11-compat-binary-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-c++11-compat-pedantic</key>
  <name>clang-diagnostic-c++98-c++11-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-c-11-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat</key>
  <name>clang-diagnostic-c++98-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{anonymous struct|union}0 member %1 with a non-trivial %sub{select_special_member_kind}2 is incompatible with C++98</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{defaulted|deleted}0 function definitions are incompatible with C++98</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: '%0' keyword is incompatible with C++98</li>
<li>warning: '%0' type specifier is incompatible with C++98</li>
<li>warning: '&lt;::' is treated as digraph '&lt;:' (aka '[') followed by ':' in C++98</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'alignas' is incompatible with C++98</li>
<li>warning: 'auto' type specifier is incompatible with C++98</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constexpr' specifier is incompatible with C++98</li>
<li>warning: 'decltype' type specifier is incompatible with C++98</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'nullptr' is incompatible with C++98</li>
<li>warning: C++11 attribute syntax is incompatible with C++98</li>
<li>warning: alias declarations are incompatible with C++98</li>
<li>warning: alignof expressions are incompatible with C++98</li>
<li>warning: befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98</li>
<li>warning: befriending enumeration type %0 is incompatible with C++98</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: consecutive right angle brackets are incompatible with C++98 (use '&gt; &gt;')</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constructor call from initializer list is incompatible with C++98</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default template arguments for a function template are incompatible with C++98</li>
<li>warning: delegating constructors are incompatible with C++98</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: enumeration type in nested name specifier is incompatible with C++98</li>
<li>warning: enumeration types with a fixed underlying type are incompatible with C++98</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit conversion functions are incompatible with C++98</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: friend declaration naming a member of the declaring class is incompatible with C++98</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: generalized initializer lists are incompatible with C++98</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: in-class initialization of non-static data members is incompatible with C++98</li>
<li>warning: inheriting constructors are incompatible with C++98</li>
<li>warning: initialization of initializer_list object is incompatible with C++98</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline namespaces are incompatible with C++98</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: jump from switch statement to this case label is incompatible with C++98</li>
<li>warning: jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98</li>
<li>warning: jump from this goto statement to its label is incompatible with C++98</li>
<li>warning: lambda expressions are incompatible with C++98</li>
<li>warning: literal operators are incompatible with C++98</li>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: noexcept expressions are incompatible with C++98</li>
<li>warning: noexcept specifications are incompatible with C++98</li>
<li>warning: non-class friend type %0 is incompatible with C++98</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop is incompatible with C++98</li>
<li>warning: raw string literals are incompatible with C++98</li>
<li>warning: redundant parentheses surrounding address non-type template argument are incompatible with C++98</li>
<li>warning: reference initialized from initializer list is incompatible with C++98</li>
<li>warning: reference qualifiers on functions are incompatible with C++98</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: rvalue references are incompatible with C++98</li>
<li>warning: scalar initialized from empty initializer list is incompatible with C++98</li>
<li>warning: scoped enumerations are incompatible with C++98</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C++98</li>
<li>warning: static data member %0 in union is incompatible with C++98</li>
<li>warning: static_assert declarations are incompatible with C++98</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: substitution failure due to access control is incompatible with C++98</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: trailing return types are incompatible with C++98</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++98</li>
<li>warning: universal character name referring to a control character is incompatible with C++98</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
<li>warning: use of 'template' keyword outside of a template is incompatible with C++98</li>
<li>warning: use of 'typename' outside of a template is incompatible with C++98</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of non-static data member %0 in an unevaluated context is incompatible with C++98</li>
<li>warning: use of null pointer as non-type template argument is incompatible with C++98</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: using this character in an identifier is incompatible with C++98</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variadic templates are incompatible with C++98</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat-bind-to-temporary-copy</key>
  <name>clang-diagnostic-c++98-compat-bind-to-temporary-copy</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-bind-to-temporary-copy" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat-extra-semi</key>
  <name>clang-diagnostic-c++98-compat-extra-semi</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-extra-semi" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat-local-type-template-args</key>
  <name>clang-diagnostic-c++98-compat-local-type-template-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-local-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat-pedantic</key>
  <name>clang-diagnostic-c++98-compat-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #line number greater than 32767 is incompatible with C++98</li>
<li>warning: %select{anonymous struct|union}0 member %1 with a non-trivial %sub{select_special_member_kind}2 is incompatible with C++98</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{default construction|assignment}0 of lambda is incompatible with C++ standards before C++2a</li>
<li>warning: %select{defaulted|deleted}0 function definitions are incompatible with C++98</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %select{if|switch}0 initialization statements are incompatible with C++ standards before C++17</li>
<li>warning: %sub{select_initialized_entity_kind}1 of type %2 when binding a reference to a temporary would %select{invoke an inaccessible constructor|find no viable constructor|find ambiguous constructors|invoke a deleted constructor}0 in C++98</li>
<li>warning: '%0' keyword is incompatible with C++98</li>
<li>warning: '%0' type specifier is incompatible with C++98</li>
<li>warning: '&lt;::' is treated as digraph '&lt;:' (aka '[') followed by ':' in C++98</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: '&lt;=&gt;' operator is incompatible with C++ standards before C++2a</li>
<li>warning: 'alignas' is incompatible with C++98</li>
<li>warning: 'auto' type specifier is incompatible with C++98</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'begin' and 'end' returning different types (%0 and %1) is incompatible with C++ standards before C++17</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'char8_t' type specifier is incompatible with C++ standards before C++20</li>
<li>warning: 'constexpr' specifier is incompatible with C++98</li>
<li>warning: 'decltype' type specifier is incompatible with C++98</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'decltype(auto)' type specifier is incompatible with C++ standards before C++14</li>
<li>warning: 'long long' is incompatible with C++98</li>
<li>warning: 'nullptr' is incompatible with C++98</li>
<li>warning: C++11 attribute syntax is incompatible with C++98</li>
<li>warning: C++98 requires newline at end of file</li>
<li>warning: alias declarations are incompatible with C++98</li>
<li>warning: alignof expressions are incompatible with C++98</li>
<li>warning: attributes on %select{a namespace|an enumerator}0 declaration are incompatible with C++ standards before C++17</li>
<li>warning: befriending %1 without '%select{struct|interface|union|class|enum}0' keyword is incompatible with C++98</li>
<li>warning: befriending enumeration type %0 is incompatible with C++98</li>
<li>warning: binary integer literals are incompatible with C++ standards before C++14</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: by value capture of '*this' is incompatible with C++ standards before C++17</li>
<li>warning: cast between pointer-to-function and pointer-to-object is incompatible with C++98</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: class template argument deduction is incompatible with C++ standards before C++17%select{|; for compatibility, use explicit type name %1}0</li>
<li>warning: commas at the end of enumerator lists are incompatible with C++98</li>
<li>warning: consecutive right angle brackets are incompatible with C++98 (use '&gt; &gt;')</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr function with no return statements is incompatible with C++ standards before C++14</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr if is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constexpr on lambda expressions is incompatible with C++ standards before C++17</li>
<li>warning: constructor call from initializer list is incompatible with C++98</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declaration declared %plural{1:'%1'|:with '%1' specifiers}0 is incompatible with C++ standards before C++2a</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: decomposition declarations are incompatible with C++ standards before C++17</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default member initializer for bit-field is incompatible with C++ standards before C++2a</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default scope specifier for attributes is incompatible with C++ standards before C++17</li>
<li>warning: default template arguments for a function template are incompatible with C++98</li>
<li>warning: delegating constructors are incompatible with C++98</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: digit separators are incompatible with C++ standards before C++14</li>
<li>warning: empty macro arguments are incompatible with C++98</li>
<li>warning: enumeration type in nested name specifier is incompatible with C++98</li>
<li>warning: enumeration types with a fixed underlying type are incompatible with C++98</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit capture of 'this' with a capture default of '=' is incompatible with C++ standards before C++2a</li>
<li>warning: explicit conversion functions are incompatible with C++98</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicit template parameter list for lambdas is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: explicitly defaulting this %sub{select_special_member_kind}0 with a type different from the implicit type is incompatible with C++ standards before C++2a</li>
<li>warning: extern templates are incompatible with C++98</li>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
<li>warning: friend declaration naming a member of the declaring class is incompatible with C++98</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: function try block in constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: generalized initializer lists are incompatible with C++98</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: generic lambdas are incompatible with C++11</li>
<li>warning: hexadecimal floating literals are incompatible with C++ standards before C++17</li>
<li>warning: implicit conversion from array size expression of type %0 to %select{integral|enumeration}1 type %2 is incompatible with C++98</li>
<li>warning: in-class initialization of non-static data members is incompatible with C++98</li>
<li>warning: inheriting constructors are incompatible with C++98</li>
<li>warning: initialization of initializer_list object is incompatible with C++98</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda capture packs are incompatible with C++ standards before C++2a</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: initialized lambda captures are incompatible with C++ standards before C++14</li>
<li>warning: inline namespaces are incompatible with C++98</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline nested namespace definition is incompatible with C++ standards before C++2a</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: inline variables are incompatible with C++ standards before C++17</li>
<li>warning: invoking a pointer to a 'const &amp;' member function on an rvalue is incompatible with C++ standards before C++2a</li>
<li>warning: jump from switch statement to this case label is incompatible with C++98</li>
<li>warning: jump from this %select{indirect|asm}0 goto statement to one of its possible targets is incompatible with C++98</li>
<li>warning: jump from this goto statement to its label is incompatible with C++98</li>
<li>warning: lambda expressions are incompatible with C++98</li>
<li>warning: literal operators are incompatible with C++98</li>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: multiple return statements in constexpr function is incompatible with C++ standards before C++14</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: nested namespace definition is incompatible with C++ standards before C++17</li>
<li>warning: noexcept expressions are incompatible with C++98</li>
<li>warning: noexcept specifications are incompatible with C++98</li>
<li>warning: non-class friend type %0 is incompatible with C++98</li>
<li>warning: non-type template argument referring to %select{function|object}0 %1 with internal linkage is incompatible with C++98</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: non-type template parameters declared with %0 are incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack expansion using declaration is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: pack fold expression is incompatible with C++ standards before C++17</li>
<li>warning: passing object of trivial but non-POD type %0 through variadic %select{function|block|method|constructor}1 is incompatible with C++98</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop initialization statements are incompatible with C++ standards before C++2a</li>
<li>warning: range-based for loop is incompatible with C++98</li>
<li>warning: raw string literals are incompatible with C++98</li>
<li>warning: redundant parentheses surrounding address non-type template argument are incompatible with C++98</li>
<li>warning: reference initialized from initializer list is incompatible with C++98</li>
<li>warning: reference qualifiers on functions are incompatible with C++98</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: return type deduction is incompatible with C++ standards before C++14</li>
<li>warning: rvalue references are incompatible with C++98</li>
<li>warning: scalar initialized from empty initializer list is incompatible with C++98</li>
<li>warning: scoped enumerations are incompatible with C++98</li>
<li>warning: specifying character '%0' with a universal character name is incompatible with C++98</li>
<li>warning: static data member %0 in union is incompatible with C++98</li>
<li>warning: static_assert declarations are incompatible with C++98</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: static_assert with no message is incompatible with C++ standards before C++17</li>
<li>warning: substitution failure due to access control is incompatible with C++98</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: template template parameter using 'typename' is incompatible with C++ standards before C++17</li>
<li>warning: trailing return types are incompatible with C++98</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: type definition in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++ standards before C++17</li>
<li>warning: unicode literals are incompatible with C++98</li>
<li>warning: universal character name referring to a control character is incompatible with C++98</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
<li>warning: use of 'template' keyword outside of a template is incompatible with C++98</li>
<li>warning: use of 'typename' outside of a template is incompatible with C++98</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of function template name with no prior function template declaration in function call with explicit template arguments is incompatible with C++ standards before C++2a</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of multiple declarators in a single using declaration is incompatible with C++ standards before C++17</li>
<li>warning: use of non-static data member %0 in an unevaluated context is incompatible with C++98</li>
<li>warning: use of null pointer as non-type template argument is incompatible with C++98</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: use of this statement in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++2a</li>
<li>warning: using this character in an identifier is incompatible with C++98</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable declaration in a constexpr %select{function|constructor}0 is incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variable templates are incompatible with C++ standards before C++14</li>
<li>warning: variadic macros are incompatible with C++98</li>
<li>warning: variadic templates are incompatible with C++98</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
<li>warning: virtual constexpr functions are incompatible with C++ standards before C++2a</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c++98-compat-unnamed-type-template-args</key>
  <name>clang-diagnostic-c++98-compat-unnamed-type-template-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc-98-compat-unnamed-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c11-extensions</key>
  <name>clang-diagnostic-c11-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a C11-specific feature</li>
<li>warning: _Noreturn functions are a C11-specific feature</li>
<li>warning: _Static_assert is a C11-specific feature</li>
<li>warning: anonymous structs are a C11 extension</li>
<li>warning: anonymous unions are a C11 extension</li>
<li>warning: generic selections are a C11-specific feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc11-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c99-compat</key>
  <name>clang-diagnostic-c99-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{using this character in an identifier|starting an identifier with this character}0 is incompatible with C99</li>
<li>warning: integer literal is too large to be represented in type 'long', interpreting as 'unsigned long' per C89; this literal will %select{have type 'long long'|be ill-formed}0 in C99 onwards</li>
<li>warning: unicode literals are incompatible with C99</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc99-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-c99-extensions</key>
  <name>clang-diagnostic-c99-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{qualifier in |static |}0array size %select{||'[*] '}0is a C99 feature</li>
<li>warning: ISO C99 requires whitespace after the macro name</li>
<li>warning: commas at the end of enumerator lists are a C99-specific feature</li>
<li>warning: compound literals are a C99-specific feature</li>
<li>warning: designated initializers are a C99 feature</li>
<li>warning: empty macro arguments are a C99 feature</li>
<li>warning: flexible array members are a C99 feature</li>
<li>warning: hexadecimal floating constants are a C99 feature</li>
<li>warning: initializer for aggregate is not a compile-time constant</li>
<li>warning: variable declaration in for loop is a C99-specific feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wc99-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cast-align</key>
  <name>clang-diagnostic-cast-align</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast from %0 to %1 increases required alignment from %2 to %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-align" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cast-calling-convention</key>
  <name>clang-diagnostic-cast-calling-convention</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast between incompatible calling conventions '%0' and '%1'; calls through this pointer may abort at runtime</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-calling-convention" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cast-of-sel-type</key>
  <name>clang-diagnostic-cast-of-sel-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-of-sel-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cast-qual</key>
  <name>clang-diagnostic-cast-qual</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast from %0 to %1 drops %select{const and volatile qualifiers|const qualifier|volatile qualifier}2</li>
<li>warning: cast from %0 to %1 must have all intermediate pointers const qualified to be safe</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-qual" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cast-qual-unrelated</key>
  <name>clang-diagnostic-cast-qual-unrelated</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ does not allow %select{const_cast|static_cast|reinterpret_cast|dynamic_cast|C-style cast|functional-style cast}0 from %1 to %2 because it casts away qualifiers, even though the source and destination types are unrelated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcast-qual-unrelated" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-char-subscripts</key>
  <name>clang-diagnostic-char-subscripts</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wchar-subscripts" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-clang-cl-pch</key>
  <name>clang-diagnostic-clang-cl-pch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma hdrstop filename not supported, /Fp can be used to specify precompiled header filename</li>
<li>warning: definition of macro %0 does not match definition in precompiled header</li>
<li>warning: support for '%0' without a corresponding /FI flag not implemented yet; flag ignored</li>
<li>warning: support for '/Yc' and '/Yu' with different filenames not implemented yet; flags ignored</li>
<li>warning: support for '/Yc' with more than one source file not implemented yet; flag ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wclang-cl-pch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-class-varargs</key>
  <name>clang-diagnostic-class-varargs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</li>
<li>warning: cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime</li>
<li>warning: passing object of class type %0 through variadic %select{function|block|method|constructor}1%select{|; did you mean to call '%3'?}2</li>
<li>warning: second argument to 'va_arg' is of ARC ownership-qualified type %0</li>
<li>warning: second argument to 'va_arg' is of non-POD type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wclass-varargs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-comma</key>
  <name>clang-diagnostic-comma</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: possible misuse of comma operator here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomma" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-comment</key>
  <name>clang-diagnostic-comment</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '/*' within block comment</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: multi-line // comment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomment" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-comments</key>
  <name>clang-diagnostic-comments</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '/*' within block comment</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: multi-line // comment</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomments" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-compare-distinct-pointer-types</key>
  <name>clang-diagnostic-compare-distinct-pointer-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison of distinct pointer types%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcompare-distinct-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-complex-component-init</key>
  <name>clang-diagnostic-complex-component-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: complex initialization specifying real and imaginary components is an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcomplex-component-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-conditional-type-mismatch</key>
  <name>clang-diagnostic-conditional-type-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: pointer/integer type mismatch in conditional expression%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconditional-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-conditional-uninitialized</key>
  <name>clang-diagnostic-conditional-uninitialized</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 may be uninitialized when %select{used here|captured by block}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconditional-uninitialized" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-config-macros</key>
  <name>clang-diagnostic-config-macros</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{definition|#undef}0 of configuration macro '%1' has no effect on the import of '%2'; pass '%select{-D%1=...|-U%1}0' on the command line to configure the module</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconfig-macros" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-constant-conversion</key>
  <name>clang-diagnostic-constant-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstant-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-constant-logical-operand</key>
  <name>clang-diagnostic-constant-logical-operand</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of logical '%0' with constant operand</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstant-logical-operand" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-constexpr-not-const</key>
  <name>clang-diagnostic-constexpr-not-const</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'constexpr' non-static member function will not be implicitly 'const' in C++14; add 'const' to avoid a change in behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconstexpr-not-const" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-consumed</key>
  <name>clang-diagnostic-consumed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: argument not in expected state; expected '%0', observed '%1'</li>
<li>warning: consumed analysis attribute is attached to member of class '%0' which isn't marked as consumable</li>
<li>warning: invalid invocation of method '%0' on a temporary object while it is in the '%1' state</li>
<li>warning: invalid invocation of method '%0' on object '%1' while it is in the '%2' state</li>
<li>warning: parameter '%0' not in expected state when the function returns: expected '%1', observed '%2'</li>
<li>warning: return state set for an unconsumable type '%0'</li>
<li>warning: return value not in expected state; expected '%0', observed '%1'</li>
<li>warning: state of variable '%0' must match at the entry and exit of loop</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconsumed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-conversion</key>
  <name>clang-diagnostic-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: implicit conversion discards imaginary component: %0 to %1</li>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
<li>warning: implicit conversion turns vector to scalar: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: non-type template argument value '%0' truncated to '%1' for template parameter of type %2</li>
<li>warning: non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-conversion-null</key>
  <name>clang-diagnostic-conversion-null</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wconversion-null" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-coroutine</key>
  <name>clang-diagnostic-coroutine</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is required to declare the member 'unhandled_exception()' when exceptions are enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcoroutine" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-coroutine-missing-unhandled-exception</key>
  <name>clang-diagnostic-coroutine-missing-unhandled-exception</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is required to declare the member 'unhandled_exception()' when exceptions are enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcoroutine-missing-unhandled-exception" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-covered-switch-default</key>
  <name>clang-diagnostic-covered-switch-default</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: default label in switch which covers all enumeration values</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcovered-switch-default" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cpp</key>
  <name>clang-diagnostic-cpp</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcpp" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cstring-format-directive</key>
  <name>clang-diagnostic-cstring-format-directive</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using %0 directive in %select{NSString|CFString}1 which is being passed as a formatting argument to the formatting %select{method|CFfunction}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcstring-format-directive" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-cuda-compat</key>
  <name>clang-diagnostic-cuda-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute parameter %1 is negative and will be ignored</li>
<li>warning: argument to '#pragma unroll' should not be in parentheses in CUDA C/C++</li>
<li>warning: ignored 'inline' attribute on kernel function %0</li>
<li>warning: kernel function %0 is a member function; this may not be accepted by nvcc</li>
<li>warning: nvcc does not allow '__%0__' to appear after '()' in lambdas</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcuda-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-custom-atomic-properties</key>
  <name>clang-diagnostic-custom-atomic-properties</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: atomic by default property %0 has a user defined %select{getter|setter}1 (property should be marked 'atomic' if this is intended)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcustom-atomic-properties" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dangling</key>
  <name>clang-diagnostic-dangling</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned</li>
<li>warning: %select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: %select{temporary %select{whose address is used as value of|%select{|implicitly }2bound to}4 %select{%select{|reference }4member of local variable|local %select{variable|reference}4}1|array backing %select{initializer list subobject of local variable|local initializer list}1}0 %select{%3 |}2will be destroyed at the end of the full-expression</li>
<li>warning: array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression</li>
<li>warning: binding reference member %0 to stack allocated %select{variable|parameter}2 %1</li>
<li>warning: initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1</li>
<li>warning: returning %select{address of|reference to}0 local temporary object</li>
<li>warning: returning address of label, which is local</li>
<li>warning: sorry, lifetime extension of %select{temporary|backing array of initializer list}0 created by aggregate initialization using default member initializer is not supported; lifetime of %select{temporary|backing array}0 will end at the end of the full-expression</li>
<li>warning: temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dangling-else</key>
  <name>clang-diagnostic-dangling-else</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: add explicit braces to avoid dangling else</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-else" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dangling-field</key>
  <name>clang-diagnostic-dangling-field</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{reference|backing array for 'std::initializer_list'}2 %select{|subobject of }1member %0 %select{binds to|is}2 a temporary object whose lifetime is shorter than the lifetime of the constructed object</li>
<li>warning: binding reference member %0 to stack allocated %select{variable|parameter}2 %1</li>
<li>warning: initializing pointer member %0 with the stack address of %select{variable|parameter}2 %1</li>
<li>warning: temporary bound to reference member of allocated object will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-field" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dangling-initializer-list</key>
  <name>clang-diagnostic-dangling-initializer-list</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: array backing %select{initializer list subobject of the allocated object|the allocated initializer list}0 will be destroyed at the end of the full-expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdangling-initializer-list" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-date-time</key>
  <name>clang-diagnostic-date-time</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expansion of date or time macro is not reproducible</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdate-time" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dealloc-in-category</key>
  <name>clang-diagnostic-dealloc-in-category</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: -dealloc is being overridden in a category</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdealloc-in-category" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-debug-compression-unavailable</key>
  <name>clang-diagnostic-debug-compression-unavailable</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cannot compress debug sections (zlib not installed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdebug-compression-unavailable" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-declaration-after-statement</key>
  <name>clang-diagnostic-declaration-after-statement</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C90 forbids mixing declarations and code</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeclaration-after-statement" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-defaulted-function-deleted</key>
  <name>clang-diagnostic-defaulted-function-deleted</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicitly defaulted %sub{select_special_member_kind}0 is implicitly deleted</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdefaulted-function-deleted" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-delegating-ctor-cycles</key>
  <name>clang-diagnostic-delegating-ctor-cycles</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: constructor for %0 creates a delegation cycle</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelegating-ctor-cycles" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-delete-incomplete</key>
  <name>clang-diagnostic-delete-incomplete</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cannot delete expression with pointer-to-'void' type %0</li>
<li>warning: deleting pointer to incomplete type %0 may cause undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-incomplete" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-delete-non-virtual-dtor</key>
  <name>clang-diagnostic-delete-non-virtual-dtor</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated</key>
  <name>clang-diagnostic-deprecated</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is deprecated</li>
<li>warning: %0 is deprecated: %1</li>
<li>warning: %0 may be deprecated because the receiver type is unknown</li>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: -O4 is equivalent to -O3</li>
<li>warning: OpenCL version %0 does not support the option '%1'</li>
<li>warning: Use of 'long' with '__vector' is deprecated</li>
<li>warning: access declarations are deprecated; use using declarations instead</li>
<li>warning: argument '%0' is deprecated, use '%1' instead</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
<li>warning: definition of implicit copy %select{constructor|assignment operator}1 for %0 is deprecated because it has a user-declared %select{copy %select{assignment operator|constructor}1|destructor}2</li>
<li>warning: dynamic exception specifications are deprecated</li>
<li>warning: implicit capture of 'this' with a capture default of '=' is deprecated</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
<li>warning: out-of-line definition of constexpr static data member is redundant in C++17 and is deprecated</li>
<li>warning: property access is using %0 method which is deprecated</li>
<li>warning: specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead</li>
<li>warning: specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead</li>
<li>warning: treating '%0' input as '%1' when in C++ mode, this behavior is deprecated</li>
<li>warning: use of C-style parameters in Objective-C method declarations is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-attributes</key>
  <name>clang-diagnostic-deprecated-attributes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: specifying vector types with the 'mode' attribute is deprecated; use the 'vector_size' attribute instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-attributes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-declarations</key>
  <name>clang-diagnostic-deprecated-declarations</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is deprecated</li>
<li>warning: %0 is deprecated: %1</li>
<li>warning: %0 may be deprecated because the receiver type is unknown</li>
<li>warning: property access is using %0 method which is deprecated</li>
<li>warning: specifying 'uuid' as an ATL attribute is deprecated; use __declspec instead</li>
<li>warning: use of C-style parameters in Objective-C method declarations is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-declarations" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-dynamic-exception-spec</key>
  <name>clang-diagnostic-deprecated-dynamic-exception-spec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: dynamic exception specifications are deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-dynamic-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-implementations</key>
  <name>clang-diagnostic-deprecated-implementations</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implementing deprecated %select{method|class|category}0</li>
<li>warning: implementing unavailable method</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-implementations" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-increment-bool</key>
  <name>clang-diagnostic-deprecated-increment-bool</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-increment-bool" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-objc-isa-usage</key>
  <name>clang-diagnostic-deprecated-objc-isa-usage</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: assignment to Objective-C's isa is deprecated in favor of object_setClass()</li>
<li>warning: direct access to Objective-C's isa is deprecated in favor of object_getClass()</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-isa-usage" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-objc-pointer-introspection</key>
  <name>clang-diagnostic-deprecated-objc-pointer-introspection</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-objc-pointer-introspection-performSelector</key>
  <name>clang-diagnostic-deprecated-objc-pointer-introspection-performSelector</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: bitmasking for introspection of Objective-C object pointers is strongly discouraged</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-objc-pointer-introspection-performSelector" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-register</key>
  <name>clang-diagnostic-deprecated-register</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-register" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-this-capture</key>
  <name>clang-diagnostic-deprecated-this-capture</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit capture of 'this' with a capture default of '=' is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-this-capture" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-deprecated-writable-strings</key>
  <name>clang-diagnostic-deprecated-writable-strings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdeprecated-writable-strings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-direct-ivar-access</key>
  <name>clang-diagnostic-direct-ivar-access</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: instance variable %0 is being directly accessed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdirect-ivar-access" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-disabled-macro-expansion</key>
  <name>clang-diagnostic-disabled-macro-expansion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: disabled expansion of recursive macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdisabled-macro-expansion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-distributed-object-modifiers</key>
  <name>clang-diagnostic-distributed-object-modifiers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting distributed object modifiers on parameter type in implementation of %0</li>
<li>warning: conflicting distributed object modifiers on return type in implementation of %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdistributed-object-modifiers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-div-by-zero</key>
  <name>clang-diagnostic-div-by-zero</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{remainder|division}0 by zero is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdiv-by-zero" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-division-by-zero</key>
  <name>clang-diagnostic-division-by-zero</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{remainder|division}0 by zero is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdivision-by-zero" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dll-attribute-on-redeclaration</key>
  <name>clang-diagnostic-dll-attribute-on-redeclaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of %q0 should not add %q1 attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdll-attribute-on-redeclaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dllexport-explicit-instantiation-decl</key>
  <name>clang-diagnostic-dllexport-explicit-instantiation-decl</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicit instantiation declaration should not be 'dllexport'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdllexport-explicit-instantiation-decl" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dllimport-static-field-def</key>
  <name>clang-diagnostic-dllimport-static-field-def</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: definition of dllimport static field</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdllimport-static-field-def" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-documentation</key>
  <name>clang-diagnostic-documentation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%select{\|@}0%1' command does not terminate a verbatim text block</li>
<li>warning: '%select{\|@}0%1' command used in a comment that is attached to a %select{function returning void|constructor|destructor|method returning void}2</li>
<li>warning: '%select{\|@}0%1' command used in a comment that is not attached to a function or method declaration</li>
<li>warning: '%select{\|@}0%select{classdesign|coclass|dependency|helper|helperclass|helps|instancesize|ownership|performance|security|superclass}1' command should not be used in a comment attached to a non-container declaration</li>
<li>warning: '%select{\|@}0%select{class|interface|protocol|struct|union}1' command should not be used in a comment attached to a non-%select{class|interface|protocol|struct|union}2 declaration</li>
<li>warning: '%select{\|@}0%select{function|functiongroup|method|methodgroup|callback}1' command should be used in a comment attached to %select{a function|a function|an Objective-C method|an Objective-C method|a pointer to function}2 declaration</li>
<li>warning: '%select{\|@}0param' command used in a comment that is not attached to a function declaration</li>
<li>warning: '%select{\|@}0tparam' command used in a comment that is not attached to a template declaration</li>
<li>warning: HTML end tag '%0' is forbidden</li>
<li>warning: HTML end tag does not match any start tag</li>
<li>warning: HTML start tag '%0' closed by '%1'</li>
<li>warning: HTML start tag prematurely ended, expected attribute name or '&gt;'</li>
<li>warning: HTML tag '%0' requires an end tag</li>
<li>warning: declaration is marked with '\deprecated' command but does not have a deprecation attribute</li>
<li>warning: duplicated command '%select{\|@}0%1'</li>
<li>warning: empty paragraph passed to '%select{\|@}0%1' command</li>
<li>warning: expected quoted string after equals sign</li>
<li>warning: not a Doxygen trailing comment</li>
<li>warning: parameter '%0' is already documented</li>
<li>warning: parameter '%0' not found in the function declaration</li>
<li>warning: template parameter '%0' is already documented</li>
<li>warning: template parameter '%0' not found in the template declaration</li>
<li>warning: unrecognized parameter passing direction, valid directions are '[in]', '[out]' and '[in,out]'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-documentation-deprecated-sync</key>
  <name>clang-diagnostic-documentation-deprecated-sync</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration is marked with '\deprecated' command but does not have a deprecation attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-deprecated-sync" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-documentation-html</key>
  <name>clang-diagnostic-documentation-html</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: HTML end tag '%0' is forbidden</li>
<li>warning: HTML end tag does not match any start tag</li>
<li>warning: HTML start tag '%0' closed by '%1'</li>
<li>warning: HTML tag '%0' requires an end tag</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-html" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-documentation-pedantic</key>
  <name>clang-diagnostic-documentation-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown command tag name</li>
<li>warning: unknown command tag name '%0'; did you mean '%1'?</li>
<li>warning: whitespace is not allowed in parameter passing direction</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-documentation-unknown-command</key>
  <name>clang-diagnostic-documentation-unknown-command</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown command tag name</li>
<li>warning: unknown command tag name '%0'; did you mean '%1'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdocumentation-unknown-command" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dollar-in-identifier-extension</key>
  <name>clang-diagnostic-dollar-in-identifier-extension</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '$' in identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdollar-in-identifier-extension" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-double-promotion</key>
  <name>clang-diagnostic-double-promotion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion increases floating-point precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdouble-promotion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-duplicate-decl-specifier</key>
  <name>clang-diagnostic-duplicate-decl-specifier</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: %sub{duplicate_declspec}0</li>
<li>warning: multiple identical address spaces specified for type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-decl-specifier" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-duplicate-enum</key>
  <name>clang-diagnostic-duplicate-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: element %0 has been implicitly assigned %1 which another element has been assigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-duplicate-method-arg</key>
  <name>clang-diagnostic-duplicate-method-arg</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of method parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-method-arg" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-duplicate-method-match</key>
  <name>clang-diagnostic-duplicate-method-match</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple declarations of method %0 found and ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-method-match" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-duplicate-protocol</key>
  <name>clang-diagnostic-duplicate-protocol</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: duplicate protocol definition of %0 is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wduplicate-protocol" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dynamic-class-memaccess</key>
  <name>clang-diagnostic-dynamic-class-memaccess</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdynamic-class-memaccess" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-dynamic-exception-spec</key>
  <name>clang-diagnostic-dynamic-exception-spec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow dynamic exception specifications</li>
<li>warning: dynamic exception specifications are deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdynamic-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-effc++</key>
  <name>clang-diagnostic-effc++</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#weffc-" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-embedded-directive</key>
  <name>clang-diagnostic-embedded-directive</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: embedding a directive within macro arguments has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wembedded-directive" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-empty-body</key>
  <name>clang-diagnostic-empty-body</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: for loop has empty body</li>
<li>warning: if statement has empty body</li>
<li>warning: range-based for loop has empty body</li>
<li>warning: switch statement has empty body</li>
<li>warning: while loop has empty body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-body" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-empty-decomposition</key>
  <name>clang-diagnostic-empty-decomposition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow a decomposition group to be empty</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-decomposition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-empty-translation-unit</key>
  <name>clang-diagnostic-empty-translation-unit</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C requires a translation unit to contain at least one declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-translation-unit" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-encode-type</key>
  <name>clang-diagnostic-encode-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: encoding of %0 type is incomplete because %1 component has unknown encoding</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wencode-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-endif-labels</key>
  <name>clang-diagnostic-endif-labels</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra tokens at end of #%0 directive</li>
<li>warning: extra tokens at the end of '#pragma omp %0' are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wendif-labels" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-enum-compare</key>
  <name>clang-diagnostic-enum-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison of two values with different enumeration types in switch statement%diff{ ($ and $)|}0,1</li>
<li>warning: comparison of two values with different enumeration types%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-enum-compare-switch</key>
  <name>clang-diagnostic-enum-compare-switch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison of two values with different enumeration types in switch statement%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-compare-switch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-enum-conversion</key>
  <name>clang-diagnostic-enum-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-enum-too-large</key>
  <name>clang-diagnostic-enum-too-large</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enumeration values exceed range of largest integer</li>
<li>warning: incremented enumerator value %0 is not representable in the largest integer type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wenum-too-large" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-exceptions</key>
  <name>clang-diagnostic-exceptions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has a non-throwing exception specification but can still throw</li>
<li>warning: cannot refer to a non-static member from the handler of a %select{constructor|destructor}0 function try block</li>
<li>warning: exception of type %0 will be caught by earlier handler</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexceptions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-exit-time-destructors</key>
  <name>clang-diagnostic-exit-time-destructors</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration requires an exit-time destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexit-time-destructors" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-expansion-to-defined</key>
  <name>clang-diagnostic-expansion-to-defined</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: macro expansion producing 'defined' has undefined behavior</li>
<li>warning: macro expansion producing 'defined' has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexpansion-to-defined" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-experimental-isel</key>
  <name>clang-diagnostic-experimental-isel</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: -fexperimental-isel support for the '%0' architecture is incomplete</li>
<li>warning: -fexperimental-isel support is incomplete for this architecture at the current optimization level</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexperimental-isel" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-explicit-initialize-call</key>
  <name>clang-diagnostic-explicit-initialize-call</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicit call to +initialize results in duplicate call to +initialize</li>
<li>warning: explicit call to [super initialize] should only be in implementation of +initialize</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexplicit-initialize-call" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-explicit-ownership-type</key>
  <name>clang-diagnostic-explicit-ownership-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method parameter of type %0 with no explicit ownership</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexplicit-ownership-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extern-c-compat</key>
  <name>clang-diagnostic-extern-c-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextern-c-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extern-initializer</key>
  <name>clang-diagnostic-extern-initializer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'extern' variable has an initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextern-initializer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extra</key>
  <name>clang-diagnostic-extra</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: call to function without interrupt attribute could clobber interruptee's VFP registers</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
<li>warning: initializer overrides prior initialization of this subobject</li>
<li>warning: method has no return type specified; defaults to 'id'</li>
<li>warning: missing field %0 initializer</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
<li>warning: semicolon before method body is ignored</li>
<li>warning: subobject initialization overrides initialization of other fields within its enclosing subobject</li>
<li>warning: unused parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extra-qualification</key>
  <name>clang-diagnostic-extra-qualification</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra qualification on member %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-qualification" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extra-semi</key>
  <name>clang-diagnostic-extra-semi</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra ';' %select{outside of a function|inside a %1|inside instance variable list|after member function definition}0</li>
<li>warning: extra ';' after member function definition</li>
<li>warning: extra ';' outside of a function is a C++11 extension</li>
<li>warning: extra ';' outside of a function is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-semi" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-extra-tokens</key>
  <name>clang-diagnostic-extra-tokens</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra tokens at end of #%0 directive</li>
<li>warning: extra tokens at the end of '#pragma omp %0' are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-tokens" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-fallback</key>
  <name>clang-diagnostic-fallback</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: falling back to %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfallback" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-fixed-enum-extension</key>
  <name>clang-diagnostic-fixed-enum-extension</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enumeration types with a fixed underlying type are a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfixed-enum-extension" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-flag-enum</key>
  <name>clang-diagnostic-flag-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enumeration value %0 is out of range of flags in enumeration type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wflag-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-flexible-array-extensions</key>
  <name>clang-diagnostic-flexible-array-extensions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 may not be nested in a struct due to flexible array member</li>
<li>warning: %0 may not be used as an array element due to flexible array member</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wflexible-array-extensions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-float-conversion</key>
  <name>clang-diagnostic-float-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-float-equal</key>
  <name>clang-diagnostic-float-equal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparing floating point with == or != is unsafe</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-equal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-float-overflow-conversion</key>
  <name>clang-diagnostic-float-overflow-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-overflow-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-float-zero-conversion</key>
  <name>clang-diagnostic-float-zero-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfloat-zero-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-for-loop-analysis</key>
  <name>clang-diagnostic-for-loop-analysis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfor-loop-analysis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format</key>
  <name>clang-diagnostic-format</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: incomplete format specifier</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-extra-args</key>
  <name>clang-diagnostic-format-extra-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: data argument not used by format string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-extra-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-invalid-specifier</key>
  <name>clang-diagnostic-format-invalid-specifier</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: invalid conversion specifier '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-invalid-specifier" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-non-iso</key>
  <name>clang-diagnostic-format-non-iso</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' %select{length modifier|conversion specifier}1 is not supported by ISO C</li>
<li>warning: positional arguments are not supported by ISO C</li>
<li>warning: using length modifier '%0' with conversion specifier '%1' is not supported by ISO C</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-non-iso" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-nonliteral</key>
  <name>clang-diagnostic-format-nonliteral</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-nonliteral" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-pedantic</key>
  <name>clang-diagnostic-format-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-security</key>
  <name>clang-diagnostic-format-security</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal (potentially insecure)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-security" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format-zero-length</key>
  <name>clang-diagnostic-format-zero-length</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: format string is empty</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat-zero-length" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-format=2</key>
  <name>clang-diagnostic-format=2</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: format string is not a string literal</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wformat=2" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-four-char-constants</key>
  <name>clang-diagnostic-four-char-constants</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multi-character character constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfour-char-constants" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-frame-larger-than=</key>
  <name>clang-diagnostic-frame-larger-than=</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
<li>warning: stack frame size of %0 bytes in %q1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframe-larger-than=" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-framework-include-private-from-public</key>
  <name>clang-diagnostic-framework-include-private-from-public</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: public framework header includes private framework header '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wframework-include-private-from-public" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-function-def-in-objc-container</key>
  <name>clang-diagnostic-function-def-in-objc-container</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function definition inside an Objective-C container is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfunction-def-in-objc-container" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-function-multiversion</key>
  <name>clang-diagnostic-function-multiversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: CPU list contains duplicate entries; attribute ignored</li>
<li>warning: body of cpu_dispatch function will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfunction-multiversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gcc-compat</key>
  <name>clang-diagnostic-gcc-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' is bound to current loop, GCC binds it to the enclosing loop</li>
<li>warning: 'break' is bound to loop, GCC binds it to switch</li>
<li>warning: 'diagnose_if' is a clang extension</li>
<li>warning: 'enable_if' is a clang extension</li>
<li>warning: GCC does not allow %0 attribute in this position on a function definition</li>
<li>warning: GCC does not allow an attribute in this position on a function declaration</li>
<li>warning: GCC does not allow the %0 attribute to be written on a type</li>
<li>warning: GCC does not allow the 'cleanup' attribute argument to be anything other than a simple identifier</li>
<li>warning: GCC does not allow variable declarations in for loop initializers before C99</li>
<li>warning: __final is a GNU extension, consider using C++11 final</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgcc-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-global-constructors</key>
  <name>clang-diagnostic-global-constructors</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration requires a global constructor</li>
<li>warning: declaration requires a global destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wglobal-constructors" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu</key>
  <name>clang-diagnostic-gnu</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include_next is a language extension</li>
<li>warning: #line directive with zero argument is a GNU extension</li>
<li>warning: %0 applied to an expression is a GNU extension</li>
<li>warning: %select{struct|union}0 without named members is a GNU extension</li>
<li>warning: '__auto_type' is a GNU extension</li>
<li>warning: anonymous structs are a GNU extension</li>
<li>warning: binary integer literals are a GNU extension</li>
<li>warning: cast to union type is a GNU extension</li>
<li>warning: class member cannot be redeclared</li>
<li>warning: complex integer types are a GNU extension</li>
<li>warning: empty %select{struct|union}0 is a GNU extension</li>
<li>warning: expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension</li>
<li>warning: field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension</li>
<li>warning: flexible array initialization is a GNU extension</li>
<li>warning: flexible array member %0 in a union is a GNU extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension</li>
<li>warning: imaginary constants are a GNU extension</li>
<li>warning: in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</li>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
<li>warning: initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension</li>
<li>warning: must specify at least one argument for '...' parameter of variadic macro</li>
<li>warning: redeclaration of already-defined enum %0 is a GNU extension</li>
<li>warning: string literal operator templates are a GNU extension</li>
<li>warning: token pasting of ',' and __VA_ARGS__ is a GNU extension</li>
<li>warning: use of GNU 'missing =' extension in designator</li>
<li>warning: use of GNU ?: conditional expression extension, omitting middle operand</li>
<li>warning: use of GNU address-of-label extension</li>
<li>warning: use of GNU array range extension</li>
<li>warning: use of GNU case range extension</li>
<li>warning: use of GNU empty initializer extension</li>
<li>warning: use of GNU indirect-goto extension</li>
<li>warning: use of GNU old-style field designator extension</li>
<li>warning: use of GNU statement expression extension</li>
<li>warning: variable length array folded to constant array as an extension</li>
<li>warning: variable length arrays are a C99 feature</li>
<li>warning: zero size arrays are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-alignof-expression</key>
  <name>clang-diagnostic-gnu-alignof-expression</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 applied to an expression is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-alignof-expression" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-anonymous-struct</key>
  <name>clang-diagnostic-gnu-anonymous-struct</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: anonymous structs are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-anonymous-struct" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-array-member-paren-init</key>
  <name>clang-diagnostic-gnu-array-member-paren-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: parenthesized initialization of a member array is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-array-member-paren-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-auto-type</key>
  <name>clang-diagnostic-gnu-auto-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '__auto_type' is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-auto-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-binary-literal</key>
  <name>clang-diagnostic-gnu-binary-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: binary integer literals are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-binary-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-case-range</key>
  <name>clang-diagnostic-gnu-case-range</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU case range extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-case-range" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-complex-integer</key>
  <name>clang-diagnostic-gnu-complex-integer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: complex integer types are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-complex-integer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-compound-literal-initializer</key>
  <name>clang-diagnostic-gnu-compound-literal-initializer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: initialization of an array %diff{of type $ from a compound literal of type $|from a compound literal}0,1 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-compound-literal-initializer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-conditional-omitted-operand</key>
  <name>clang-diagnostic-gnu-conditional-omitted-operand</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU ?: conditional expression extension, omitting middle operand</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-conditional-omitted-operand" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-designator</key>
  <name>clang-diagnostic-gnu-designator</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU 'missing =' extension in designator</li>
<li>warning: use of GNU array range extension</li>
<li>warning: use of GNU old-style field designator extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-designator" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-empty-initializer</key>
  <name>clang-diagnostic-gnu-empty-initializer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU empty initializer extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-empty-initializer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-empty-struct</key>
  <name>clang-diagnostic-gnu-empty-struct</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{struct|union}0 without named members is a GNU extension</li>
<li>warning: empty %select{struct|union}0 is a GNU extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-empty-struct" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-flexible-array-initializer</key>
  <name>clang-diagnostic-gnu-flexible-array-initializer</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: flexible array initialization is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-flexible-array-initializer" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-flexible-array-union-member</key>
  <name>clang-diagnostic-gnu-flexible-array-union-member</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: flexible array member %0 in a union is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-flexible-array-union-member" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-folding-constant</key>
  <name>clang-diagnostic-gnu-folding-constant</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expression is not an %select{integer|integral}0 constant expression; folding it to a constant is a GNU extension</li>
<li>warning: in-class initializer for static data member is not a constant expression; folding it to a constant is a GNU extension</li>
<li>warning: variable length array folded to constant array as an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-folding-constant" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-imaginary-constant</key>
  <name>clang-diagnostic-gnu-imaginary-constant</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: imaginary constants are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-imaginary-constant" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-include-next</key>
  <name>clang-diagnostic-gnu-include-next</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include_next is a language extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-include-next" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-label-as-value</key>
  <name>clang-diagnostic-gnu-label-as-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU address-of-label extension</li>
<li>warning: use of GNU indirect-goto extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-label-as-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-redeclared-enum</key>
  <name>clang-diagnostic-gnu-redeclared-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redeclaration of already-defined enum %0 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-redeclared-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-statement-expression</key>
  <name>clang-diagnostic-gnu-statement-expression</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of GNU statement expression extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-statement-expression" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-static-float-init</key>
  <name>clang-diagnostic-gnu-static-float-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-static-float-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-string-literal-operator-template</key>
  <name>clang-diagnostic-gnu-string-literal-operator-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: string literal operator templates are a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-string-literal-operator-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-union-cast</key>
  <name>clang-diagnostic-gnu-union-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast to union type is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-union-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-variable-sized-type-not-at-end</key>
  <name>clang-diagnostic-gnu-variable-sized-type-not-at-end</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: field %0 with variable sized type %1 not at the end of a struct or class is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-variable-sized-type-not-at-end" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-zero-line-directive</key>
  <name>clang-diagnostic-gnu-zero-line-directive</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #line directive with zero argument is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-zero-line-directive" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-gnu-zero-variadic-macro-arguments</key>
  <name>clang-diagnostic-gnu-zero-variadic-macro-arguments</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: must specify at least one argument for '...' parameter of variadic macro</li>
<li>warning: token pasting of ',' and __VA_ARGS__ is a GNU extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wgnu-zero-variadic-macro-arguments" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-header-guard</key>
  <name>clang-diagnostic-header-guard</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is used as a header guard here, followed by #define of a different macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wheader-guard" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-header-hygiene</key>
  <name>clang-diagnostic-header-hygiene</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using namespace directive in global context in header</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wheader-hygiene" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-idiomatic-parentheses</key>
  <name>clang-diagnostic-idiomatic-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using the result of an assignment as a condition without parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#widiomatic-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-attributes</key>
  <name>clang-diagnostic-ignored-attributes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute argument not supported: %1</li>
<li>warning: %0 attribute can only be applied to instance variables or properties</li>
<li>warning: %0 attribute ignored</li>
<li>warning: %0 attribute ignored for field of type %1</li>
<li>warning: %0 attribute ignored on inline function</li>
<li>warning: %0 attribute ignored when parsing type</li>
<li>warning: %0 attribute is deprecated and ignored in OpenCL version %1</li>
<li>warning: %0 attribute only applies to %1</li>
<li>warning: %0 attribute only applies to %select{Objective-C object|pointer|pointer-to-CF-pointer|pointer/reference-to-OSObject-pointer}1 parameters</li>
<li>warning: %0 attribute only applies to %select{functions|methods|properties}1 that return %select{an Objective-C object|a pointer|a non-retainable pointer}2</li>
<li>warning: %0 attribute only applies to %select{functions|unions|variables and functions|functions and methods|functions, methods and blocks|functions, methods, and parameters|variables|variables and fields|variables, data members and tag types|types and namespaces|variables, functions and classes|kernel functions|non-K&amp;R-style functions}1</li>
<li>warning: %0 attribute only applies to a pointer or reference (%1 is invalid)</li>
<li>warning: %0 attribute only applies to return values that are pointers</li>
<li>warning: %0 attribute only applies to return values that are pointers or references</li>
<li>warning: %0 attribute only applies to%select{| constant}1 pointer arguments</li>
<li>warning: %0 calling convention ignored %select{for this target|on variadic function|on constructor/destructor|on builtin function}1</li>
<li>warning: %q0 redeclared inline; %1 attribute ignored</li>
<li>warning: %select{MIPS|MSP430|RISC-V}0 'interrupt' attribute only applies to functions that have %select{no parameters|a 'void' return type}1</li>
<li>warning: %select{alias|ifunc}1 will not be in section '%0' but in the same section as the %select{aliasee|resolver}2</li>
<li>warning: %select{alias|ifunc}2 will always resolve to %0 even if weak definition of %1 is overridden</li>
<li>warning: %select{alignment|size}0 of field %1 (%2 bits) does not match the %select{alignment|size}0 of the first field in transparent union; transparent_union attribute ignored</li>
<li>warning: %select{unsupported|duplicate}0%select{| architecture}1 '%2' in the 'target' attribute string; 'target' attribute ignored</li>
<li>warning: '%0' attribute cannot be specified on a definition</li>
<li>warning: '%0' only applies to %select{function|pointer|Objective-C object or block pointer}1 types; type here is %2</li>
<li>warning: '__clang__' is a predefined macro name, not an attribute scope specifier; did you mean '_Clang' instead?</li>
<li>warning: 'abi_tag' attribute on %select{non-inline|anonymous}0 namespace ignored</li>
<li>warning: 'deprecated' attribute on anonymous namespace ignored</li>
<li>warning: 'dllexport' attribute ignored on explicit instantiation definition</li>
<li>warning: 'gnu_inline' attribute requires function to be marked 'inline', attribute ignored</li>
<li>warning: 'internal_linkage' attribute on a non-static local variable is ignored</li>
<li>warning: 'mig_server_routine' attribute only applies to routines that return a kern_return_t</li>
<li>warning: 'nocf_check' attribute ignored; use -fcf-protection to enable the attribute</li>
<li>warning: 'noderef' can only be used on an array or pointer type</li>
<li>warning: 'nonnull' attribute applied to function with no pointer arguments</li>
<li>warning: 'nonnull' attribute when used on parameters takes no arguments</li>
<li>warning: 'nothrow' attribute conflicts with exception specification; attribute ignored</li>
<li>warning: 'objc_externally_retained' can only be applied to local variables %select{of retainable type|with strong ownership}0</li>
<li>warning: 'sentinel' attribute only supported for variadic %select{functions|blocks}0</li>
<li>warning: 'sentinel' attribute requires named arguments</li>
<li>warning: 'trivial_abi' cannot be applied to %0</li>
<li>warning: Objective-C GC does not allow weak variables on the stack</li>
<li>warning: __declspec attribute %0 is not supported</li>
<li>warning: __weak attribute cannot be specified on a field declaration</li>
<li>warning: __weak attribute cannot be specified on an automatic variable when ARC is not enabled</li>
<li>warning: attribute %0 after definition is ignored</li>
<li>warning: attribute %0 cannot be applied to %select{functions|Objective-C method}1 without return value</li>
<li>warning: attribute %0 ignored, because it cannot be applied to a type</li>
<li>warning: attribute %0 ignored, because it cannot be applied to omitted return type</li>
<li>warning: attribute %0 ignored, because it is not attached to a declaration</li>
<li>warning: attribute %0 is already applied</li>
<li>warning: attribute %0 is already applied with different parameters</li>
<li>warning: attribute %0 is ignored, place it after "%select{class|struct|interface|union|enum}1" to apply attribute to type declaration</li>
<li>warning: attribute declaration must precede definition</li>
<li>warning: first field of a transparent union cannot have %select{floating point|vector}0 type %1; transparent_union attribute ignored</li>
<li>warning: ignoring __declspec(allocator) because the function return type %0 is not a pointer or reference type</li>
<li>warning: inheritance model ignored on %select{primary template|partial specialization}0</li>
<li>warning: qualifiers after comma in declarator list are ignored</li>
<li>warning: repeated RISC-V 'interrupt' attribute</li>
<li>warning: transparent union definition must contain at least one field; transparent_union attribute ignored</li>
<li>warning: transparent_union attribute can only be applied to a union definition; attribute ignored</li>
<li>warning: unknown attribute '%0'</li>
<li>warning: unknown visibility %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-attributes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-optimization-argument</key>
  <name>clang-diagnostic-ignored-optimization-argument</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: optimization flag '%0' is not supported</li>
<li>warning: optimization flag '%0' is not supported for target '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-optimization-argument" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-pragma-intrinsic</key>
  <name>clang-diagnostic-ignored-pragma-intrinsic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragma-intrinsic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-pragma-optimize</key>
  <name>clang-diagnostic-ignored-pragma-optimize</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '#pragma optimize' is not supported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragma-optimize" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-pragmas</key>
  <name>clang-diagnostic-ignored-pragmas</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma %0(pop, ...) failed: %1</li>
<li>warning: #pragma options align=reset failed: %0</li>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
<li>warning: '#pragma comment %0' ignored</li>
<li>warning: '#pragma init_seg' is only supported when targeting a Microsoft environment</li>
<li>warning: '#pragma optimize' is not supported</li>
<li>warning: OpenCL extension end directive mismatches begin directive - ignoring</li>
<li>warning: expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</li>
<li>warning: expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring</li>
<li>warning: expected '#pragma unused' argument to be a variable name</li>
<li>warning: expected ')' or ',' in '#pragma %0'</li>
<li>warning: expected ',' in '#pragma %0'</li>
<li>warning: expected '=' following '#pragma %select{align|options align}0' - ignored</li>
<li>warning: expected 'align' following '#pragma options' - ignored</li>
<li>warning: expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a stack label or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected action or ')' in '#pragma %0' - ignored</li>
<li>warning: expected identifier in '#pragma %0' - ignored</li>
<li>warning: expected integer between %0 and %1 inclusive in '#pragma %2' - ignored</li>
<li>warning: expected integer or identifier in '#pragma pack' - ignored</li>
<li>warning: expected non-wide string literal in '#pragma %0'</li>
<li>warning: expected push, pop or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected string literal in '#pragma %0' - ignoring</li>
<li>warning: extra tokens at end of '#pragma %0' - ignored</li>
<li>warning: incorrect use of #pragma clang force_cuda_host_device begin|end</li>
<li>warning: incorrect use of '#pragma ms_struct on|off' - ignored</li>
<li>warning: invalid alignment option in '#pragma %select{align|options align}0' - ignored</li>
<li>warning: known but unsupported action '%1' for '#pragma %0' - ignored</li>
<li>warning: missing '(' after '#pragma %0' - ignoring</li>
<li>warning: missing ')' after '#pragma %0' - ignoring</li>
<li>warning: missing ':' after %0 - ignoring</li>
<li>warning: missing ':' or ')' after %0 - ignoring</li>
<li>warning: missing argument to '#pragma %0'%select{|; expected %2}1</li>
<li>warning: missing argument to debug command '%0'</li>
<li>warning: only variables can be arguments to '#pragma unused'</li>
<li>warning: pragma pop_macro could not pop '%0', no matching push_macro</li>
<li>warning: undeclared variable %0 used as an argument for '#pragma unused'</li>
<li>warning: unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2</li>
<li>warning: unexpected debug command '%0'</li>
<li>warning: unknown OpenCL extension %0 - ignoring</li>
<li>warning: unknown action '%1' for '#pragma %0' - ignored</li>
<li>warning: unknown action for '#pragma %0' - ignored</li>
<li>warning: unknown module '%0'</li>
<li>warning: unsupported OpenCL extension %0 - ignoring</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-pragmas" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ignored-qualifiers</key>
  <name>clang-diagnostic-ignored-qualifiers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' qualifier on function type %1 has no effect</li>
<li>warning: '%0' qualifier on omitted return type %1 has no effect</li>
<li>warning: '%0' qualifier on reference type %1 has no effect</li>
<li>warning: '%0' type qualifier%s1 on return type %plural{1:has|:have}1 no effect</li>
<li>warning: ARC %select{unused|__unsafe_unretained|__strong|__weak|__autoreleasing}0 lifetime qualifier on return type is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wignored-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit</key>
  <name>clang-diagnostic-implicit</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicit declaration of function %0 is invalid in C99</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: use of unknown builtin %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-atomic-properties</key>
  <name>clang-diagnostic-implicit-atomic-properties</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property is assumed atomic by default</li>
<li>warning: property is assumed atomic when auto-synthesizing the property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-atomic-properties" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-conversion-floating-point-to-bool</key>
  <name>clang-diagnostic-implicit-conversion-floating-point-to-bool</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion turns floating-point number into bool: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-conversion-floating-point-to-bool" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-exception-spec-mismatch</key>
  <name>clang-diagnostic-implicit-exception-spec-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function previously declared with an %select{explicit|implicit}0 exception specification redeclared with an %select{implicit|explicit}0 exception specification</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-exception-spec-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-fallthrough</key>
  <name>clang-diagnostic-implicit-fallthrough</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: fallthrough annotation in unreachable code</li>
<li>warning: unannotated fall-through between switch labels</li>
<li>warning: unannotated fall-through between switch labels in partly-annotated function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fallthrough" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-fallthrough-per-function</key>
  <name>clang-diagnostic-implicit-fallthrough-per-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unannotated fall-through between switch labels in partly-annotated function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fallthrough-per-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-function-declaration</key>
  <name>clang-diagnostic-implicit-function-declaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicit declaration of function %0 is invalid in C99</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: use of unknown builtin %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-function-declaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-int</key>
  <name>clang-diagnostic-implicit-int</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: type specifier missing, defaults to 'int'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-int" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicit-retain-self</key>
  <name>clang-diagnostic-implicit-retain-self</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: block implicitly retains 'self'; explicitly mention 'self' to indicate this is intended behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-retain-self" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-implicitly-unsigned-literal</key>
  <name>clang-diagnostic-implicitly-unsigned-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: integer literal is too large to be represented in a signed integer type, interpreting as unsigned</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicitly-unsigned-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-import-preprocessor-directive-pedantic</key>
  <name>clang-diagnostic-import-preprocessor-directive-pedantic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #import is a language extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimport-preprocessor-directive-pedantic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inaccessible-base</key>
  <name>clang-diagnostic-inaccessible-base</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: direct base %0 is inaccessible due to ambiguity:%1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winaccessible-base" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-include-next-absolute-path</key>
  <name>clang-diagnostic-include-next-absolute-path</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include_next in file found relative to primary source file or found by absolute path; will search from start of include path</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winclude-next-absolute-path" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-include-next-outside-header</key>
  <name>clang-diagnostic-include-next-outside-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include_next in primary source file; will search from start of include path</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winclude-next-outside-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-exception-spec</key>
  <name>clang-diagnostic-incompatible-exception-spec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: exception specifications of %select{return|argument}0 types differ</li>
<li>warning: target exception specification is not superset of source</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-function-pointer-types</key>
  <name>clang-diagnostic-incompatible-function-pointer-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-function-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-library-redeclaration</key>
  <name>clang-diagnostic-incompatible-library-redeclaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible redeclaration of library function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-library-redeclaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-ms-struct</key>
  <name>clang-diagnostic-incompatible-ms-struct</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ms_struct may not produce Microsoft-compatible layouts for classes with base classes or virtual functions</li>
<li>warning: ms_struct may not produce Microsoft-compatible layouts with fundamental data types with sizes that aren't a power of two</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-ms-struct" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-pointer-types</key>
  <name>clang-diagnostic-incompatible-pointer-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</li>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</li>
<li>warning: incompatible function pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-pointer-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-pointer-types-discards-qualifiers</key>
  <name>clang-diagnostic-incompatible-pointer-types-discards-qualifiers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers</li>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 discards qualifiers in nested pointer types</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-pointer-types-discards-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-property-type</key>
  <name>clang-diagnostic-incompatible-property-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property type %0 is incompatible with type %1 inherited from %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-property-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incompatible-sysroot</key>
  <name>clang-diagnostic-incompatible-sysroot</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using sysroot for '%0' but targeting '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincompatible-sysroot" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incomplete-framework-module-declaration</key>
  <name>clang-diagnostic-incomplete-framework-module-declaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: skipping '%0' because module declaration of '%1' lacks the 'framework' qualifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-framework-module-declaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incomplete-implementation</key>
  <name>clang-diagnostic-incomplete-implementation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method definition for %0 not found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-implementation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incomplete-module</key>
  <name>clang-diagnostic-incomplete-module</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
<li>warning: include of non-modular header inside module '%0': '%1'</li>
<li>warning: missing submodule '%0'</li>
<li>warning: umbrella directory '%0' not found</li>
<li>warning: umbrella header for module '%0' does not include header '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-module" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-incomplete-umbrella</key>
  <name>clang-diagnostic-incomplete-umbrella</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: missing submodule '%0'</li>
<li>warning: umbrella directory '%0' not found</li>
<li>warning: umbrella header for module '%0' does not include header '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincomplete-umbrella" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inconsistent-dllimport</key>
  <name>clang-diagnostic-inconsistent-dllimport</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %q0 redeclared without %1 attribute: previous %1 ignored</li>
<li>warning: %q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-dllimport" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inconsistent-missing-destructor-override</key>
  <name>clang-diagnostic-inconsistent-missing-destructor-override</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 overrides a destructor but is not marked 'override'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-missing-destructor-override" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inconsistent-missing-override</key>
  <name>clang-diagnostic-inconsistent-missing-override</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 overrides a member function but is not marked 'override'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winconsistent-missing-override" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-increment-bool</key>
  <name>clang-diagnostic-increment-bool</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++17 does not allow incrementing expression of type bool</li>
<li>warning: incrementing expression of type bool is deprecated and incompatible with C++17</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wincrement-bool" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-infinite-recursion</key>
  <name>clang-diagnostic-infinite-recursion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: all paths through this function will call itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winfinite-recursion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-initializer-overrides</key>
  <name>clang-diagnostic-initializer-overrides</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: initializer overrides prior initialization of this subobject</li>
<li>warning: subobject initialization overrides initialization of other fields within its enclosing subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winitializer-overrides" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-injected-class-name</key>
  <name>clang-diagnostic-injected-class-name</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ specifies that qualified reference to %0 is a constructor name rather than a %select{template name|type}1 in this context, despite preceding %select{'typename'|'template'}2 keyword</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winjected-class-name" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inline-asm</key>
  <name>clang-diagnostic-inline-asm</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winline-asm" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-inline-new-delete</key>
  <name>clang-diagnostic-inline-new-delete</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: replacement function %0 cannot be declared 'inline'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winline-new-delete" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-instantiation-after-specialization</key>
  <name>clang-diagnostic-instantiation-after-specialization</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicit instantiation of %0 that occurs after an explicit specialization has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winstantiation-after-specialization" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-int-conversion</key>
  <name>clang-diagnostic-int-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-int-conversions</key>
  <name>clang-diagnostic-int-conversions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-conversions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-int-to-pointer-cast</key>
  <name>clang-diagnostic-int-to-pointer-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast to %1 from smaller integer type %0</li>
<li>warning: cast to %1 from smaller integer type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-to-pointer-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-int-to-void-pointer-cast</key>
  <name>clang-diagnostic-int-to-void-pointer-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cast to %1 from smaller integer type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wint-to-void-pointer-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-integer-overflow</key>
  <name>clang-diagnostic-integer-overflow</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overflow in expression; result is %0 with type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winteger-overflow" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-command-line-argument</key>
  <name>clang-diagnostic-invalid-command-line-argument</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no MCU device specified, but '-mhwmult' is set to 'auto', assuming no hardware multiply. Use -mmcu to specify a MSP430 device, or -mhwmult to set hardware multiply type explicitly.</li>
<li>warning: optimization flag '%0' is not supported</li>
<li>warning: optimization flag '%0' is not supported for target '%1'</li>
<li>warning: optimization level '%0' is not supported; using '%1%2' instead</li>
<li>warning: the given MCU does not support hardware multiply, but -mhwmult is set to %0.</li>
<li>warning: the given MCU supports %0 hardware multiply, but -mhwmult is set to %1.</li>
<li>warning: the object size sanitizer has no effect at -O0, but is explicitly enabled: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-command-line-argument" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-constexpr</key>
  <name>clang-diagnostic-invalid-constexpr</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: constexpr %select{function|constructor}0 never produces a constant expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-constexpr" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-iboutlet</key>
  <name>clang-diagnostic-invalid-iboutlet</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{instance variable|property}2 with %0 attribute must be an object type (invalid %1)</li>
<li>warning: IBOutletCollection properties should be copy/strong and not assign</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-iboutlet" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-initializer-from-system-header</key>
  <name>clang-diagnostic-invalid-initializer-from-system-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: invalid constructor form class in system header, should not be explicit</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-initializer-from-system-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-ios-deployment-target</key>
  <name>clang-diagnostic-invalid-ios-deployment-target</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: invalid iOS deployment version '%0', iOS 10 is the maximum deployment target for 32-bit targets</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-ios-deployment-target" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-noreturn</key>
  <name>clang-diagnostic-invalid-noreturn</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function %0 declared 'noreturn' should not return</li>
<li>warning: function declared 'noreturn' should not return</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-noreturn" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-offsetof</key>
  <name>clang-diagnostic-invalid-offsetof</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: offset of on non-POD type %0</li>
<li>warning: offset of on non-standard-layout type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-offsetof" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-or-nonexistent-directory</key>
  <name>clang-diagnostic-invalid-or-nonexistent-directory</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: environment variable SCE_ORBIS_SDK_DIR is set, but points to invalid or nonexistent directory '%0'</li>
<li>warning: unable to find %0 directory, expected to be in '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-or-nonexistent-directory" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-partial-specialization</key>
  <name>clang-diagnostic-invalid-partial-specialization</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|variable}0 template partial specialization is not more specialized than the primary template</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-partial-specialization" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-pp-token</key>
  <name>clang-diagnostic-invalid-pp-token</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: empty character constant</li>
<li>warning: missing terminating %select{'|'"'}0 character</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-pp-token" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-source-encoding</key>
  <name>clang-diagnostic-invalid-source-encoding</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: illegal character encoding in character literal</li>
<li>warning: illegal character encoding in string literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-source-encoding" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-invalid-token-paste</key>
  <name>clang-diagnostic-invalid-token-paste</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: pasting formed '%0', an invalid preprocessing token</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#winvalid-token-paste" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-jump-seh-finally</key>
  <name>clang-diagnostic-jump-seh-finally</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: jump out of __finally block has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wjump-seh-finally" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-keyword-compat</key>
  <name>clang-diagnostic-keyword-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: keyword '%0' will be made available as an identifier %select{here|for the remainder of the translation unit}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wkeyword-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-keyword-macro</key>
  <name>clang-diagnostic-keyword-macro</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: keyword is hidden by macro definition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wkeyword-macro" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-knr-promoted-parameter</key>
  <name>clang-diagnostic-knr-promoted-parameter</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %diff{promoted type $ of K&amp;R function parameter is not compatible with the parameter type $|promoted type of K&amp;R function parameter is not compatible with parameter type}0,1 declared in a previous prototype</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wknr-promoted-parameter" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-language-extension-token</key>
  <name>clang-diagnostic-language-extension-token</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extension used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlanguage-extension-token" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-large-by-value-copy</key>
  <name>clang-diagnostic-large-by-value-copy</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is a large (%1 bytes) pass-by-value argument; pass it by reference instead ?</li>
<li>warning: return value of %0 is a large (%1 bytes) pass-by-value object; pass it by reference instead ?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlarge-by-value-copy" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-literal-conversion</key>
  <name>clang-diagnostic-literal-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wliteral-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-literal-range</key>
  <name>clang-diagnostic-literal-range</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: magnitude of floating-point constant too large for type %0; maximum is %1</li>
<li>warning: magnitude of floating-point constant too small for type %0; minimum is %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wliteral-range" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-local-type-template-args</key>
  <name>clang-diagnostic-local-type-template-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: local type %0 as template argument is incompatible with C++98</li>
<li>warning: template argument uses local type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlocal-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-logical-not-parentheses</key>
  <name>clang-diagnostic-logical-not-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlogical-not-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-logical-op-parentheses</key>
  <name>clang-diagnostic-logical-op-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '&amp;&amp;' within '||'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlogical-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-long-long</key>
  <name>clang-diagnostic-long-long</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'long long' is a C++11 extension</li>
<li>warning: 'long long' is an extension when C99 mode is not enabled</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wlong-long" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-loop-analysis</key>
  <name>clang-diagnostic-loop-analysis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 %diff{has type $ but is initialized with type $| is initialized with a value of a different type}1,2 resulting in a copy</li>
<li>warning: loop variable %0 is always a copy because the range of type %1 does not return a reference</li>
<li>warning: loop variable %0 of type %1 creates a copy from type %2</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wloop-analysis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-macro-redefined</key>
  <name>clang-diagnostic-macro-redefined</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 macro redefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmacro-redefined" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-main</key>
  <name>clang-diagnostic-main</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'main' is not allowed to be declared _Noreturn</li>
<li>warning: 'main' is not allowed to be declared variadic</li>
<li>warning: 'main' should not be declared static</li>
<li>warning: ISO C++ does not allow 'main' to be used by a program</li>
<li>warning: bool literal returned from 'main'</li>
<li>warning: only one parameter on 'main' declaration</li>
<li>warning: variable named 'main' with external linkage has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmain" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-main-return-type</key>
  <name>clang-diagnostic-main-return-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: return type of 'main' is not 'int'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmain-return-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-malformed-warning-check</key>
  <name>clang-diagnostic-malformed-warning-check</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: __has_warning expected option name (e.g. "-Wundef")</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmalformed-warning-check" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-many-braces-around-scalar-init</key>
  <name>clang-diagnostic-many-braces-around-scalar-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: too many braces around scalar initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmany-braces-around-scalar-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-max-unsigned-zero</key>
  <name>clang-diagnostic-max-unsigned-zero</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: taking the max of %select{a value and unsigned zero|unsigned zero and a value}0 is always equal to the other value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmax-unsigned-zero" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-memset-transposed-args</key>
  <name>clang-diagnostic-memset-transposed-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmemset-transposed-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-memsize-comparison</key>
  <name>clang-diagnostic-memsize-comparison</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: size argument in %0 call is a comparison</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmemsize-comparison" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-method-signatures</key>
  <name>clang-diagnostic-method-signatures</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting parameter types in implementation of %0: %1 vs %2</li>
<li>warning: conflicting return type in implementation of %0: %1 vs %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmethod-signatures" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft</key>
  <name>clang-diagnostic-microsoft</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
<li>warning: %0 is missing exception specification '%1'</li>
<li>warning: %q0 redeclared without %1 attribute: previous %1 ignored</li>
<li>warning: %q0 redeclared without 'dllimport' attribute: 'dllexport' attribute added</li>
<li>warning: %select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension</li>
<li>warning: %select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</li>
<li>warning: 'mutable' on a reference type is a Microsoft extension</li>
<li>warning: 'sealed' keyword is a Microsoft extension</li>
<li>warning: 'static' can only be specified inside the class definition</li>
<li>warning: C++ operator %0 (aka %1) used as a macro name</li>
<li>warning: anonymous %select{structs|unions}0 are a Microsoft extension</li>
<li>warning: charizing operator #@ is a Microsoft extension</li>
<li>warning: default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension</li>
<li>warning: duplicate explicit instantiation of %0 ignored as a Microsoft extension</li>
<li>warning: enumeration types with a fixed underlying type are a Microsoft extension</li>
<li>warning: enumerator value is not representable in the underlying type %0</li>
<li>warning: exception specification in declaration does not match previous declaration</li>
<li>warning: exception specification in explicit instantiation does not match instantiated one</li>
<li>warning: exception specification of '...' is a Microsoft extension</li>
<li>warning: exception specification of overriding function is more lax than base version</li>
<li>warning: explicit constructor calls are a Microsoft extension</li>
<li>warning: extra qualification on member %0</li>
<li>warning: flexible array member %0 in a union is a Microsoft extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension</li>
<li>warning: forward references to 'enum' types are a Microsoft extension</li>
<li>warning: function definition with pure-specifier is a Microsoft extension</li>
<li>warning: implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: jump from this goto statement to its label is a Microsoft extension</li>
<li>warning: non-type template argument containing a dereference operation is a Microsoft extension</li>
<li>warning: pasting two '/' tokens into a '//' comment is a Microsoft extension</li>
<li>warning: pseudo-destructors on type void are a Microsoft extension</li>
<li>warning: redeclaring non-static %0 as static is a Microsoft extension</li>
<li>warning: redefinition of default argument</li>
<li>warning: static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension</li>
<li>warning: treating Ctrl-Z as end-of-file is a Microsoft extension</li>
<li>warning: types declared in an anonymous %select{struct|union}0 are a Microsoft extension</li>
<li>warning: union member %0 has reference type %1, which is a Microsoft extension</li>
<li>warning: unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</li>
<li>warning: use of identifier %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension</li>
<li>warning: use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension</li>
<li>warning: using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension</li>
<li>warning: using the undeclared type %0 as a default template argument is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-anon-tag</key>
  <name>clang-diagnostic-microsoft-anon-tag</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: anonymous %select{structs|unions}0 are a Microsoft extension</li>
<li>warning: types declared in an anonymous %select{struct|union}0 are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-anon-tag" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-cast</key>
  <name>clang-diagnostic-microsoft-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion between pointer-to-function and pointer-to-object is a Microsoft extension</li>
<li>warning: static_cast between pointer-to-function and pointer-to-object is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-charize</key>
  <name>clang-diagnostic-microsoft-charize</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: charizing operator #@ is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-charize" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-comment-paste</key>
  <name>clang-diagnostic-microsoft-comment-paste</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: pasting two '/' tokens into a '//' comment is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-comment-paste" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-const-init</key>
  <name>clang-diagnostic-microsoft-const-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: default initialization of an object of const type %0%select{| without a user-provided default constructor}1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-const-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-cpp-macro</key>
  <name>clang-diagnostic-microsoft-cpp-macro</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: C++ operator %0 (aka %1) used as a macro name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-cpp-macro" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-default-arg-redefinition</key>
  <name>clang-diagnostic-microsoft-default-arg-redefinition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of default argument</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-default-arg-redefinition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-end-of-file</key>
  <name>clang-diagnostic-microsoft-end-of-file</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: treating Ctrl-Z as end-of-file is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-end-of-file" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-enum-forward-reference</key>
  <name>clang-diagnostic-microsoft-enum-forward-reference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: forward references to 'enum' types are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-enum-forward-reference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-enum-value</key>
  <name>clang-diagnostic-microsoft-enum-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enumerator value is not representable in the underlying type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-enum-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-exception-spec</key>
  <name>clang-diagnostic-microsoft-exception-spec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is missing exception specification '%1'</li>
<li>warning: %select{|pointer to |reference to }0incomplete type %1 is not allowed in exception specification</li>
<li>warning: exception specification in declaration does not match previous declaration</li>
<li>warning: exception specification in explicit instantiation does not match instantiated one</li>
<li>warning: exception specification of '...' is a Microsoft extension</li>
<li>warning: exception specification of overriding function is more lax than base version</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-exists</key>
  <name>clang-diagnostic-microsoft-exists</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: dependent %select{__if_not_exists|__if_exists}0 declarations are ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-exists" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-explicit-constructor-call</key>
  <name>clang-diagnostic-microsoft-explicit-constructor-call</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicit constructor calls are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-explicit-constructor-call" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-extra-qualification</key>
  <name>clang-diagnostic-microsoft-extra-qualification</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: extra qualification on member %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-extra-qualification" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-fixed-enum</key>
  <name>clang-diagnostic-microsoft-fixed-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enumeration types with a fixed underlying type are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-fixed-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-flexible-array</key>
  <name>clang-diagnostic-microsoft-flexible-array</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: flexible array member %0 in a union is a Microsoft extension</li>
<li>warning: flexible array member %0 in otherwise empty %select{struct|interface|union|class|enum}1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-flexible-array" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-goto</key>
  <name>clang-diagnostic-microsoft-goto</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: jump from this goto statement to its label is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-goto" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-inaccessible-base</key>
  <name>clang-diagnostic-microsoft-inaccessible-base</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: accessing inaccessible direct base %0 of %1 is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-inaccessible-base" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-include</key>
  <name>clang-diagnostic-microsoft-include</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-include" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-mutable-reference</key>
  <name>clang-diagnostic-microsoft-mutable-reference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'mutable' on a reference type is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-mutable-reference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-pure-definition</key>
  <name>clang-diagnostic-microsoft-pure-definition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function definition with pure-specifier is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-pure-definition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-redeclare-static</key>
  <name>clang-diagnostic-microsoft-redeclare-static</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redeclaring non-static %0 as static is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-redeclare-static" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-sealed</key>
  <name>clang-diagnostic-microsoft-sealed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'sealed' keyword is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-sealed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-template</key>
  <name>clang-diagnostic-microsoft-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{class template|class template partial|variable template|variable template partial|function template|member function|static data member|member class|member enumeration}0 specialization of %1 not in %select{a namespace enclosing %2|class %2 or an enclosing namespace}3 is a Microsoft extension</li>
<li>warning: 'static' can only be specified inside the class definition</li>
<li>warning: duplicate explicit instantiation of %0 ignored as a Microsoft extension</li>
<li>warning: non-type template argument containing a dereference operation is a Microsoft extension</li>
<li>warning: template argument for template type parameter must be a type; omitted 'typename' is a Microsoft extension</li>
<li>warning: use of identifier %0 found via unqualified lookup into dependent bases of class templates is a Microsoft extension</li>
<li>warning: use of undeclared identifier %0; unqualified lookup into dependent bases of class template %1 is a Microsoft extension</li>
<li>warning: using the undeclared type %0 as a default template argument is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-union-member-reference</key>
  <name>clang-diagnostic-microsoft-union-member-reference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: union member %0 has reference type %1, which is a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-union-member-reference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-unqualified-friend</key>
  <name>clang-diagnostic-microsoft-unqualified-friend</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unqualified friend declaration referring to type outside of the nearest enclosing namespace is a Microsoft extension; add a nested name specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-unqualified-friend" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-using-decl</key>
  <name>clang-diagnostic-microsoft-using-decl</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using declaration referring to inaccessible member '%0' (which refers to accessible member '%1') is a Microsoft compatibility extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-using-decl" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-microsoft-void-pseudo-dtor</key>
  <name>clang-diagnostic-microsoft-void-pseudo-dtor</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: pseudo-destructors on type void are a Microsoft extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmicrosoft-void-pseudo-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-mismatched-new-delete</key>
  <name>clang-diagnostic-mismatched-new-delete</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'delete%select{|[]}0' applied to a pointer that was allocated with 'new%select{[]|}0'; did you mean 'delete%select{[]|}0'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-new-delete" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-mismatched-parameter-types</key>
  <name>clang-diagnostic-mismatched-parameter-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting parameter types in implementation of %0%diff{: $ vs $|}1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-parameter-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-mismatched-return-types</key>
  <name>clang-diagnostic-mismatched-return-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting return type in implementation of %0%diff{: $ vs $|}1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-return-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-mismatched-tags</key>
  <name>clang-diagnostic-mismatched-tags</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmismatched-tags" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-braces</key>
  <name>clang-diagnostic-missing-braces</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: suggest braces around initialization of subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-braces" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-declarations</key>
  <name>clang-diagnostic-missing-declarations</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' ignored on this declaration</li>
<li>warning: '%0' is not permitted on a declaration of a type</li>
<li>warning: declaration does not declare anything</li>
<li>warning: typedef requires a name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-declarations" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-exception-spec</key>
  <name>clang-diagnostic-missing-exception-spec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is missing exception specification '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-exception-spec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-field-initializers</key>
  <name>clang-diagnostic-missing-field-initializers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: missing field %0 initializer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-field-initializers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-method-return-type</key>
  <name>clang-diagnostic-missing-method-return-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method has no return type specified; defaults to 'id'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-method-return-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-noescape</key>
  <name>clang-diagnostic-missing-noescape</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: parameter of overriding method should be annotated with __attribute__((noescape))</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-noescape" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-noreturn</key>
  <name>clang-diagnostic-missing-noreturn</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|method}0 %1 could be declared with attribute 'noreturn'</li>
<li>warning: block could be declared with attribute 'noreturn'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-noreturn" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-prototype-for-cc</key>
  <name>clang-diagnostic-missing-prototype-for-cc</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function with no prototype cannot use the %0 calling convention</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototype-for-cc" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-prototypes</key>
  <name>clang-diagnostic-missing-prototypes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no previous prototype for function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-prototypes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-selector-name</key>
  <name>clang-diagnostic-missing-selector-name</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 used as the name of the previous parameter rather than as part of the selector</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-selector-name" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-sysroot</key>
  <name>clang-diagnostic-missing-sysroot</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no such sysroot directory: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-sysroot" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-missing-variable-declarations</key>
  <name>clang-diagnostic-missing-variable-declarations</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no previous extern declaration for non-static variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmissing-variable-declarations" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-module-build</key>
  <name>clang-diagnostic-module-build</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: building module '%0' as '%1'</li>
<li>remark: could not acquire lock file for module '%0': %1</li>
<li>remark: finished building module '%0'</li>
<li>remark: timed out waiting to acquire lock file for module '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-build" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-module-conflict</key>
  <name>clang-diagnostic-module-conflict</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: module '%0' conflicts with already-imported module '%1': %2</li>
<li>warning: module file '%0' was validated as a system module and is now being imported as a non-system module; any difference in diagnostic options will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-conflict" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-module-file-config-mismatch</key>
  <name>clang-diagnostic-module-file-config-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: module file %0 cannot be loaded due to a configuration mismatch with the current compilation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-file-config-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-module-file-extension</key>
  <name>clang-diagnostic-module-file-extension</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: duplicate module file extension block name '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-file-extension" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-module-import-in-extern-c</key>
  <name>clang-diagnostic-module-import-in-extern-c</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: import of C++ module '%0' appears within extern "C" language linkage specification</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodule-import-in-extern-c" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-modules-ambiguous-internal-linkage</key>
  <name>clang-diagnostic-modules-ambiguous-internal-linkage</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ambiguous use of internal linkage declaration %0 defined in multiple modules</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodules-ambiguous-internal-linkage" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-modules-import-nested-redundant</key>
  <name>clang-diagnostic-modules-import-nested-redundant</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redundant #include of module '%0' appears within %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmodules-import-nested-redundant" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-most</key>
  <name>clang-diagnostic-most</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0</li>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %2 defined as %select{a struct|an interface|a class}0%select{| template}1 here but previously declared as %select{a struct|an interface|a class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{field width|precision}0 used with '%1' conversion specifier, resulting in undefined behavior</li>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: %select{struct|interface|class}0%select{| template}1 %2 was previously declared as a %select{struct|interface|class}3%select{| template}1; this is valid, but may result in linker errors under the Microsoft C++ ABI</li>
<li>warning: %select{values of type|enum values with underlying type}2 '%0' should not be used as format arguments; add an explicit cast to %1 instead</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: %select{|empty }0%select{struct|union}1 has size 0 in C, %select{size 1|non-zero size}2 in C++</li>
<li>warning: '%0' is not a valid object format flag</li>
<li>warning: '%select{*|.*}0' specified field %select{width|precision}0 is missing a matching 'int' argument</li>
<li>warning: '/*' within block comment</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: // comments are not allowed in this language</li>
<li>warning: adding %0 to a string does not append to the string</li>
<li>warning: all paths through this function will call itself</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: array section %select{lower bound|length}0 is of type 'char'</li>
<li>warning: array subscript is of type 'char'</li>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: cannot mix positional and non-positional arguments in format string</li>
<li>warning: cast of type %0 to %1 is deprecated; use sel_getName instead</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: control may reach end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control may reach end of non-void function</li>
<li>warning: control may reach end of non-void lambda</li>
<li>warning: control reaches end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control reaches end of non-void function</li>
<li>warning: control reaches end of non-void lambda</li>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: data argument not used by format string</li>
<li>warning: data argument position '%0' exceeds the number of data arguments (%1)</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: escaped newline between */ characters at block comment end</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
<li>warning: field %select{width|precision}0 should have type %1, but argument has type %2</li>
<li>warning: flag '%0' is ignored when flag '%1' is present</li>
<li>warning: flag '%0' results in undefined behavior with '%1' conversion specifier</li>
<li>warning: format specifies type %0 but the argument has %select{type|underlying type}2 %1</li>
<li>warning: format string contains '\0' within the string body</li>
<li>warning: format string is empty</li>
<li>warning: format string is not a string literal (potentially insecure)</li>
<li>warning: format string is not null-terminated</li>
<li>warning: format string missing</li>
<li>warning: format string should not be a wide string</li>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: implicit declaration of function %0</li>
<li>warning: implicit declaration of function %0 is invalid in C99</li>
<li>warning: implicitly declaring library function '%0' with type %1</li>
<li>warning: incomplete format specifier</li>
<li>warning: invalid conversion specifier '%0'</li>
<li>warning: invalid position specified for %select{field width|field precision}0</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: length modifier '%0' results in undefined behavior or no effect with '%1' conversion specifier</li>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
<li>warning: method possibly missing a [super %0] call</li>
<li>warning: missing object format flag</li>
<li>warning: more '%%' conversions than data arguments</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: multi-character character constant</li>
<li>warning: multi-line // comment</li>
<li>warning: no closing ']' for '%%[' in scanf format string</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
<li>warning: object format flags cannot be used with '%0' conversion specifier</li>
<li>warning: position arguments in format strings start counting at 1 (not 0)</li>
<li>warning: pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: private field %0 is not used</li>
<li>warning: redundant move in return statement</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: suggest braces around initialization of subobject</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
<li>warning: type specifier missing, defaults to 'int'</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
<li>warning: use of unknown builtin %0</li>
<li>warning: using '%%P' format specifier without precision</li>
<li>warning: using '%0' format specifier annotation outside of os_log()/os_trace()</li>
<li>warning: variable %0 is %select{decremented|incremented}1 both in the loop header and in the loop body</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
<li>warning: variable%select{s| %1|s %1 and %2|s %1, %2, and %3|s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</li>
<li>warning: zero field width in scanf format string is unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmost" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-move</key>
  <name>clang-diagnostic-move</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicitly moving variable of type %0 to itself</li>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
<li>warning: redundant move in return statement</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmove" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-msvc-include</key>
  <name>clang-diagnostic-msvc-include</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #include resolved using non-portable Microsoft search rules as: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmsvc-include" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-msvc-not-found</key>
  <name>clang-diagnostic-msvc-not-found</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unable to find a Visual Studio installation; try running Clang from a developer command prompt</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmsvc-not-found" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-multichar</key>
  <name>clang-diagnostic-multichar</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multi-character character constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmultichar" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-multiple-move-vbase</key>
  <name>clang-diagnostic-multiple-move-vbase</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wmultiple-move-vbase" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-narrowing</key>
  <name>clang-diagnostic-narrowing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{case value|enumerator value|non-type template argument|array size|constexpr if condition|explicit specifier argument}0 %select{cannot be narrowed from type %2 to %3|evaluates to %2, which cannot be narrowed to type %3}1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1</li>
<li>warning: constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list</li>
<li>warning: non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list</li>
<li>warning: type %0 cannot be narrowed to %1 in initializer list in C++11</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnarrowing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nested-anon-types</key>
  <name>clang-diagnostic-nested-anon-types</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: anonymous types declared in an anonymous %select{struct|union}0 are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnested-anon-types" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-new-returns-null</key>
  <name>clang-diagnostic-new-returns-null</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 should not return a null pointer unless it is declared 'throw()'%select{| or 'noexcept'}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnew-returns-null" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-newline-eof</key>
  <name>clang-diagnostic-newline-eof</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no newline at end of file</li>
<li>warning: no newline at end of file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnewline-eof" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-noexcept-type</key>
  <name>clang-diagnostic-noexcept-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: mangled name of %0 will change in C++17 due to non-throwing exception specification in function signature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnoexcept-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-gcc</key>
  <name>clang-diagnostic-non-gcc</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: assigning value of signed enum type %1 to unsigned bit-field %0; negative enumerators of enum %1 will be converted to positive values</li>
<li>warning: bit-field %0 is not wide enough to store all enumerators of %1</li>
<li>warning: comparison of integers of different signs: %0 and %1</li>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: implicit conversion discards imaginary component: %0 to %1</li>
<li>warning: implicit conversion from %0 to %1 changes non-zero value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %0 to %1 changes value from %2 to %3</li>
<li>warning: implicit conversion from %2 to %3 changes value from %0 to %1</li>
<li>warning: implicit conversion from enumeration type %0 to different enumeration type %1</li>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion of out of range value from %0 to %1 is undefined</li>
<li>warning: implicit conversion turns floating-point number into integer: %0 to %1</li>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
<li>warning: implicit conversion turns vector to scalar: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
<li>warning: implicit truncation from %2 to bit-field changes value from %0 to %1</li>
<li>warning: incompatible integer to pointer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: incompatible pointer to integer conversion %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2%select{|; dereference with *|; take the address with &amp;|; remove *|; remove &amp;}3</li>
<li>warning: initialization of pointer of type %0 to null from a constant boolean expression</li>
<li>warning: magnitude of floating-point constant too large for type %0; maximum is %1</li>
<li>warning: magnitude of floating-point constant too small for type %0; minimum is %1</li>
<li>warning: non-type template argument value '%0' truncated to '%1' for template parameter of type %2</li>
<li>warning: non-type template argument with value '%0' converted to '%1' for unsigned template parameter of type %2</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: passing non-generic address space pointer to %0 may cause dynamic conversion affecting performance</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: signed bit-field %0 needs an extra bit to represent the largest positive enumerators of %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-gcc" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-literal-null-conversion</key>
  <name>clang-diagnostic-non-literal-null-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expression which evaluates to zero treated as a null pointer constant of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-literal-null-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-modular-include-in-framework-module</key>
  <name>clang-diagnostic-non-modular-include-in-framework-module</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-modular-include-in-framework-module" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-modular-include-in-module</key>
  <name>clang-diagnostic-non-modular-include-in-module</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: include of non-modular header inside framework module '%0': '%1'</li>
<li>warning: include of non-modular header inside module '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-modular-include-in-module" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-pod-varargs</key>
  <name>clang-diagnostic-non-pod-varargs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cannot pass %select{non-POD|non-trivial}0 object of type %1 to variadic %select{function|block|method|constructor}2; expected type from format string was %3</li>
<li>warning: cannot pass object of %select{non-POD|non-trivial}0 type %1 through variadic %select{function|block|method|constructor}2; call will abort at runtime</li>
<li>warning: second argument to 'va_arg' is of ARC ownership-qualified type %0</li>
<li>warning: second argument to 'va_arg' is of non-POD type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-pod-varargs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-non-virtual-dtor</key>
  <name>clang-diagnostic-non-virtual-dtor</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnon-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nonnull</key>
  <name>clang-diagnostic-nonnull</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: null passed to a callee that requires a non-null argument</li>
<li>warning: null returned from %select{function|method}0 that requires a non-null return value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonnull" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nonportable-include-path</key>
  <name>clang-diagnostic-nonportable-include-path</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: non-portable path to file '%0'; specified path differs in case from file name on disk</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-include-path" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nonportable-system-include-path</key>
  <name>clang-diagnostic-nonportable-system-include-path</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: non-portable path to file '%0'; specified path differs in case from file name on disk</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-system-include-path" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nonportable-vector-initialization</key>
  <name>clang-diagnostic-nonportable-vector-initialization</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: vector initializers are not compatible with NEON intrinsics in big endian mode</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnonportable-vector-initialization" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nontrivial-memaccess</key>
  <name>clang-diagnostic-nontrivial-memaccess</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnontrivial-memaccess" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nsconsumed-mismatch</key>
  <name>clang-diagnostic-nsconsumed-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overriding method has mismatched ns_consumed attribute on its parameter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnsconsumed-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nsreturns-mismatch</key>
  <name>clang-diagnostic-nsreturns-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overriding method has mismatched ns_returns_%select{not_retained|retained}0 attributes</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnsreturns-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-null-arithmetic</key>
  <name>clang-diagnostic-null-arithmetic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison between NULL and non-pointer %select{(%1 and NULL)|(NULL and %1)}0</li>
<li>warning: use of NULL in arithmetic operation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-null-character</key>
  <name>clang-diagnostic-null-character</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: null character ignored</li>
<li>warning: null character(s) preserved in %select{char|string}0 literal</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-character" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-null-conversion</key>
  <name>clang-diagnostic-null-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion of %select{NULL|nullptr}0 constant to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-null-dereference</key>
  <name>clang-diagnostic-null-dereference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: binding dereferenced null pointer to reference has undefined behavior</li>
<li>warning: indirection of non-volatile null pointer will be deleted, not trap</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-dereference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-null-pointer-arithmetic</key>
  <name>clang-diagnostic-null-pointer-arithmetic</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on a null pointer treated as a cast from integer to pointer is a GNU extension</li>
<li>warning: performing pointer arithmetic on a null pointer has undefined behavior%select{| if the offset is nonzero}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnull-pointer-arithmetic" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability</key>
  <name>clang-diagnostic-nullability</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting nullability specifier on parameter types, %0 conflicts with existing specifier %1</li>
<li>warning: conflicting nullability specifier on return types, %0 conflicts with existing specifier %1</li>
<li>warning: duplicate nullability specifier %0</li>
<li>warning: nullability specifier %0 conflicts with existing specifier %1</li>
<li>warning: synthesized setter %0 for null_resettable property %1 does not handle nil</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability-completeness</key>
  <name>clang-diagnostic-nullability-completeness</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{pointer|block pointer|member pointer}0 is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
<li>warning: array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-completeness" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability-completeness-on-arrays</key>
  <name>clang-diagnostic-nullability-completeness-on-arrays</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: array parameter is missing a nullability type specifier (_Nonnull, _Nullable, or _Null_unspecified)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-completeness-on-arrays" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability-declspec</key>
  <name>clang-diagnostic-nullability-declspec</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: nullability specifier %0 cannot be applied to non-pointer type %1; did you mean to apply the specifier to the %select{pointer|block pointer|member pointer|function pointer|member function pointer}2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-declspec" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability-extension</key>
  <name>clang-diagnostic-nullability-extension</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: type nullability specifier %0 is a Clang extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-extension" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullability-inferred-on-nested-type</key>
  <name>clang-diagnostic-nullability-inferred-on-nested-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: inferring '_Nonnull' for pointer type within %select{array|reference}0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullability-inferred-on-nested-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-nullable-to-nonnull-conversion</key>
  <name>clang-diagnostic-nullable-to-nonnull-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from nullable pointer %0 to non-nullable pointer type %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnullable-to-nonnull-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-autosynthesis-property-ivar-name-match</key>
  <name>clang-diagnostic-objc-autosynthesis-property-ivar-name-match</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: autosynthesized property %0 will use %select{|synthesized}1 instance variable %2, not existing instance variable %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-autosynthesis-property-ivar-name-match" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-circular-container</key>
  <name>clang-diagnostic-objc-circular-container</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to %1 might cause circular dependency in container</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-circular-container" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-cocoa-api</key>
  <name>clang-diagnostic-objc-cocoa-api</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-cocoa-api" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-designated-initializers</key>
  <name>clang-diagnostic-objc-designated-initializers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: convenience initializer missing a 'self' call to another initializer</li>
<li>warning: convenience initializer should not invoke an initializer on 'super'</li>
<li>warning: designated initializer invoked a non-designated initializer</li>
<li>warning: designated initializer missing a 'super' call to a designated initializer of the super class</li>
<li>warning: designated initializer should only invoke a designated initializer on 'super'</li>
<li>warning: method override for the designated initializer of the superclass %objcinstance0 not found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-designated-initializers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-flexible-array</key>
  <name>clang-diagnostic-objc-flexible-array</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: field %0 can overwrite instance variable %1 with variable sized type %2 in superclass %3</li>
<li>warning: field %0 with variable sized type %1 is not visible to subclasses and can conflict with their instance variables</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-flexible-array" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-forward-class-redefinition</key>
  <name>clang-diagnostic-objc-forward-class-redefinition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of forward class %0 of a typedef name of an object type is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-forward-class-redefinition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-interface-ivars</key>
  <name>clang-diagnostic-objc-interface-ivars</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration of instance variables in the interface is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-interface-ivars" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-literal-compare</key>
  <name>clang-diagnostic-objc-literal-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: direct comparison of %select{an array literal|a dictionary literal|a numeric literal|a boxed expression|}0 has undefined behavior</li>
<li>warning: direct comparison of a string literal has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-literal-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-literal-conversion</key>
  <name>clang-diagnostic-objc-literal-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit boolean conversion of Objective-C object literal always evaluates to true</li>
<li>warning: object of type %0 is not compatible with %select{array element type|dictionary key type|dictionary value type}1 %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-literal-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-macro-redefinition</key>
  <name>clang-diagnostic-objc-macro-redefinition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring redefinition of Objective-C qualifier macro</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-macro-redefinition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-messaging-id</key>
  <name>clang-diagnostic-objc-messaging-id</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: messaging unqualified id</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-messaging-id" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-method-access</key>
  <name>clang-diagnostic-objc-method-access</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: class method %objcclass0 not found (return type defaults to 'id')</li>
<li>warning: class method %objcclass0 not found (return type defaults to 'id'); did you mean %objcclass2?</li>
<li>warning: instance method %0 found instead of class method %1</li>
<li>warning: instance method %0 is being used on 'Class' which is not in the root class</li>
<li>warning: instance method %objcinstance0 not found (return type defaults to 'id')</li>
<li>warning: instance method %objcinstance0 not found (return type defaults to 'id'); did you mean %objcinstance2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-method-access" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-missing-property-synthesis</key>
  <name>clang-diagnostic-objc-missing-property-synthesis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis is synthesizing property not explicitly synthesized</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-missing-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-missing-super-calls</key>
  <name>clang-diagnostic-objc-missing-super-calls</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method possibly missing a [super %0] call</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-missing-super-calls" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-multiple-method-names</key>
  <name>clang-diagnostic-objc-multiple-method-names</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple methods named %0 found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-multiple-method-names" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-noncopy-retain-block-property</key>
  <name>clang-diagnostic-objc-noncopy-retain-block-property</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: retain'ed block property does not copy the block - use copy attribute instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-noncopy-retain-block-property" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-nonunified-exceptions</key>
  <name>clang-diagnostic-objc-nonunified-exceptions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: cannot catch an exception thrown with @throw in C++ in the non-unified exception model</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-nonunified-exceptions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-assign-on-object-type</key>
  <name>clang-diagnostic-objc-property-assign-on-object-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'assign' property of object type may become a dangling reference; consider using 'unsafe_unretained'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-assign-on-object-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-implementation</key>
  <name>clang-diagnostic-objc-property-implementation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</li>
<li>warning: class property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this class implementation</li>
<li>warning: property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</li>
<li>warning: property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-implementation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-implicit-mismatch</key>
  <name>clang-diagnostic-objc-property-implicit-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: primary property declaration is implicitly strong while redeclaration in class extension is weak</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-implicit-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-matches-cocoa-ownership-rule</key>
  <name>clang-diagnostic-objc-property-matches-cocoa-ownership-rule</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property follows Cocoa naming convention for returning 'owned' objects</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-matches-cocoa-ownership-rule" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-no-attribute</key>
  <name>clang-diagnostic-objc-property-no-attribute</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: default property attribute 'assign' not appropriate for object</li>
<li>warning: no 'assign', 'retain', or 'copy' attribute is specified - 'assign' is assumed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-no-attribute" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-property-synthesis</key>
  <name>clang-diagnostic-objc-property-synthesis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis will not synthesize property %0 because it cannot share an ivar with another synthesized property</li>
<li>warning: auto property synthesis will not synthesize property %0 because it is 'readwrite' but it will be synthesized 'readonly' via another property</li>
<li>warning: auto property synthesis will not synthesize property %0; it will be implemented by its superclass, use @dynamic to acknowledge intention</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-protocol-method-implementation</key>
  <name>clang-diagnostic-objc-protocol-method-implementation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: category is implementing a method which will also be implemented by its primary class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-method-implementation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-protocol-property-synthesis</key>
  <name>clang-diagnostic-objc-protocol-property-synthesis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: auto property synthesis will not synthesize property %0 declared in protocol %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-property-synthesis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-protocol-qualifiers</key>
  <name>clang-diagnostic-objc-protocol-qualifiers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: parameterized class %0 already conforms to the protocols listed; did you forget a '*'?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-protocol-qualifiers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-readonly-with-setter-property</key>
  <name>clang-diagnostic-objc-readonly-with-setter-property</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: setter cannot be specified for a readonly property</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-readonly-with-setter-property" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-redundant-api-use</key>
  <name>clang-diagnostic-objc-redundant-api-use</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-redundant-api-use" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-redundant-literal-use</key>
  <name>clang-diagnostic-objc-redundant-literal-use</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: using %0 with a literal is redundant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-redundant-literal-use" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-root-class</key>
  <name>clang-diagnostic-objc-root-class</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: class %0 defined without specifying a base class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-root-class" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-string-compare</key>
  <name>clang-diagnostic-objc-string-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: direct comparison of a string literal has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-string-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-string-concatenation</key>
  <name>clang-diagnostic-objc-string-concatenation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: concatenated NSString literal for an NSArray expression - possibly missing a comma</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-string-concatenation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-objc-unsafe-perform-selector</key>
  <name>clang-diagnostic-objc-unsafe-perform-selector</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is incompatible with selectors that return a %select{struct|union|vector}1 type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-unsafe-perform-selector" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-odr</key>
  <name>clang-diagnostic-odr</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|instance}0 method %1 has a different number of parameters in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 has a parameter with a different types in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 has incompatible result types in different translation units (%2 vs. %3)</li>
<li>warning: %select{class|instance}0 method %1 is variadic in one translation unit and not variadic in another</li>
<li>warning: class %0 has incompatible superclasses</li>
<li>warning: external function %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: external variable %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: external variable %0 defined in multiple translation units</li>
<li>warning: field %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: instance variable %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: non-type template parameter declared with incompatible types in different translation units (%0 vs. %1)</li>
<li>warning: parameter kind mismatch; parameter is %select{not a|a}0 parameter pack</li>
<li>warning: property %0 declared with incompatible types in different translation units (%1 vs. %2)</li>
<li>warning: property %0 is implemented with %select{@synthesize|@dynamic}1 in one translation but %select{@dynamic|@synthesize}1 in another translation unit</li>
<li>warning: property %0 is synthesized to different ivars in different translation units (%1 vs. %2)</li>
<li>warning: template parameter has different kinds in different translation units</li>
<li>warning: template parameter lists have a different number of parameters (%0 vs %1)</li>
<li>warning: type %0 has incompatible definitions in different translation units</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wodr" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-old-style-cast</key>
  <name>clang-diagnostic-old-style-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of old-style cast</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wold-style-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-opencl-unsupported-rgba</key>
  <name>clang-diagnostic-opencl-unsupported-rgba</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: vector component name '%0' is an OpenCL version 2.2 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopencl-unsupported-rgba" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-openmp-clauses</key>
  <name>clang-diagnostic-openmp-clauses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: aligned clause will be ignored because the requested alignment is not a power of 2</li>
<li>warning: allocate directive specifies %select{default|'%1'}0 allocator while previously used %select{default|'%3'}2</li>
<li>warning: allocator with the 'thread' trait access has unspecified behavior on '%0' directive</li>
<li>warning: zero linear step (%0 %select{|and other variables in clause }1should probably be const)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-clauses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-openmp-loop-form</key>
  <name>clang-diagnostic-openmp-loop-form</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: OpenMP loop iteration variable cannot have more than 64 bits size and will be narrowed</li>
<li>warning: initialization clause of OpenMP for loop is not in canonical form ('var = init' or 'T var = init')</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-loop-form" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-openmp-target</key>
  <name>clang-diagnostic-openmp-target</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: No library '%0' found in the default clang lib directory or in LIBRARY_PATH. Expect degraded performance due to no inlining of runtime functions on target devices.</li>
<li>warning: Non-trivial type %0 is mapped, only trivial types are guaranteed to be mapped correctly</li>
<li>warning: The OpenMP offloading target '%0' is similar to target '%1' already specified - will be ignored.</li>
<li>warning: declaration is not declared in any declare target region</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wopenmp-target" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-option-ignored</key>
  <name>clang-diagnostic-option-ignored</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: The '%0' architecture does not support -moutline; flag ignored</li>
<li>warning: auto-vectorization requires HVX, use -mhvx to enable it</li>
<li>warning: ignoring '%0' option as it cannot be used with %select{implicit usage of|}1 -mabicalls and the N64 ABI</li>
<li>warning: ignoring '-mlong-calls' option as it is not currently supported with %select{|the implicit usage of }0-mabicalls</li>
<li>warning: option '%0' was ignored by the PS4 toolchain, using '-fPIC'</li>
<li>warning: option '-ffine-grained-bitfield-accesses' cannot be enabled together with a sanitizer; flag ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woption-ignored" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-ordered-compare-function-pointers</key>
  <name>clang-diagnostic-ordered-compare-function-pointers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ordered comparison of function pointers (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wordered-compare-function-pointers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-out-of-line-declaration</key>
  <name>clang-diagnostic-out-of-line-declaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: out-of-line declaration of a member must be a definition</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wout-of-line-declaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-out-of-scope-function</key>
  <name>clang-diagnostic-out-of-scope-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of out-of-scope declaration of %0%select{| whose type is not compatible with that of an implicit declaration}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wout-of-scope-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-over-aligned</key>
  <name>clang-diagnostic-over-aligned</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wover-aligned" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-overlength-strings</key>
  <name>clang-diagnostic-overlength-strings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: string literal of length %0 exceeds maximum length %1 that %select{C90|ISO C99|C++}2 compilers are required to support</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverlength-strings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-overloaded-shift-op-parentheses</key>
  <name>clang-diagnostic-overloaded-shift-op-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverloaded-shift-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-overloaded-virtual</key>
  <name>clang-diagnostic-overloaded-virtual</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %q0 hides overloaded virtual %select{function|functions}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverloaded-virtual" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-override-module</key>
  <name>clang-diagnostic-override-module</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overriding the module target triple with %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverride-module" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-overriding-method-mismatch</key>
  <name>clang-diagnostic-overriding-method-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: conflicting distributed object modifiers on parameter type in declaration of %0</li>
<li>warning: conflicting distributed object modifiers on return type in declaration of %0</li>
<li>warning: conflicting parameter types in declaration of %0%diff{: $ vs $|}1,2</li>
<li>warning: conflicting parameter types in declaration of %0: %1 vs %2</li>
<li>warning: conflicting return type in declaration of %0%diff{: $ vs $|}1,2</li>
<li>warning: conflicting return type in declaration of %0: %1 vs %2</li>
<li>warning: conflicting variadic declaration of method and its implementation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverriding-method-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-overriding-t-option</key>
  <name>clang-diagnostic-overriding-t-option</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overriding '%0' option with '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverriding-t-option" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-packed</key>
  <name>clang-diagnostic-packed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: packed attribute is unnecessary for %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpacked" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-padded</key>
  <name>clang-diagnostic-padded</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align %4</li>
<li>warning: padding %select{struct|interface|class}0 %1 with %2 %select{byte|bit}3%s2 to align anonymous bit-field</li>
<li>warning: padding size of %0 with %1 %select{byte|bit}2%s1 to alignment boundary</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpadded" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-parentheses</key>
  <name>clang-diagnostic-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has lower precedence than %1; %1 will be evaluated first</li>
<li>warning: '%0' within '%1'</li>
<li>warning: '&amp;&amp;' within '||'</li>
<li>warning: add explicit braces to avoid dangling else</li>
<li>warning: equality comparison with extraneous parentheses</li>
<li>warning: logical not is only applied to the left hand side of this %select{comparison|bitwise operator}0</li>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
<li>warning: operator '?:' has lower precedence than '%0'; '%0' will be evaluated first</li>
<li>warning: overloaded operator %select{&gt;&gt;|&lt;&lt;}0 has higher precedence than comparison operator</li>
<li>warning: using the result of an assignment as a condition without parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wparentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-parentheses-equality</key>
  <name>clang-diagnostic-parentheses-equality</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: equality comparison with extraneous parentheses</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wparentheses-equality" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-partial-availability</key>
  <name>clang-diagnostic-partial-availability</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpartial-availability" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pass</key>
  <name>clang-diagnostic-pass</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pass-analysis</key>
  <name>clang-diagnostic-pass-analysis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
<li>remark: %0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop or by providing the compiler option '-ffast-math'.</li>
<li>remark: %0; allow reordering by specifying '#pragma clang loop vectorize(enable)' before the loop. If the arrays will always be independent specify '#pragma clang loop vectorize(assume_safety)' before the loop or provide the '__restrict__' qualifier with the independent array arguments. Erroneous results will occur if these options are incorrectly applied!</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass-analysis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pass-failed</key>
  <name>clang-diagnostic-pass-failed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpass-failed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pass-missed</key>
  <name>clang-diagnostic-pass-missed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rpass-missed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pch-date-time</key>
  <name>clang-diagnostic-pch-date-time</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{precompiled header|module}0 uses __DATE__ or __TIME__</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpch-date-time" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pedantic-core-features</key>
  <name>clang-diagnostic-pedantic-core-features</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: OpenCL extension %0 is core feature or supported optional core feature - ignoring</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpedantic-core-features" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pessimizing-move</key>
  <name>clang-diagnostic-pessimizing-move</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: moving a local object in a return statement prevents copy elision</li>
<li>warning: moving a temporary object prevents copy elision</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpessimizing-move" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pointer-arith</key>
  <name>clang-diagnostic-pointer-arith</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to void is a GNU extension</li>
<li>warning: arithmetic on%select{ a|}0 pointer%select{|s}0 to%select{ the|}2 function type%select{|s}2 %1%select{| and %3}2 is a GNU extension</li>
<li>warning: invalid application of '%sub{select_unary_expr_or_type_trait_kind}0' to a function type</li>
<li>warning: invalid application of '%sub{select_unary_expr_or_type_trait_kind}0' to a void type</li>
<li>warning: subscript of a pointer to void is a GNU extension</li>
<li>warning: subtraction of pointers to type %0 of zero size has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-arith" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pointer-bool-conversion</key>
  <name>clang-diagnostic-pointer-bool-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: address of%select{| function| array}0 '%1' will always evaluate to 'true'</li>
<li>warning: nonnull %select{function call|parameter}0 '%1' will evaluate to 'true' on first encounter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-bool-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pointer-sign</key>
  <name>clang-diagnostic-pointer-sign</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2 converts between pointers to integer types with different sign</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-sign" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pointer-type-mismatch</key>
  <name>clang-diagnostic-pointer-type-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: pointer type mismatch%diff{ ($ and $)|}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-potentially-evaluated-expression</key>
  <name>clang-diagnostic-potentially-evaluated-expression</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpotentially-evaluated-expression" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragma-clang-attribute</key>
  <name>clang-diagnostic-pragma-clang-attribute</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused attribute %0 in '#pragma clang attribute push' region</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-clang-attribute" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragma-once-outside-header</key>
  <name>clang-diagnostic-pragma-once-outside-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma once in main file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-once-outside-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragma-pack</key>
  <name>clang-diagnostic-pragma-pack</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
<li>warning: the current #pragma pack alignment value is modified in the included file</li>
<li>warning: unterminated '#pragma pack (push, ...)' at end of file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-pack" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragma-pack-suspicious-include</key>
  <name>clang-diagnostic-pragma-pack-suspicious-include</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-pack-suspicious-include" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragma-system-header-outside-header</key>
  <name>clang-diagnostic-pragma-system-header-outside-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma system_header ignored in main file</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragma-system-header-outside-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-pragmas</key>
  <name>clang-diagnostic-pragmas</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma %0(pop, ...) failed: %1</li>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma options align=reset failed: %0</li>
<li>warning: #pragma redefine_extname is applicable to external C declarations only; not applied to %select{function|variable}0 %1</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: %0 is not a recognized builtin%select{|; consider including &lt;intrin.h&gt; to access non-builtin intrinsics}1</li>
<li>warning: '#pragma comment %0' ignored</li>
<li>warning: '#pragma init_seg' is only supported when targeting a Microsoft environment</li>
<li>warning: '#pragma optimize' is not supported</li>
<li>warning: OpenCL extension end directive mismatches begin directive - ignoring</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: expected #pragma pack parameter to be '1', '2', '4', '8', or '16'</li>
<li>warning: expected %select{'enable', 'disable', 'begin' or 'end'|'disable'}0 - ignoring</li>
<li>warning: expected '#pragma unused' argument to be a variable name</li>
<li>warning: expected ')' or ',' in '#pragma %0'</li>
<li>warning: expected ',' in '#pragma %0'</li>
<li>warning: expected '=' following '#pragma %select{align|options align}0' - ignored</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected 'align' following '#pragma options' - ignored</li>
<li>warning: expected 'compiler', 'lib', 'user', or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a stack label or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected action or ')' in '#pragma %0' - ignored</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: expected identifier in '#pragma %0' - ignored</li>
<li>warning: expected integer between %0 and %1 inclusive in '#pragma %2' - ignored</li>
<li>warning: expected integer or identifier in '#pragma pack' - ignored</li>
<li>warning: expected non-wide string literal in '#pragma %0'</li>
<li>warning: expected push, pop or a string literal for the section name in '#pragma %0' - ignored</li>
<li>warning: expected string literal in '#pragma %0' - ignoring</li>
<li>warning: extra tokens at end of '#pragma %0' - ignored</li>
<li>warning: incorrect use of #pragma clang force_cuda_host_device begin|end</li>
<li>warning: incorrect use of '#pragma ms_struct on|off' - ignored</li>
<li>warning: invalid alignment option in '#pragma %select{align|options align}0' - ignored</li>
<li>warning: known but unsupported action '%1' for '#pragma %0' - ignored</li>
<li>warning: missing '(' after '#pragma %0' - ignoring</li>
<li>warning: missing ')' after '#pragma %0' - ignoring</li>
<li>warning: missing ':' after %0 - ignoring</li>
<li>warning: missing ':' or ')' after %0 - ignoring</li>
<li>warning: missing argument to '#pragma %0'%select{|; expected %2}1</li>
<li>warning: missing argument to debug command '%0'</li>
<li>warning: non-default #pragma pack value changes the alignment of struct or union members in the included file</li>
<li>warning: only variables can be arguments to '#pragma unused'</li>
<li>warning: pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: pragma pop_macro could not pop '%0', no matching push_macro</li>
<li>warning: the current #pragma pack alignment value is modified in the included file</li>
<li>warning: undeclared variable %0 used as an argument for '#pragma unused'</li>
<li>warning: unexpected argument '%0' to '#pragma %1'%select{|; expected %3}2</li>
<li>warning: unexpected debug command '%0'</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown OpenCL extension %0 - ignoring</li>
<li>warning: unknown action '%1' for '#pragma %0' - ignored</li>
<li>warning: unknown action for '#pragma %0' - ignored</li>
<li>warning: unknown module '%0'</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
<li>warning: unsupported OpenCL extension %0 - ignoring</li>
<li>warning: unterminated '#pragma pack (push, ...)' at end of file</li>
<li>warning: unused attribute %0 in '#pragma clang attribute push' region</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpragmas" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-predefined-identifier-outside-function</key>
  <name>clang-diagnostic-predefined-identifier-outside-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: predefined identifier is only valid inside function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpredefined-identifier-outside-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-private-extern</key>
  <name>clang-diagnostic-private-extern</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of __private_extern__ on a declaration may not produce external symbol private to the linkage unit and is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-extern" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-private-header</key>
  <name>clang-diagnostic-private-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: use of private header from outside its module: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-private-module</key>
  <name>clang-diagnostic-private-module</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expected canonical name for private module '%0'</li>
<li>warning: module '%0' already re-exported as '%1'</li>
<li>warning: no submodule named %0 in module '%1'; using top level '%2'</li>
<li>warning: private submodule '%0' in private module map, expected top-level module</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprivate-module" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-profile-instr-missing</key>
  <name>clang-diagnostic-profile-instr-missing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: profile data may be incomplete: of %0 function%s0, %1 %plural{1:has|:have}1 no data</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-missing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-profile-instr-out-of-date</key>
  <name>clang-diagnostic-profile-instr-out-of-date</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: profile data may be out of date: of %0 function%s0, %1 %plural{1:has|:have}1 mismatched data that will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-out-of-date" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-profile-instr-unprofiled</key>
  <name>clang-diagnostic-profile-instr-unprofiled</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no profile data available for file "%0"</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprofile-instr-unprofiled" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-property-access-dot-syntax</key>
  <name>clang-diagnostic-property-access-dot-syntax</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property %0 not found on object of type %1; did you mean to access property %2?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wproperty-access-dot-syntax" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-property-attribute-mismatch</key>
  <name>clang-diagnostic-property-attribute-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%1' attribute on property %0 does not match the property inherited from %2</li>
<li>warning: attribute 'readonly' of property %0 restricts attribute 'readwrite' of property inherited from %1</li>
<li>warning: getter name mismatch between property redeclaration (%1) and its original declaration (%0)</li>
<li>warning: property attribute in class extension does not match the primary class</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wproperty-attribute-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-protocol</key>
  <name>clang-diagnostic-protocol</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method %0 in protocol %1 not implemented</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprotocol" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-protocol-property-synthesis-ambiguity</key>
  <name>clang-diagnostic-protocol-property-synthesis-ambiguity</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property %select{of type %1|with attribute '%1'|without attribute '%1'|with getter %1|with setter %1}0 was selected for synthesis</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wprotocol-property-synthesis-ambiguity" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-qualified-void-return-type</key>
  <name>clang-diagnostic-qualified-void-return-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: function cannot return qualified void type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wqualified-void-return-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-quoted-include-in-framework-header</key>
  <name>clang-diagnostic-quoted-include-in-framework-header</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: double-quoted include "%0" in framework header, expected angle-bracketed instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wquoted-include-in-framework-header" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-range-loop-analysis</key>
  <name>clang-diagnostic-range-loop-analysis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: loop variable %0 %diff{has type $ but is initialized with type $| is initialized with a value of a different type}1,2 resulting in a copy</li>
<li>warning: loop variable %0 is always a copy because the range of type %1 does not return a reference</li>
<li>warning: loop variable %0 of type %1 creates a copy from type %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrange-loop-analysis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-readonly-iboutlet-property</key>
  <name>clang-diagnostic-readonly-iboutlet-property</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: readonly IBOutlet property %0 when auto-synthesized may not work correctly with 'nib' loader</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreadonly-iboutlet-property" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-receiver-expr</key>
  <name>clang-diagnostic-receiver-expr</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: receiver type %0 is not 'id' or interface pointer, consider casting it to 'id'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreceiver-expr" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-receiver-forward-class</key>
  <name>clang-diagnostic-receiver-forward-class</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: receiver %0 is a forward class and corresponding @interface may not exist</li>
<li>warning: receiver type %0 for instance message is a forward declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreceiver-forward-class" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-redeclared-class-member</key>
  <name>clang-diagnostic-redeclared-class-member</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: class member cannot be redeclared</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredeclared-class-member" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-redundant-move</key>
  <name>clang-diagnostic-redundant-move</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redundant move in return statement</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredundant-move" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-redundant-parens</key>
  <name>clang-diagnostic-redundant-parens</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redundant parentheses surrounding declarator</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wredundant-parens" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-register</key>
  <name>clang-diagnostic-register</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'register' storage class specifier is deprecated and incompatible with C++17</li>
<li>warning: ISO C++17 does not allow 'register' storage class specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wregister" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-reinterpret-base-class</key>
  <name>clang-diagnostic-reinterpret-base-class</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'reinterpret_cast' %select{from|to}3 class %0 %select{to|from}3 its %select{virtual base|base at non-zero offset}2 %1 behaves differently from 'static_cast'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreinterpret-base-class" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-remark-backend-plugin</key>
  <name>clang-diagnostic-remark-backend-plugin</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rremark-backend-plugin" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-reorder</key>
  <name>clang-diagnostic-reorder</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{field|base class}0 %1 will be initialized after %select{field|base}2 %3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreorder" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-requires-super-attribute</key>
  <name>clang-diagnostic-requires-super-attribute</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute cannot be applied to %select{methods in protocols|dealloc}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wrequires-super-attribute" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-reserved-id-macro</key>
  <name>clang-diagnostic-reserved-id-macro</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: macro name is a reserved identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-id-macro" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-reserved-user-defined-literal</key>
  <name>clang-diagnostic-reserved-user-defined-literal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: identifier after literal will be treated as a reserved user-defined literal suffix in C++11</li>
<li>warning: invalid suffix on literal; C++11 requires a space between literal and identifier</li>
<li>warning: invalid suffix on literal; C++11 requires a space between literal and identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreserved-user-defined-literal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-retained-language-linkage</key>
  <name>clang-diagnostic-retained-language-linkage</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: friend function %0 retaining previous language linkage is an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wretained-language-linkage" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-return-stack-address</key>
  <name>clang-diagnostic-return-stack-address</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{address of|reference to}0 stack memory associated with %select{local variable|parameter}2 %1 returned</li>
<li>warning: returning %select{address of|reference to}0 local temporary object</li>
<li>warning: returning address of label, which is local</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-stack-address" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-return-std-move</key>
  <name>clang-diagnostic-return-std-move</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: local variable %0 will be copied despite being %select{returned|thrown}1 by name</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-std-move" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-return-std-move-in-c++11</key>
  <name>clang-diagnostic-return-std-move-in-c++11</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: prior to the resolution of a defect report against ISO C++11, local variable %0 would have been copied despite being returned by name, due to its not matching the function return type%diff{ ($ vs $)|}1,2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-std-move-in-c-11" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-return-type</key>
  <name>clang-diagnostic-return-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
<li>warning: %select{void function|void method|constructor|destructor}1 %0 should not return a value</li>
<li>warning: control may reach end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control may reach end of non-void function</li>
<li>warning: control may reach end of non-void lambda</li>
<li>warning: control reaches end of coroutine; which is undefined behavior because the promise type %0 does not declare 'return_void()'</li>
<li>warning: control reaches end of non-void function</li>
<li>warning: control reaches end of non-void lambda</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
<li>warning: non-void %select{function|method}1 %0 should return a value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-return-type-c-linkage</key>
  <name>clang-diagnostic-return-type-c-linkage</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</li>
<li>warning: %0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-type-c-linkage" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sanitize-address</key>
  <name>clang-diagnostic-sanitize-address</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: -fsanitize-address-field-padding applied to %0</li>
<li>remark: -fsanitize-address-field-padding ignored for %0 because it %select{is not C++|is packed|is a union|is trivially copyable|has trivial destructor|is standard layout|is in a blacklisted file|is blacklisted}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rsanitize-address" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-section</key>
  <name>clang-diagnostic-section</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{codeseg|section}0 does not match previous declaration</li>
<li>warning: duplicate code segment specifiers</li>
<li>warning: section attribute is specified on redeclared variable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsection" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-selector</key>
  <name>clang-diagnostic-selector</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no method with selector %0 is implemented in this translation unit</li>
<li>warning: several methods with selector %0 of mismatched types are found for the @selector expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wselector" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-selector-type-mismatch</key>
  <name>clang-diagnostic-selector-type-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: several methods with selector %0 of mismatched types are found for the @selector expression</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wselector-type-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-self-assign</key>
  <name>clang-diagnostic-self-assign</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-self-assign-field</key>
  <name>clang-diagnostic-self-assign-field</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: assigning %select{field|instance variable}0 to itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign-field" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-self-assign-overloaded</key>
  <name>clang-diagnostic-self-assign-overloaded</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicitly assigning value of variable of type %0 to itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-assign-overloaded" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-self-move</key>
  <name>clang-diagnostic-self-move</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicitly moving variable of type %0 to itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wself-move" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-semicolon-before-method-body</key>
  <name>clang-diagnostic-semicolon-before-method-body</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: semicolon before method body is ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsemicolon-before-method-body" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sentinel</key>
  <name>clang-diagnostic-sentinel</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: missing sentinel in %select{function call|method dispatch|block call}0</li>
<li>warning: not enough variable arguments in %0 declaration to fit a sentinel</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsentinel" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sequence-point</key>
  <name>clang-diagnostic-sequence-point</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple unsequenced modifications to %0</li>
<li>warning: unsequenced modification and access to %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsequence-point" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-serialized-diagnostics</key>
  <name>clang-diagnostic-serialized-diagnostics</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unable to merge a subprocess's serialized diagnostics</li>
<li>warning: unable to open file %0 for serializing diagnostics (%1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wserialized-diagnostics" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow</key>
  <name>clang-diagnostic-shadow</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2}1</li>
<li>warning: local declaration of %0 hides instance variable</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-all</key>
  <name>clang-diagnostic-shadow-all</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2</li>
<li>warning: constructor parameter %0 shadows the field %1 of %2</li>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2}1</li>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2}1</li>
<li>warning: local declaration of %0 hides instance variable</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-all" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-field</key>
  <name>clang-diagnostic-shadow-field</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{parameter|non-static data member}3 %0 %select{|of %1 }3shadows member inherited from type %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-field-in-constructor</key>
  <name>clang-diagnostic-shadow-field-in-constructor</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: constructor parameter %0 shadows the field %1 of %2</li>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field-in-constructor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-field-in-constructor-modified</key>
  <name>clang-diagnostic-shadow-field-in-constructor-modified</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: modifying constructor parameter %0 that shadows a field of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-field-in-constructor-modified" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-ivar</key>
  <name>clang-diagnostic-shadow-ivar</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: local declaration of %0 hides instance variable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-ivar" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shadow-uncaptured-local</key>
  <name>clang-diagnostic-shadow-uncaptured-local</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration shadows a %select{local variable|variable in %2|static data member of %2|field of %2|typedef in %2|type alias in %2}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshadow-uncaptured-local" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-count-negative</key>
  <name>clang-diagnostic-shift-count-negative</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: shift count is negative</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-count-negative" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-count-overflow</key>
  <name>clang-diagnostic-shift-count-overflow</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: shift count &gt;= width of type</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-count-overflow" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-negative-value</key>
  <name>clang-diagnostic-shift-negative-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: shifting a negative signed value is undefined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-negative-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-op-parentheses</key>
  <name>clang-diagnostic-shift-op-parentheses</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: operator '%0' has lower precedence than '%1'; '%1' will be evaluated first</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-op-parentheses" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-overflow</key>
  <name>clang-diagnostic-shift-overflow</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-overflow" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shift-sign-overflow</key>
  <name>clang-diagnostic-shift-sign-overflow</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: signed shift result (%0) sets the sign bit of the shift expression's type (%1) and becomes negative</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshift-sign-overflow" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-shorten-64-to-32</key>
  <name>clang-diagnostic-shorten-64-to-32</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wshorten-64-to-32" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sign-compare</key>
  <name>clang-diagnostic-sign-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison of integers of different signs: %0 and %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsign-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sign-conversion</key>
  <name>clang-diagnostic-sign-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion changes signedness: %0 to %1</li>
<li>warning: operand of ? changes signedness: %0 to %1</li>
<li>warning: the resulting value is always non-negative after implicit conversion</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsign-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-signed-enum-bitfield</key>
  <name>clang-diagnostic-signed-enum-bitfield</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: enums in the Microsoft ABI are signed integers by default; consider giving the enum %0 an unsigned underlying type to make this code portable</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsigned-enum-bitfield" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sizeof-array-argument</key>
  <name>clang-diagnostic-sizeof-array-argument</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: sizeof on array function parameter will return size of %0 instead of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-array-argument" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sizeof-array-decay</key>
  <name>clang-diagnostic-sizeof-array-decay</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: sizeof on pointer operation will return size of %0 instead of %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-array-decay" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sizeof-pointer-memaccess</key>
  <name>clang-diagnostic-sizeof-pointer-memaccess</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' call operates on objects of type %1 while the size is based on a different type %2</li>
<li>warning: argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-pointer-memaccess" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-slash-u-filename</key>
  <name>clang-diagnostic-slash-u-filename</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '/U%0' treated as the '/U' option</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wslash-u-filename" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sometimes-uninitialized</key>
  <name>clang-diagnostic-sometimes-uninitialized</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsometimes-uninitialized" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-source-uses-openmp</key>
  <name>clang-diagnostic-source-uses-openmp</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: OpenMP only allows an ordered construct with the simd clause nested in a simd construct</li>
<li>warning: unexpected '#pragma omp ...' in program</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsource-uses-openmp" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-spir-compat</key>
  <name>clang-diagnostic-spir-compat</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: sampler initializer has invalid %0 bits</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wspir-compat" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-static-float-init</key>
  <name>clang-diagnostic-static-float-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: in-class initializer for static data member of type %0 is a GNU extension</li>
<li>warning: in-class initializer for static data member of type %0 requires 'constexpr' specifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-float-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-static-in-inline</key>
  <name>clang-diagnostic-static-in-inline</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: static %select{function|variable}0 %1 is used in an inline function with external linkage</li>
<li>warning: static %select{function|variable}0 %1 is used in an inline function with external linkage</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-in-inline" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-static-inline-explicit-instantiation</key>
  <name>clang-diagnostic-static-inline-explicit-instantiation</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '%select{static|inline}0' keyword on explicit template instantiation</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-inline-explicit-instantiation" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-static-local-in-inline</key>
  <name>clang-diagnostic-static-local-in-inline</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: non-constant static local variable in inline function may be different in different files</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-local-in-inline" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-static-self-init</key>
  <name>clang-diagnostic-static-self-init</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstatic-self-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-stdlibcxx-not-found</key>
  <name>clang-diagnostic-stdlibcxx-not-found</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: include path for libstdc++ headers not found; pass '-stdlib=libc++' on the command line to use the libc++ standard library instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstdlibcxx-not-found" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-strict-prototypes</key>
  <name>clang-diagnostic-strict-prototypes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: this %select{function declaration is not|block declaration is not|old-style function definition is not preceded by}0 a prototype</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrict-prototypes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-strict-selector-match</key>
  <name>clang-diagnostic-strict-selector-match</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple methods named %0 found</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrict-selector-match" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-string-compare</key>
  <name>clang-diagnostic-string-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison against %select{a string literal|@encode}0 is unspecified (use strncmp instead)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-string-conversion</key>
  <name>clang-diagnostic-string-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion turns string literal into bool: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-string-plus-char</key>
  <name>clang-diagnostic-string-plus-char</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to a string pointer does not append to the string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-plus-char" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-string-plus-int</key>
  <name>clang-diagnostic-string-plus-int</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: adding %0 to a string does not append to the string</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstring-plus-int" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-strlcpy-strlcat-size</key>
  <name>clang-diagnostic-strlcpy-strlcat-size</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: size argument in %0 call appears to be size of the source; expected the size of the destination</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrlcpy-strlcat-size" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-strncat-size</key>
  <name>clang-diagnostic-strncat-size</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: size argument in 'strncat' call appears to be size of the source</li>
<li>warning: the value of the size argument in 'strncat' is too large, might lead to a buffer overflow</li>
<li>warning: the value of the size argument to 'strncat' is wrong</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wstrncat-size" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-super-class-method-mismatch</key>
  <name>clang-diagnostic-super-class-method-mismatch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: method parameter type %diff{$ does not match super class method parameter type $|does not match super class method parameter type}0,1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuper-class-method-mismatch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-suspicious-bzero</key>
  <name>clang-diagnostic-suspicious-bzero</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'size' argument to bzero is '0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuspicious-bzero" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-suspicious-memaccess</key>
  <name>clang-diagnostic-suspicious-memaccess</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{'size' argument to memset is '0'|setting buffer to a 'sizeof' expression}0; did you mean to transpose the last two arguments?</li>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to %select{|class containing a }2dynamic class %3; vtable pointer will be %select{overwritten|copied|moved|compared}4</li>
<li>warning: %select{destination for|source of|first operand of|second operand of}0 this %1 call is a pointer to record %2 that is not trivial to %select{primitive-default-initialize|primitive-copy}3</li>
<li>warning: '%0' call operates on objects of type %1 while the size is based on a different type %2</li>
<li>warning: 'size' argument to bzero is '0'</li>
<li>warning: argument to 'sizeof' in %0 call is the same pointer type %1 as the %select{destination|source}2; expected %3 or an explicit length</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsuspicious-memaccess" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-switch</key>
  <name>clang-diagnostic-switch</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %plural{1:enumeration value %1 not handled in switch|2:enumeration values %1 and %2 not handled in switch|3:enumeration values %1, %2, and %3 not handled in switch|:%0 enumeration values not handled in switch: %1, %2, %3...}0</li>
<li>warning: case value not in enumerated type %0</li>
<li>warning: overflow converting case value to switch condition type (%0 to %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-switch-bool</key>
  <name>clang-diagnostic-switch-bool</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: switch condition has boolean value</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch-bool" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-switch-enum</key>
  <name>clang-diagnostic-switch-enum</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %plural{1:enumeration value %1 not explicitly handled in switch|2:enumeration values %1 and %2 not explicitly handled in switch|3:enumeration values %1, %2, and %3 not explicitly handled in switch|:%0 enumeration values not explicitly handled in switch: %1, %2, %3...}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wswitch-enum" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-sync-fetch-and-nand-semantics-changed</key>
  <name>clang-diagnostic-sync-fetch-and-nand-semantics-changed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: the semantics of this intrinsic changed with GCC version 4.4 - the newer semantics are provided here</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsync-fetch-and-nand-semantics-changed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-compare</key>
  <name>clang-diagnostic-tautological-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{self-|array }0comparison always evaluates to %select{a constant|%2}1</li>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: bitwise comparison always evaluates to %select{false|true}0</li>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-constant-compare</key>
  <name>clang-diagnostic-tautological-constant-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-constant-in-range-compare</key>
  <name>clang-diagnostic-tautological-constant-in-range-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-in-range-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-constant-out-of-range-compare</key>
  <name>clang-diagnostic-tautological-constant-out-of-range-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{constant %0|true|false}1 with %select{expression of type %2|boolean expression}3 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-constant-out-of-range-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-overlap-compare</key>
  <name>clang-diagnostic-tautological-overlap-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: overlapping comparisons always evaluate to %select{false|true}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-overlap-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-pointer-compare</key>
  <name>clang-diagnostic-tautological-pointer-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison of %select{address of|function|array}0 '%1' %select{not |}2equal to a null pointer is always %select{true|false}2</li>
<li>warning: comparison of nonnull %select{function call|parameter}0 '%1' %select{not |}2equal to a null pointer is '%select{true|false}2' on first encounter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-pointer-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-type-limit-compare</key>
  <name>clang-diagnostic-tautological-type-limit-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-type-limit-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-undefined-compare</key>
  <name>clang-diagnostic-tautological-undefined-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; comparison may be assumed to always evaluate to %select{true|false}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-undefined-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-unsigned-enum-zero-compare</key>
  <name>clang-diagnostic-tautological-unsigned-enum-zero-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-unsigned-enum-zero-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tautological-unsigned-zero-compare</key>
  <name>clang-diagnostic-tautological-unsigned-zero-compare</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtautological-unsigned-zero-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-tentative-definition-incomplete-type</key>
  <name>clang-diagnostic-tentative-definition-incomplete-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: tentative definition of variable with internal linkage has incomplete non-array type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtentative-definition-incomplete-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety</key>
  <name>clang-diagnostic-thread-safety</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 '%1' is acquired exclusively and shared in the same scope</li>
<li>warning: %0 '%1' is not held on every path through here</li>
<li>warning: %0 '%1' is still held at the end of function</li>
<li>warning: %0 '%1' must be acquired before '%2'</li>
<li>warning: %0 attribute can only be applied in a context annotated with 'capability("mutex")' attribute</li>
<li>warning: %0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1</li>
<li>warning: %0 attribute without capability arguments can only be applied to non-static methods of a class</li>
<li>warning: %0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute</li>
<li>warning: %0 only applies to pointer types; type here is %1</li>
<li>warning: %select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: Cycle in acquired_before/after dependencies, starting with '%0'</li>
<li>warning: acquiring %0 '%1' that is already held</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: cannot call function '%1' while %0 '%2' is held</li>
<li>warning: cannot resolve lock expression</li>
<li>warning: expecting %0 '%1' to be held at start of each loop</li>
<li>warning: expecting %0 '%1' to be held at the end of function</li>
<li>warning: ignoring %0 attribute because its argument is invalid</li>
<li>warning: invalid capability name '%0'; capability name must be 'mutex' or 'role'</li>
<li>warning: passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: releasing %0 '%1' that was not held</li>
<li>warning: releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-analysis</key>
  <name>clang-diagnostic-thread-safety-analysis</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 '%1' is acquired exclusively and shared in the same scope</li>
<li>warning: %0 '%1' is not held on every path through here</li>
<li>warning: %0 '%1' is still held at the end of function</li>
<li>warning: %0 '%1' must be acquired before '%2'</li>
<li>warning: %select{reading|writing}1 the value pointed to by %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}1 variable %0 requires holding %select{any mutex|any mutex exclusively}1</li>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: Cycle in acquired_before/after dependencies, starting with '%0'</li>
<li>warning: acquiring %0 '%1' that is already held</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: cannot call function '%1' while %0 '%2' is held</li>
<li>warning: cannot resolve lock expression</li>
<li>warning: expecting %0 '%1' to be held at start of each loop</li>
<li>warning: expecting %0 '%1' to be held at the end of function</li>
<li>warning: releasing %0 '%1' that was not held</li>
<li>warning: releasing %0 '%1' using %select{shared|exclusive}2 access, expected %select{shared|exclusive}3 access</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-analysis" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-attributes</key>
  <name>clang-diagnostic-thread-safety-attributes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 attribute can only be applied in a context annotated with 'capability("mutex")' attribute</li>
<li>warning: %0 attribute requires arguments whose type is annotated with 'capability' attribute; type here is %1</li>
<li>warning: %0 attribute without capability arguments can only be applied to non-static methods of a class</li>
<li>warning: %0 attribute without capability arguments refers to 'this', but %1 isn't annotated with 'capability' or 'scoped_lockable' attribute</li>
<li>warning: %0 only applies to pointer types; type here is %1</li>
<li>warning: ignoring %0 attribute because its argument is invalid</li>
<li>warning: invalid capability name '%0'; capability name must be 'mutex' or 'role'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-attributes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-beta</key>
  <name>clang-diagnostic-thread-safety-beta</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: Thread safety beta warning.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-beta" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-negative</key>
  <name>clang-diagnostic-thread-safety-negative</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: acquiring %0 '%1' requires negative capability '%2'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-negative" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-precise</key>
  <name>clang-diagnostic-thread-safety-precise</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{reading|writing}3 the value pointed to by %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: %select{reading|writing}3 variable %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: calling function %1 requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-precise" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-reference</key>
  <name>clang-diagnostic-thread-safety-reference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: passing the value that %1 points to by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
<li>warning: passing variable %1 by reference requires holding %0 %select{'%2'|'%2' exclusively}3</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-reference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-thread-safety-verbose</key>
  <name>clang-diagnostic-thread-safety-verbose</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: Thread safety verbose warning.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wthread-safety-verbose" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-trigraphs</key>
  <name>clang-diagnostic-trigraphs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignored trigraph would end block comment</li>
<li>warning: trigraph converted to '%0' character</li>
<li>warning: trigraph ends block comment</li>
<li>warning: trigraph ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtrigraphs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-type-safety</key>
  <name>clang-diagnostic-type-safety</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: argument type %0 doesn't match specified %1 type tag %select{that requires %3|}2</li>
<li>warning: specified %0 type tag requires a null pointer</li>
<li>warning: this type tag was not designed to be used with this function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtype-safety" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-typedef-redefinition</key>
  <name>clang-diagnostic-typedef-redefinition</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: redefinition of typedef %0 is a C11 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtypedef-redefinition" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-typename-missing</key>
  <name>clang-diagnostic-typename-missing</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: missing 'typename' prior to dependent type name '%0%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtypename-missing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unable-to-open-stats-file</key>
  <name>clang-diagnostic-unable-to-open-stats-file</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unable to open statistics output file '%0': '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunable-to-open-stats-file" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unavailable-declarations</key>
  <name>clang-diagnostic-unavailable-declarations</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 may be unavailable because the receiver type is unknown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunavailable-declarations" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undeclared-selector</key>
  <name>clang-diagnostic-undeclared-selector</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: undeclared selector %0</li>
<li>warning: undeclared selector %0; did you mean %1?</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundeclared-selector" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undef</key>
  <name>clang-diagnostic-undef</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is not defined, evaluates to 0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundef" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-bool-conversion</key>
  <name>clang-diagnostic-undefined-bool-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'this' pointer cannot be null in well-defined C++ code; pointer may be assumed to always convert to true</li>
<li>warning: reference cannot be bound to dereferenced null pointer in well-defined C++ code; pointer may be assumed to always convert to true</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-bool-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-func-template</key>
  <name>clang-diagnostic-undefined-func-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: instantiation of function %q0 required here, but no definition is available</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-func-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-inline</key>
  <name>clang-diagnostic-undefined-inline</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: inline function %q0 is not defined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-inline" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-internal</key>
  <name>clang-diagnostic-undefined-internal</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %q1 has internal linkage but is not defined</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-internal" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-internal-type</key>
  <name>clang-diagnostic-undefined-internal-type</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ requires a definition in this translation unit for %select{function|variable}0 %q1 because its type does not have linkage</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-internal-type" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-reinterpret-cast</key>
  <name>clang-diagnostic-undefined-reinterpret-cast</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior</li>
<li>warning: reinterpret_cast from %0 to %1 has undefined behavior</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-reinterpret-cast" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-undefined-var-template</key>
  <name>clang-diagnostic-undefined-var-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: instantiation of variable %q0 required here, but no definition is available</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wundefined-var-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unevaluated-expression</key>
  <name>clang-diagnostic-unevaluated-expression</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunevaluated-expression" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unguarded-availability</key>
  <name>clang-diagnostic-unguarded-availability</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunguarded-availability" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unguarded-availability-new</key>
  <name>clang-diagnostic-unguarded-availability-new</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 is only available on %1 %2 or newer</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunguarded-availability-new" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unicode</key>
  <name>clang-diagnostic-unicode</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: \%0 used with no following hex digits; treating as '\' followed by identifier</li>
<li>warning: incomplete universal character name; treating as '\' followed by identifier</li>
<li>warning: universal character name refers to a surrogate character</li>
<li>warning: universal character names are only valid in C99 or C++</li>
<li>warning: universal character names are only valid in C99 or C++; treating as '\' followed by identifier</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unicode-homoglyph</key>
  <name>clang-diagnostic-unicode-homoglyph</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: treating Unicode character &lt;U+%0&gt; as identifier character rather than as '%1' symbol</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-homoglyph" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unicode-whitespace</key>
  <name>clang-diagnostic-unicode-whitespace</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: treating Unicode character as whitespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-whitespace" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unicode-zero-width</key>
  <name>clang-diagnostic-unicode-zero-width</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: identifier contains Unicode character &lt;U+%0&gt; that is invisible in some environments</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunicode-zero-width" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-uninitialized</key>
  <name>clang-diagnostic-uninitialized</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: base class %0 is uninitialized when used here to access %q1</li>
<li>warning: block pointer variable %0 is %select{uninitialized|null}1 when captured by block</li>
<li>warning: field %0 is uninitialized when used here</li>
<li>warning: reference %0 is not yet bound to a value when used here</li>
<li>warning: reference %0 is not yet bound to a value when used within its own initialization</li>
<li>warning: static variable %0 is suspiciously used within its own initialization</li>
<li>warning: variable %0 is %select{used|captured}1 uninitialized whenever %select{'%3' condition is %select{true|false}4|'%3' loop %select{is entered|exits because its condition is false}4|'%3' loop %select{condition is true|exits because its condition is false}4|switch %3 is taken|its declaration is reached|%3 is called}2</li>
<li>warning: variable %0 is uninitialized when %select{used here|captured by block}1</li>
<li>warning: variable %0 is uninitialized when used within its own initialization</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuninitialized" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-argument</key>
  <name>clang-diagnostic-unknown-argument</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown argument ignored in clang-cl '%0'; did you mean '%1'?</li>
<li>warning: unknown argument ignored in clang-cl: '%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-argument" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-attributes</key>
  <name>clang-diagnostic-unknown-attributes</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown attribute %0 ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-attributes" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-escape-sequence</key>
  <name>clang-diagnostic-unknown-escape-sequence</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown escape sequence '\%0'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-escape-sequence" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-pragmas</key>
  <name>clang-diagnostic-unknown-pragmas</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: #pragma execution_character_set expected '%0'</li>
<li>warning: #pragma execution_character_set expected 'push' or 'pop'</li>
<li>warning: #pragma execution_character_set invalid value '%0', only 'UTF-8' is supported</li>
<li>warning: #pragma warning expected '%0'</li>
<li>warning: #pragma warning expected 'push', 'pop', 'default', 'disable', 'error', 'once', 'suppress', 1, 2, 3, or 4</li>
<li>warning: #pragma warning expected a warning number</li>
<li>warning: #pragma warning(push, level) requires a level between 0 and 4</li>
<li>warning: angle-bracketed include &lt;%0&gt; cannot be aliased to double-quoted include "%1"</li>
<li>warning: double-quoted include "%0" cannot be aliased to angle-bracketed include &lt;%1&gt;</li>
<li>warning: expected 'ON' or 'OFF' or 'DEFAULT' in pragma</li>
<li>warning: expected end of directive in pragma</li>
<li>warning: pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</li>
<li>warning: pragma diagnostic expected 'error', 'warning', 'ignored', 'fatal', 'push', or 'pop'</li>
<li>warning: pragma diagnostic expected option name (e.g. "-Wundef")</li>
<li>warning: pragma diagnostic pop could not pop, no matching push</li>
<li>warning: pragma include_alias expected '%0'</li>
<li>warning: pragma include_alias expected include filename</li>
<li>warning: unexpected token in pragma diagnostic</li>
<li>warning: unknown pragma ignored</li>
<li>warning: unknown pragma in STDC namespace</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-pragmas" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-sanitizers</key>
  <name>clang-diagnostic-unknown-sanitizers</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown sanitizer '%0' ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-sanitizers" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unknown-warning-option</key>
  <name>clang-diagnostic-unknown-warning-option</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unknown %0 warning specifier: '%1'</li>
<li>warning: unknown %select{warning|remark}0 option '%1'%select{|; did you mean '%3'?}2</li>
<li>warning: unknown warning group '%0', ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunknown-warning-option" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unnamed-type-template-args</key>
  <name>clang-diagnostic-unnamed-type-template-args</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: template argument uses unnamed type</li>
<li>warning: unnamed type as template argument is incompatible with C++98</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunnamed-type-template-args" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unneeded-internal-declaration</key>
  <name>clang-diagnostic-unneeded-internal-declaration</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunneeded-internal-declaration" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unneeded-member-function</key>
  <name>clang-diagnostic-unneeded-member-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: member function %0 is not needed and will not be emitted</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunneeded-member-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unreachable-code</key>
  <name>clang-diagnostic-unreachable-code</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: code will never be executed</li>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unreachable-code-aggressive</key>
  <name>clang-diagnostic-unreachable-code-aggressive</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'break' will never be executed</li>
<li>warning: 'return' will never be executed</li>
<li>warning: code will never be executed</li>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-aggressive" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unreachable-code-break</key>
  <name>clang-diagnostic-unreachable-code-break</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'break' will never be executed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-break" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unreachable-code-loop-increment</key>
  <name>clang-diagnostic-unreachable-code-loop-increment</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: loop will run at most once (loop increment never executed)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-loop-increment" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unreachable-code-return</key>
  <name>clang-diagnostic-unreachable-code-return</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: 'return' will never be executed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunreachable-code-return" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsequenced</key>
  <name>clang-diagnostic-unsequenced</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: multiple unsequenced modifications to %0</li>
<li>warning: unsequenced modification and access to %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsequenced" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-abs</key>
  <name>clang-diagnostic-unsupported-abs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mabs=2008' option because the '%0' architecture does not support it</li>
<li>warning: ignoring '-mabs=legacy' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-abs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-availability-guard</key>
  <name>clang-diagnostic-unsupported-availability-guard</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{@available|__builtin_available}0 does not guard availability here; use if (%select{@available|__builtin_available}0) instead</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-availability-guard" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-cb</key>
  <name>clang-diagnostic-unsupported-cb</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mcompact-branches=' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-cb" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-dll-base-class-template</key>
  <name>clang-diagnostic-unsupported-dll-base-class-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: propagating dll attribute to %select{already instantiated|explicitly specialized}0 base class template without dll attribute is not supported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-dll-base-class-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-friend</key>
  <name>clang-diagnostic-unsupported-friend</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: dependent nested name specifier '%0' for friend class declaration is not supported; turning off access control for %1</li>
<li>warning: dependent nested name specifier '%0' for friend template declaration is not supported; ignoring this friend declaration</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-friend" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-gpopt</key>
  <name>clang-diagnostic-unsupported-gpopt</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mgpopt' option as it cannot be used with %select{|the implicit usage of }0-mabicalls</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-gpopt" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-nan</key>
  <name>clang-diagnostic-unsupported-nan</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring '-mnan=2008' option because the '%0' architecture does not support it</li>
<li>warning: ignoring '-mnan=legacy' option because the '%0' architecture does not support it</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-nan" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-target-opt</key>
  <name>clang-diagnostic-unsupported-target-opt</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: debug information option '%0' is not supported for target '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-target-opt" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unsupported-visibility</key>
  <name>clang-diagnostic-unsupported-visibility</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: target does not support 'protected' visibility; using 'default'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunsupported-visibility" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unusable-partial-specialization</key>
  <name>clang-diagnostic-unusable-partial-specialization</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{class|variable}0 template partial specialization contains %select{a template parameter|template parameters}1 that cannot be deduced; this partial specialization will never be used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunusable-partial-specialization" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused</key>
  <name>clang-diagnostic-unused</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
<li>warning: private field %0 is not used</li>
<li>warning: unused %select{typedef|type alias}0 %1</li>
<li>warning: unused function %0</li>
<li>warning: unused label %0</li>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-command-line-argument</key>
  <name>clang-diagnostic-unused-command-line-argument</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0: '%1' input unused in cpp mode</li>
<li>warning: %0: '%1' input unused%select{ when '%3' is present|}2</li>
<li>warning: %0: previously preprocessed input%select{ unused when '%2' is present|}1</li>
<li>warning: argument '%0' requires profile-guided optimization information</li>
<li>warning: argument unused during compilation: '%0'</li>
<li>warning: joined argument expects additional value: '%0'</li>
<li>warning: the flag '%0' has been deprecated and will be ignored</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-command-line-argument" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-comparison</key>
  <name>clang-diagnostic-unused-comparison</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-comparison" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-const-variable</key>
  <name>clang-diagnostic-unused-const-variable</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-const-variable" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-exception-parameter</key>
  <name>clang-diagnostic-unused-exception-parameter</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused exception parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-exception-parameter" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-function</key>
  <name>clang-diagnostic-unused-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: unused function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-getter-return-value</key>
  <name>clang-diagnostic-unused-getter-return-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: property access result unused - getters should not be used for side effects</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-getter-return-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-label</key>
  <name>clang-diagnostic-unused-label</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused label %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-label" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-lambda-capture</key>
  <name>clang-diagnostic-unused-lambda-capture</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: lambda capture %0 is not %select{used|required to be captured for this use}1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-lambda-capture" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-local-typedef</key>
  <name>clang-diagnostic-unused-local-typedef</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused %select{typedef|type alias}0 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-local-typedef" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-local-typedefs</key>
  <name>clang-diagnostic-unused-local-typedefs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused %select{typedef|type alias}0 %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-local-typedefs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-macros</key>
  <name>clang-diagnostic-unused-macros</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: macro is not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-macros" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-member-function</key>
  <name>clang-diagnostic-unused-member-function</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: member function %0 is not needed and will not be emitted</li>
<li>warning: unused member function %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-member-function" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-parameter</key>
  <name>clang-diagnostic-unused-parameter</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused parameter %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-parameter" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-private-field</key>
  <name>clang-diagnostic-unused-private-field</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: private field %0 is not used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-private-field" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-property-ivar</key>
  <name>clang-diagnostic-unused-property-ivar</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ivar %0 which backs the property is not referenced in this property's accessor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-property-ivar" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-result</key>
  <name>clang-diagnostic-unused-result</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ignoring return value of function declared with %0 attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-result" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-template</key>
  <name>clang-diagnostic-unused-template</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{function|variable}0 %1 is not needed and will not be emitted</li>
<li>warning: 'static' function %0 declared in header file should be declared 'static inline'</li>
<li>warning: unused %select{function|variable}0 template %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-template" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-value</key>
  <name>clang-diagnostic-unused-value</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{equality|inequality|relational|three-way}0 comparison result unused</li>
<li>warning: container access result unused - container access should not be used for side effects</li>
<li>warning: expression result unused</li>
<li>warning: expression result unused; should this cast be to 'void'?</li>
<li>warning: expression with side effects has no effect in an unevaluated context</li>
<li>warning: expression with side effects will be evaluated despite being used as an operand to 'typeid'</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
<li>warning: ignoring return value of function declared with %0 attribute</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-value" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-variable</key>
  <name>clang-diagnostic-unused-variable</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: unused variable %0</li>
<li>warning: unused variable %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-variable" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-unused-volatile-lvalue</key>
  <name>clang-diagnostic-unused-volatile-lvalue</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: expression result unused; assign into a variable to force a volatile load</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunused-volatile-lvalue" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-used-but-marked-unused</key>
  <name>clang-diagnostic-used-but-marked-unused</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 was marked unused but was used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wused-but-marked-unused" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-user-defined-literals</key>
  <name>clang-diagnostic-user-defined-literals</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: user-defined literal suffixes not starting with '_' are reserved%select{; no literal will invoke this operator|}0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuser-defined-literals" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-user-defined-warnings</key>
  <name>clang-diagnostic-user-defined-warnings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wuser-defined-warnings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-varargs</key>
  <name>clang-diagnostic-varargs</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: passing %select{an object that undergoes default argument promotion|an object of reference type|a parameter declared with the 'register' keyword}0 to 'va_start' has undefined behavior</li>
<li>warning: second argument to 'va_arg' is of promotable type %0; this va_arg has undefined behavior because arguments will be promoted to %1</li>
<li>warning: second argument to 'va_start' is not the last named parameter</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvarargs" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-variadic-macros</key>
  <name>clang-diagnostic-variadic-macros</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: __VA_OPT__ can only appear in the expansion of a variadic macro</li>
<li>warning: named variadic macros are a GNU extension</li>
<li>warning: variadic macros are a C99 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvariadic-macros" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vec-elem-size</key>
  <name>clang-diagnostic-vec-elem-size</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: vector operands do not have the same elements sizes (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvec-elem-size" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vector-conversion</key>
  <name>clang-diagnostic-vector-conversion</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvector-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vector-conversions</key>
  <name>clang-diagnostic-vector-conversions</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: incompatible vector types %select{%diff{assigning to $ from $|assigning to different types}0,1|%diff{passing $ to parameter of type $|passing to parameter of different type}0,1|%diff{returning $ from a function with result type $|returning from function with different return type}0,1|%diff{converting $ to type $|converting between types}0,1|%diff{initializing $ with an expression of type $|initializing with expression of different type}0,1|%diff{sending $ to parameter of type $|sending to parameter of different type}0,1|%diff{casting $ to type $|casting between types}0,1}2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvector-conversions" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vexing-parse</key>
  <name>clang-diagnostic-vexing-parse</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: empty parentheses interpreted as a function declaration</li>
<li>warning: parentheses were disambiguated as a function declaration</li>
<li>warning: parentheses were disambiguated as redundant parentheses around declaration of variable named %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvexing-parse" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-visibility</key>
  <name>clang-diagnostic-visibility</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: declaration of %0 will not be visible outside of this function</li>
<li>warning: redefinition of %0 will not be visible outside of this function</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvisibility" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vla</key>
  <name>clang-diagnostic-vla</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: variable length array used</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-vla-extension</key>
  <name>clang-diagnostic-vla-extension</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: variable length arrays are a C99 feature</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvla-extension" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-void-ptr-dereference</key>
  <name>clang-diagnostic-void-ptr-dereference</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++ does not allow indirection on operand of type %0</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wvoid-ptr-dereference" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-weak-template-vtables</key>
  <name>clang-diagnostic-weak-template-vtables</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: explicit template instantiation %0 will emit a vtable in every translation unit</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wweak-template-vtables" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-weak-vtables</key>
  <name>clang-diagnostic-weak-vtables</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wweak-vtables" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-writable-strings</key>
  <name>clang-diagnostic-writable-strings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 does not allow conversion from string literal to %0</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wwritable-strings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-write-strings</key>
  <name>clang-diagnostic-write-strings</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++11 does not allow conversion from string literal to %0</li>
<li>warning: conversion from string literal to %0 is deprecated</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wwrite-strings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-zero-as-null-pointer-constant</key>
  <name>clang-diagnostic-zero-as-null-pointer-constant</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: zero as null pointer constant</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wzero-as-null-pointer-constant" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-zero-length-array</key>
  <name>clang-diagnostic-zero-length-array</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: zero size arrays are an extension</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wzero-length-array" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
  <rule>
    <key>clang-diagnostic-call-to-pure-virtual-from-ctor-dtor</key>
    <name>clang-diagnostic-call-to-pure-virtual-from-ctor-dtor</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: call to pure virtual member function %0 has undefined behavior; overrides of %0 in subclasses are not available in the %select{constructor|destructor}1 of %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wcall-to-pure-virtual-from-ctor-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-ctad-maybe-unsupported</key>
    <name>clang-diagnostic-ctad-maybe-unsupported</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %0 may not intend to support class template argument deduction</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wctad-maybe-unsupported" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-ctu</key>
    <name>clang-diagnostic-ctu</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: imported AST from '%0' had been generated for a different target, current: %1, imported: %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wctu" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-darwin-sdk-settings</key>
    <name>clang-diagnostic-darwin-sdk-settings</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: SDK settings were ignored as 'SDKSettings.json' could not be parsed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdarwin-sdk-settings" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-abstract-non-virtual-dtor</key>
    <name>clang-diagnostic-delete-abstract-non-virtual-dtor</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on %1 that is abstract but has non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-abstract-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-delete-non-abstract-non-virtual-dtor</key>
    <name>clang-diagnostic-delete-non-abstract-non-virtual-dtor</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: %select{delete|destructor}0 called on non-final %1 that has virtual functions but non-virtual destructor</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wdelete-non-abstract-non-virtual-dtor" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-empty-init-stmt</key>
    <name>clang-diagnostic-empty-init-stmt</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wempty-init-stmt" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-extra-semi-stmt</key>
    <name>clang-diagnostic-extra-semi-stmt</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: empty expression statement has no effect; remove unnecessary ';' to silence this warning</li>
<li>warning: empty initialization statement of '%select{if|switch|range-based for}0' has no effect</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wextra-semi-stmt" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-fortify-source</key>
    <name>clang-diagnostic-fortify-source</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' size argument is too large; destination buffer has size %1, but size argument is %2</li>
<li>warning: '%0' will always overflow; destination buffer has size %1, but size argument is %2</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wfortify-source" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-fixed-point-conversion</key>
    <name>clang-diagnostic-implicit-fixed-point-conversion</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion from %0 cannot fit within the range of values for %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-fixed-point-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-float-conversion</key>
    <name>clang-diagnostic-implicit-float-conversion</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: implicit conversion loses floating-point precision: %0 to %1</li>
<li>warning: implicit conversion when assigning computation result loses floating-point precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-float-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-implicit-int-conversion</key>
    <name>clang-diagnostic-implicit-int-conversion</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: higher order bits are zeroes after implicit conversion</li>
<li>warning: implicit conversion loses integer precision: %0 to %1</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wimplicit-int-conversion" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-module-import</key>
    <name>clang-diagnostic-module-import</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>remark: importing module '%0'%select{| into '%3'}2 from '%1'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#rmodule-import" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-noderef</key>
    <name>clang-diagnostic-noderef</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: casting to dereferenceable pointer removes 'noderef' attribute</li>
<li>warning: dereferencing %0; was declared with a 'noderef' type</li>
<li>warning: dereferencing expression marked as 'noderef'</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wnoderef" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-objc-boxing</key>
    <name>clang-diagnostic-objc-boxing</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: string is ill-formed as UTF-8 and will become a null %0 when boxed</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wobjc-boxing" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-override-init</key>
    <name>clang-diagnostic-override-init</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: initializer overrides prior initialization of this subobject</li>
<li>warning: subobject initialization overrides initialization of other fields within its enclosing subobject</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#woverride-init" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-pointer-integer-compare</key>
    <name>clang-diagnostic-pointer-integer-compare</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: comparison between pointer and integer (%0 and %1)</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wpointer-integer-compare" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
  <rule>
    <key>clang-diagnostic-sizeof-pointer-div</key>
    <name>clang-diagnostic-sizeof-pointer-div</name>
    <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: '%0' will return the size of the pointer, not the array itself</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wsizeof-pointer-div" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
    <severity>INFO</severity>
  <status>BETA</status>
    <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
    </rule>
<rule>
  <key>clang-diagnostic-avr-rtlib-linking-quirks</key>
  <name>clang-diagnostic-avr-rtlib-linking-quirks</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: no avr-gcc installation can be found on the system, cannot link standard libraries</li>
<li>warning: no avr-libc installation can be found on the system, cannot link standard libraries</li>
<li>warning: no target microcontroller specified on command line, cannot link standard libraries, please pass -mmcu=&lt;mcu name&gt;</li>
<li>warning: standard library not linked and so no interrupt vector table or compiler runtime routines will be linked</li>
<li>warning: support for linking stdlibs for microcontroller '%0' is not implemented</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wavr-rtlib-linking-quirks" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-export-unnamed</key>
  <name>clang-diagnostic-export-unnamed</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 does not permit %select{an empty|a static_assert}0 declaration to appear in an export block</li>
<li>warning: ISO C++20 does not permit a declaration that does not introduce any names to be exported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexport-unnamed" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-export-using-directive</key>
  <name>clang-diagnostic-export-using-directive</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: ISO C++20 does not permit using directive to be exported</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wexport-using-directive" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-type-limits</key>
  <name>clang-diagnostic-type-limits</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: result of comparison %select{%3|%1}0 %2 %select{%1|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned enum expression}0 %2 %select{unsigned enum expression|%3}0 is always %4</li>
<li>warning: result of comparison of %select{%3|unsigned expression}0 %2 %select{unsigned expression|%3}0 is always %4</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wtype-limits" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>clang-diagnostic-underaligned-exception-object</key>
  <name>clang-diagnostic-underaligned-exception-object</name>
  <description><![CDATA[
      <p>Diagnostic text:</p>
<ul>
<li>warning: underaligned exception object thrown</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/docs/DiagnosticsReference.html#wunderaligned-exception-object" target="_blank">Diagnostic flags in Clang</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>  
<rule>
  <key>abseil-duration-addition</key>
  <name>abseil-duration-addition</name>
  <description><![CDATA[
      <h1 id="abseil-duration-addition">abseil-duration-addition</h1>
<p>Check for cases where addition should be performed in the <code>absl::Time</code> domain. When adding two values, and one is known to be an <code>absl::Time</code>, we can infer that the other should be interpreted as an <code>absl::Duration</code> of a similar scale, and make that inference explicit.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Addition in the integer domain
int x;
absl::Time t;
int result = absl::ToUnixSeconds(t) + x;

// Suggestion - Addition in the absl::Time domain
int result = absl::ToUnixSeconds(t + absl::Seconds(x));</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-addition.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-comparison</key>
  <name>abseil-duration-comparison</name>
  <description><![CDATA[
      <h1 id="abseil-duration-comparison">abseil-duration-comparison</h1>
<p>Checks for comparisons which should be in the <code>absl::Duration</code> domain instead of the floating point or integer domains.</p>
<p>N.B.: In cases where a <code>Duration</code> was being converted to an integer and then compared against a floating-point value, truncation during the <code>Duration</code> conversion might yield a different result. In practice this is very rare, and still indicates a bug which should be fixed.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Comparison in the floating point domain
double x;
absl::Duration d;
if (x &lt; absl::ToDoubleSeconds(d)) ...

// Suggested - Compare in the absl::Duration domain instead
if (absl::Seconds(x) &lt; d) ...


// Original - Comparison in the integer domain
int x;
absl::Duration d;
if (x &lt; absl::ToInt64Microseconds(d)) ...

// Suggested - Compare in the absl::Duration domain instead
if (absl::Microseconds(x) &lt; d) ...</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-comparison.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-conversion-cast</key>
  <name>abseil-duration-conversion-cast</name>
  <description><![CDATA[
      <h1 id="abseil-duration-conversion-cast">abseil-duration-conversion-cast</h1>
<p>Checks for casts of <code>absl::Duration</code> conversion functions, and recommends the right conversion function instead.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Cast from a double to an integer
absl::Duration d;
int i = static_cast&lt;int&gt;(absl::ToDoubleSeconds(d));

// Suggested - Use the integer conversion function directly.
int i = absl::ToInt64Seconds(d);


// Original - Cast from a double to an integer
absl::Duration d;
double x = static_cast&lt;double&gt;(absl::ToInt64Seconds(d));

// Suggested - Use the integer conversion function directly.
double x = absl::ToDoubleSeconds(d);</code></pre>
<p>Note: In the second example, the suggested fix could yield a different result, as the conversion to integer could truncate. In practice, this is very rare, and you should use <code>absl::Trunc</code> to perform this operation explicitly instead.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-conversion-cast.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-factory-float</key>
  <name>abseil-duration-factory-float</name>
  <description><![CDATA[
      <h1 id="abseil-duration-factory-float">abseil-duration-factory-float</h1>
<p>Checks for cases where the floating-point overloads of various <code>absl::Duration</code> factory functions are called when the more-efficient integer versions could be used instead.</p>
<p>This check will not suggest fixes for literals which contain fractional floating point values or non-literals. It will suggest removing superfluous casts.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Providing a floating-point literal.
absl::Duration d = absl::Seconds(10.0);

// Suggested - Use an integer instead.
absl::Duration d = absl::Seconds(10);


// Original - Explicitly casting to a floating-point type.
absl::Duration d = absl::Seconds(static_cast&lt;double&gt;(10));

// Suggested - Remove the explicit cast
absl::Duration d = absl::Seconds(10);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-factory-float.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-factory-scale</key>
  <name>abseil-duration-factory-scale</name>
  <description><![CDATA[
      <h1 id="abseil-duration-factory-scale">abseil-duration-factory-scale</h1>
<p>Checks for cases where arguments to <code>absl::Duration</code> factory functions are scaled internally and could be changed to a different factory function. This check also looks for arguements with a zero value and suggests using <code>absl::ZeroDuration()</code> instead.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Internal multiplication.
int x;
absl::Duration d = absl::Seconds(60 * x);

// Suggested - Use absl::Minutes instead.
absl::Duration d = absl::Minutes(x);


// Original - Internal division.
int y;
absl::Duration d = absl::Milliseconds(y / 1000.);

// Suggested - Use absl:::Seconds instead.
absl::Duration d = absl::Seconds(y);


// Original - Zero-value argument.
absl::Duration d = absl::Hours(0);

// Suggested = Use absl::ZeroDuration instead
absl::Duration d = absl::ZeroDuration();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-factory-scale.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-subtraction</key>
  <name>abseil-duration-subtraction</name>
  <description><![CDATA[
      <h1 id="abseil-duration-subtraction">abseil-duration-subtraction</h1>
<p>Checks for cases where subtraction should be performed in the <code>absl::Duration</code> domain. When subtracting two values, and the first one is known to be a conversion from <code>absl::Duration</code>, we can infer that the second should also be interpreted as an <code>absl::Duration</code>, and make that inference explicit.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Subtraction in the double domain
double x;
absl::Duration d;
double result = absl::ToDoubleSeconds(d) - x;

// Suggestion - Subtraction in the absl::Duration domain instead
double result = absl::ToDoubleSeconds(d - absl::Seconds(x));

// Original - Subtraction of two Durations in the double domain
absl::Duration d1, d2;
double result = absl::ToDoubleSeconds(d1) - absl::ToDoubleSeconds(d2);

// Suggestion - Subtraction in the absl::Duration domain instead
double result = absl::ToDoubleSeconds(d1 - d2);</code></pre>
<p>Note: As with other <code>clang-tidy</code> checks, it is possible that multiple fixes may overlap (as in the case of nested expressions), so not all occurences can be transformed in one run. In particular, this may occur for nested subtraction expressions. Running <code>clang-tidy</code> multiple times will find and fix these overlaps.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-subtraction.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-duration-unnecessary-conversion</key>
  <name>abseil-duration-unnecessary-conversion</name>
  <description><![CDATA[
      <h1 id="abseil-duration-unnecessary-conversion">abseil-duration-unnecessary-conversion</h1>
<p>Finds and fixes cases where <code>absl::Duration</code> values are being converted to numeric types and back again.</p>
<p>Floating-point examples:</p>
<pre class="sourceCode c++"><code>// Original - Conversion to double and back again
absl::Duration d1;
absl::Duration d2 = absl::Seconds(absl::ToDoubleSeconds(d1));

// Suggestion - Remove unnecessary conversions
absl::Duration d2 = d1;

// Original - Division to convert to double and back again
absl::Duration d2 = absl::Seconds(absl::FDivDuration(d1, absl::Seconds(1)));

// Suggestion - Remove division and conversion
absl::Duration d2 = d1;</code></pre>
<p>Integer examples:</p>
<pre class="sourceCode c++"><code>// Original - Conversion to integer and back again
absl::Duration d1;
absl::Duration d2 = absl::Hours(absl::ToInt64Hours(d1));

// Suggestion - Remove unnecessary conversions
absl::Duration d2 = d1;

// Original - Integer division followed by conversion
absl::Duration d2 = absl::Seconds(d1 / absl::Seconds(1));

// Suggestion - Remove division and conversion
absl::Duration d2 = d1;</code></pre>
<p>Note: Converting to an integer and back to an <code>absl::Duration</code> might be a truncating operation if the value is not aligned to the scale of conversion. In the rare case where this is the intended result, callers should use <code>absl::Trunc</code> to truncate explicitly.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-duration-unnecessary-conversion.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-time-comparison</key>
  <name>abseil-time-comparison</name>
  <description><![CDATA[
      <h1 id="abseil-time-comparison">abseil-time-comparison</h1>
<p>Prefer comparisons in the <code>absl::Time</code> domain instead of the integer domain.</p>
<p>N.B.: In cases where an <code>absl::Time</code> is being converted to an integer, alignment may occur. If the comparison depends on this alignment, doing the comparison in the <code>absl::Time</code> domain may yield a different result. In practice this is very rare, and still indicates a bug which should be fixed.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>// Original - Comparison in the integer domain
int x;
absl::Time t;
if (x &lt; absl::ToUnixSeconds(t)) ...

// Suggested - Compare in the absl::Time domain instead
if (absl::FromUnixSeconds(x) &lt; t) ...</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-time-comparison.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-time-subtraction</key>
  <name>abseil-time-subtraction</name>
  <description><![CDATA[
      <h1 id="abseil-time-subtraction">abseil-time-subtraction</h1>
<p>Finds and fixes <code>absl::Time</code> subtraction expressions to do subtraction in the Time domain instead of the numeric domain.</p>
<p>There are two cases of Time subtraction in which deduce additional type information:</p>
<ul>
<li>When the result is an <code>absl::Duration</code> and the first argument is an <code>absl::Time</code>.</li>
<li>When the second argument is a <code>absl::Time</code>.</li>
</ul>
<p>In the first case, we must know the result of the operation, since without that the second operand could be either an <code>absl::Time</code> or an <code>absl::Duration</code>. In the second case, the first operand <em>must</em> be an <code>absl::Time</code>, because subtracting an <code>absl::Time</code> from an <code>absl::Duration</code> is not defined.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>int x;
absl::Time t;

// Original - absl::Duration result and first operand is a absl::Time.
absl::Duration d = absl::Seconds(absl::ToUnixSeconds(t) - x);

// Suggestion - Perform subtraction in the Time domain instead.
absl::Duration d = t - absl::FromUnixSeconds(x);


// Original - Second operand is an absl::Time.
int i = x - absl::ToUnixSeconds(t);

// Suggestion - Perform subtraction in the Time domain instead.
int i = absl::ToInt64Seconds(absl::FromUnixSeconds(x) - t);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-time-subtraction.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>abseil-upgrade-duration-conversions</key>
  <name>abseil-upgrade-duration-conversions</name>
  <description><![CDATA[
      <h1 id="abseil-upgrade-duration-conversions">abseil-upgrade-duration-conversions</h1>
<p>Finds calls to <code>absl::Duration</code> arithmetic operators and factories whose argument needs an explicit cast to continue compiling after upcoming API changes.</p>
<p>The operators <code>*=</code>, <code>/=</code>, <code>*</code>, and <code>/</code> for <code>absl::Duration</code> currently accept an argument of class type that is convertible to an arithmetic type. Such a call currently converts the value to an <code>int64_t</code>, even in a case such as <code>std::atomic&lt;float&gt;</code> that would result in lossy conversion.</p>
<p>Additionally, the <code>absl::Duration</code> factory functions (<code>absl::Hours</code>, <code>absl::Minutes</code>, etc) currently accept an <code>int64_t</code> or a floating-point type. Similar to the arithmetic operators, calls with an argument of class type that is convertible to an arithmetic type go through the <code>int64_t</code> path.</p>
<p>These operators and factories will be changed to only accept arithmetic types to prevent unintended behavior. After these changes are released, passing an argument of class type will no longer compile, even if the type is implicitly convertible to an arithmetic type.</p>
<p>Here are example fixes created by this check:</p>
<pre class="sourceCode c++"><code>std::atomic&lt;int&gt; a;
absl::Duration d = absl::Milliseconds(a);
d *= a;</code></pre>
<p>becomes</p>
<pre class="sourceCode c++"><code>std::atomic&lt;int&gt; a;
absl::Duration d = absl::Milliseconds(static_cast&lt;int64_t&gt;(a));
d *= static_cast&lt;int64_t&gt;(a);</code></pre>
<p>Note that this check always adds a cast to <code>int64_t</code> in order to preserve the current behavior of user code. It is possible that this uncovers unintended behavior due to types implicitly convertible to a floating-point type.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/abseil-upgrade-duration-conversions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-pipe</key>
  <name>android-cloexec-pipe</name>
  <description><![CDATA[
      <h1 id="android-cloexec-pipe">android-cloexec-pipe</h1>
<p>This check detects usage of <code>pipe()</code>. Using <code>pipe()</code> is not recommended, <code>pipe2()</code> is the suggested replacement. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>pipe(pipefd);</code></pre>
<p>Suggested replacement:</p>
<pre class="sourceCode c++"><code>pipe2(pipefd, O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-pipe.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>android-cloexec-pipe2</key>
  <name>android-cloexec-pipe2</name>
  <description><![CDATA[
      <h1 id="android-cloexec-pipe2">android-cloexec-pipe2</h1>
<p>This checks ensures that pipe2() is called with the O_CLOEXEC flag. The check also adds the O_CLOEXEC flag that marks the file descriptor to be closed in child processes. Without this flag a sensitive file descriptor can be leaked to a child process, potentially into a lower-privileged SELinux domain.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>pipe2(pipefd, O_NONBLOCK);</code></pre>
<p>Suggested replacement:</p>
<pre class="sourceCode c++"><code>pipe2(pipefd, O_NONBLOCK | O_CLOEXEC);</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/android-cloexec-pipe2.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-branch-clone</key>
  <name>bugprone-branch-clone</name>
  <description><![CDATA[
      <h1 id="bugprone-branch-clone">bugprone-branch-clone</h1>
<p>Checks for repeated branches in <code>if/else if/else</code> chains, consecutive repeated branches in <code>switch</code> statements and indentical true and false branches in conditional operators.</p>
<pre class="sourceCode c++"><code>if (test_value(x)) {
  y++;
  do_something(x, y);
} else {
  y++;
  do_something(x, y);
}</code></pre>
<p>In this simple example (which could arise e.g. as a copy-paste error) the <code>then</code> and <code>else</code> branches are identical and the code is equivalent the following shorter and cleaner code:</p>
<pre class="sourceCode c++"><code>test_value(x); // can be omitted unless it has side effects
y++;
do_something(x, y);</code></pre>
<p>If this is the inteded behavior, then there is no reason to use a conditional statement; otherwise the issue can be solved by fixing the branch that is handled incorrectly.</p>
<p>The check also detects repeated branches in longer <code>if/else if/else</code> chains where it would be even harder to notice the problem.</p>
<p>In <code>switch</code> statements the check only reports repeated branches when they are consecutive, because it is relatively common that the <code>case:</code> labels have some natural ordering and rearranging them would decrease the readability of the code. For example:</p>
<pre class="sourceCode c++"><code>switch (ch) {
case &#39;a&#39;:
  return 10;
case &#39;A&#39;:
  return 10;
case &#39;b&#39;:
  return 11;
case &#39;B&#39;:
  return 11;
default:
  return 10;
}</code></pre>
<p>Here the check reports that the <code>'a'</code> and <code>'A'</code> branches are identical (and that the <code>'b'</code> and <code>'B'</code> branches are also identical), but does not report that the <code>default:</code> branch is also idenical to the first two branches. If this is indeed the correct behavior, then it could be implemented as:</p>
<pre class="sourceCode c++"><code>switch (ch) {
case &#39;a&#39;:
case &#39;A&#39;:
  return 10;
case &#39;b&#39;:
case &#39;B&#39;:
  return 11;
default:
  return 10;
}</code></pre>
<p>Here the check does not warn for the repeated <code>return 10;</code>, which is good if we want to preserve that <code>'a'</code> is before <code>'b'</code> and <code>default:</code> is the last branch.</p>
<p>Finally, the check also examines conditional operators and reports code like:</p>
<pre class="sourceCode c++"><code>return test_value(x) ? x : x;</code></pre>
<p>Unlike if statements, the check does not detect chains of conditional operators.</p>
<p>Note: This check also reports situations where branches become identical only after preprocession.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-branch-clone.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-posix-return</key>
  <name>bugprone-posix-return</name>
  <description><![CDATA[
      <h1 id="bugprone-posix-return">bugprone-posix-return</h1>
<p>Checks if any calls to POSIX functions (except <code>posix_openpt</code>) expect negative return values. These functions return either <code>0</code> on success or an <code>errno</code> on failure, which is positive only.</p>
<p>Example buggy usage looks like:</p>
<pre class="sourceCode c"><code>if (posix_fadvise(...) &lt; 0) {</code></pre>
<p>This will never happen as the return value is always non-negative. A simple fix could be:</p>
<pre class="sourceCode c"><code>if (posix_fadvise(...) &gt; 0) {</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-posix-return.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-too-small-loop-variable</key>
  <name>bugprone-too-small-loop-variable</name>
  <description><![CDATA[
      <h1 id="bugprone-too-small-loop-variable">bugprone-too-small-loop-variable</h1>
<p>Detects those <code>for</code> loops that have a loop variable with a &quot;too small&quot; type which means this type can't represent all values which are part of the iteration range.</p>
<pre class="sourceCode c++"><code>int main() {
  long size = 294967296l;
  for (short i = 0; i &lt; size; ++i) {}
}</code></pre>
<p>This <code>for</code> loop is an infinite loop because the <code>short</code> type can't represent all values in the <code>[0..size]</code> interval.</p>
<p>In a real use case size means a container's size which depends on the user input.</p>
<pre class="sourceCode c++"><code>int doSomething(const std::vector&amp; items) {
  for (short i = 0; i &lt; items.size(); ++i) {}
}</code></pre>
<p>This algorithm works for small amount of objects, but will lead to freeze for a a larger user input.</p>
<pre class="sourceCode c++"><code>int main() {
  long size = 294967296l;
  for (unsigned i = 0; i &lt; size; ++i) {} // no warning with MagnitudeBitsUpperLimit = 31 on a system where unsigned is 32-bit
  for (int i = 0; i &lt; size; ++i) {} // warning with MagnitudeBitsUpperLimit = 31 on a system where int is 32-bit
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-too-small-loop-variable.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>bugprone-unhandled-self-assignment</key>
  <name>bugprone-unhandled-self-assignment</name>
  <description><![CDATA[
      <h1 id="bugprone-unhandled-self-assignment">bugprone-unhandled-self-assignment</h1>
<p>cert-oop54-cpp redirects here as an alias for this check. For the CERT alias, the WarnOnlyIfThisHasSuspiciousField option is set to 0.</p>
<p>Finds user-defined copy assignment operators which do not protect the code against self-assignment either by checking self-assignment explicitly or using the copy-and-swap or the copy-and-move method.</p>
<p>By default, this check searches only those classes which have any pointer or C array field to avoid false positives. In case of a pointer or a C array, it's likely that self-copy assignment breaks the object if the copy assignment operator was not written with care.</p>
<p>See also: <a href="https://wiki.sei.cmu.edu/confluence/display/cplusplus/OOP54-CPP.+Gracefully+handle+self-copy+assignment">OOP54-CPP. Gracefully handle self-copy assignment</a></p>
<p>A copy assignment operator must prevent that self-copy assignment ruins the object state. A typical use case is when the class has a pointer field and the copy assignment operator first releases the pointed object and then tries to assign it:</p>
<pre class="sourceCode c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    delete p;
    p = new int(*rhs.p);
    return *this;
  }
};</code></pre>
<p>There are two common C++ patterns to avoid this problem. The first is the self-assignment check:</p>
<pre class="sourceCode c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    if(this == &amp;rhs)
      return *this;

    delete p;
    p = new int(*rhs.p);
    return *this;
  }
};</code></pre>
<p>The second one is the copy-and-swap method when we create a temporary copy (using the copy constructor) and then swap this temporary object with <code>this</code>:</p>
<pre class="sourceCode c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  void swap(T &amp;rhs) {
    using std::swap;
    swap(p, rhs.p);
  }

  T&amp; operator=(const T &amp;rhs) {
    T(rhs).swap(*this);
    return *this;
  }
};</code></pre>
<p>There is a third pattern which is less common. Let's call it the copy-and-move method when we create a temporary copy (using the copy constructor) and then move this temporary object into <code>this</code> (needs a move assignment operator):</p>
<pre class="sourceCode c++"><code>class T {
int* p;

public:
  T(const T &amp;rhs) : p(rhs.p ? new int(*rhs.p) : nullptr) {}
  ~T() { delete p; }

  // ...

  T&amp; operator=(const T &amp;rhs) {
    T t = rhs;
    *this = std::move(t);
    return *this;
  }

  T&amp; operator=(T &amp;&amp;rhs) {
    p = rhs.p;
    rhs.p = nullptr;
    return *this;
  }
};</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/bugprone-unhandled-self-assignment.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-dcl16-c</key>
  <name>cert-dcl16-c</name>
  <description><![CDATA[
      <h1 id="cert-dcl16-c">cert-dcl16-c</h1>
<p>The cert-dcl16-c check is an alias, please see <a href="readability-uppercase-literal-suffix.html">readability-uppercase-literal-suffix</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-dcl16-c.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cert-oop54-cpp</key>
  <name>cert-oop54-cpp</name>
  <description><![CDATA[
      <h1 id="cert-oop54-cpp">cert-oop54-cpp</h1>
<p>The cert-oop54-cpp check is an alias, please see <a href="bugprone-unhandled-self-assignment.html">bugprone-unhandled-self-assignment</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cert-oop54-cpp.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-avoid-c-arrays</key>
  <name>cppcoreguidelines-avoid-c-arrays</name>
  <description><![CDATA[
      <h1 id="cppcoreguidelines-avoid-c-arrays">cppcoreguidelines-avoid-c-arrays</h1>
<p>The cppcoreguidelines-avoid-c-arrays check is an alias, please see <a href="modernize-avoid-c-arrays.html">modernize-avoid-c-arrays</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-explicit-virtual-functions</key>
  <name>cppcoreguidelines-explicit-virtual-functions</name>
  <description><![CDATA[
      <h1 id="cppcoreguidelines-explicit-virtual-functions">cppcoreguidelines-explicit-virtual-functions</h1>
<p>The cppcoreguidelines-explicit-virtual-functions check is an alias, please see <a href="modernize-use-override.html">modernize-use-override</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-explicit-virtual-functions.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-macro-usage</key>
  <name>cppcoreguidelines-macro-usage</name>
  <description><![CDATA[
      <h1 id="cppcoreguidelines-macro-usage">cppcoreguidelines-macro-usage</h1>
<p>Finds macro usage that is considered problematic because better language constructs exist for the task.</p>
<p>The relevant sections in the C++ Core Guidelines are <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#enum1-prefer-enumerations-over-macros">Enum.1</a>, <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es30-dont-use-macros-for-program-text-manipulation">ES.30</a>, <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es31-dont-use-macros-for-constants-or-functions">ES.31</a> and <a href="https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#es33-if-you-must-use-macros-give-them-unique-names">ES.33</a>.</p>
<h2 id="options">Options</h2>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-macro-usage.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>cppcoreguidelines-non-private-member-variables-in-classes</key>
  <name>cppcoreguidelines-non-private-member-variables-in-classes</name>
  <description><![CDATA[
      <h1 id="cppcoreguidelines-non-private-member-variables-in-classes">cppcoreguidelines-non-private-member-variables-in-classes</h1>
<p>The cppcoreguidelines-non-private-member-variables-in-classes check is an alias, please see <a href="misc-non-private-member-variables-in-classes.html">misc-non-private-member-variables-in-classes</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/cppcoreguidelines-non-private-member-variables-in-classes.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-default-arguments-calls</key>
  <name>fuchsia-default-arguments-calls</name>
  <description><![CDATA[
      <h1 id="fuchsia-default-arguments-calls">fuchsia-default-arguments-calls</h1>
<p>Warns if a function or method is called with default arguments.</p>
<p>For example, given the declaration:</p>
<pre class="sourceCode c++"><code>int foo(int value = 5) { return value; }</code></pre>
<p>A function call expression that uses a default argument will be diagnosed. Calling it without defaults will not cause a warning:</p>
<pre class="sourceCode c++"><code>foo();  // warning
foo(0); // no warning</code></pre>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments-calls.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>fuchsia-default-arguments-declarations</key>
  <name>fuchsia-default-arguments-declarations</name>
  <description><![CDATA[
      <h1 id="fuchsia-default-arguments-declarations">fuchsia-default-arguments-declarations</h1>
<p>Warns if a function or method is declared with default parameters.</p>
<p>For example, the declaration:</p>
<pre class="sourceCode c++"><code>int foo(int value = 5) { return value; }</code></pre>
<p>will cause a warning.</p>
<p>See the features disallowed in Fuchsia at <a href="https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md" class="uri">https://fuchsia.googlesource.com/zircon/+/master/docs/cxx.md</a></p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/fuchsia-default-arguments-declarations.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-objc-avoid-nsobject-new</key>
  <name>google-objc-avoid-nsobject-new</name>
  <description><![CDATA[
      <h1 id="google-objc-avoid-nsobject-new">google-objc-avoid-nsobject-new</h1>
<p>Finds calls to <code>+new</code> or overrides of it, which are prohibited by the Google Objective-C style guide.</p>
<p>The Google Objective-C style guide forbids calling <code>+new</code> or overriding it in class implementations, preferring <code>+alloc</code> and <code>-init</code> methods to instantiate objects.</p>
<p>An example:</p>
<pre class="sourceCode objc"><code>NSDate *now = [NSDate new];
Foo *bar = [Foo new];</code></pre>
<p>Instead, code should use <code>+alloc</code>/<code>-init</code> or class factory methods.</p>
<pre class="sourceCode objc"><code>NSDate *now = [NSDate date];
Foo *bar = [[Foo alloc] init];</code></pre>
<p>This check corresponds to the Google Objective-C Style Guide rule <a href="https://google.github.io/styleguide/objcguide.html#do-not-use-new">Do Not Use +new</a>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-objc-avoid-nsobject-new.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-objc-function-naming</key>
  <name>google-objc-function-naming</name>
  <description><![CDATA[
      <h1 id="google-objc-function-naming">google-objc-function-naming</h1>
<p>Finds function declarations in Objective-C files that do not follow the pattern described in the Google Objective-C Style Guide.</p>
<p>The corresponding style guide rule can be found here: <a href="https://google.github.io/styleguide/objcguide.html#function-names" class="uri">https://google.github.io/styleguide/objcguide.html#function-names</a></p>
<p>All function names should be in Pascal case. Functions whose storage class is not static should have an appropriate prefix.</p>
<p>The following code sample does not follow this pattern:</p>
<pre class="sourceCode objc"><code>static bool is_positive(int i) { return i &gt; 0; }
bool IsNegative(int i) { return i &lt; 0; }</code></pre>
<p>The sample above might be corrected to the following code:</p>
<pre class="sourceCode objc"><code>static bool IsPositive(int i) { return i &gt; 0; }
bool *ABCIsNegative(int i) { return i &lt; 0; }</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-objc-function-naming.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>google-readability-avoid-underscore-in-googletest-name</key>
  <name>google-readability-avoid-underscore-in-googletest-name</name>
  <description><![CDATA[
      <h1 id="google-readability-avoid-underscore-in-googletest-name">google-readability-avoid-underscore-in-googletest-name</h1>
<p>Checks whether there are underscores in googletest test and test case names in test macros:</p>
<ul>
<li><code>TEST</code></li>
<li><code>TEST_F</code></li>
<li><code>TEST_P</code></li>
<li><code>TYPED_TEST</code></li>
<li><code>TYPED_TEST_P</code></li>
</ul>
<p>The <code>FRIEND_TEST</code> macro is not included.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>TEST(TestCaseName, Illegal_TestName) {}
TEST(Illegal_TestCaseName, TestName) {}</code></pre>
<p>would trigger the check. <a href="https://github.com/google/googletest/blob/master/googletest/docs/faq.md#why-should-test-suite-names-and-test-names-not-contain-underscore">Underscores are not allowed</a> in test names nor test case names.</p>
<p>The <code>DISABLED_</code> prefix, which may be used to <a href="https://github.com/google/googletest/blob/master/googletest/docs/faq.md#why-should-test-suite-names-and-test-names-not-contain-underscore">disable individual tests</a>, is ignored when checking test names, but the rest of the rest of the test name is still checked.</p>
<p>This check does not propose any fixes.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/google-readability-avoid-underscore-in-googletest-name.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-avoid-c-arrays</key>
  <name>hicpp-avoid-c-arrays</name>
  <description><![CDATA[
      <h1 id="hicpp-avoid-c-arrays">hicpp-avoid-c-arrays</h1>
<p>The hicpp-avoid-c-arrays check is an alias, please see <a href="modernize-avoid-c-arrays.html">modernize-avoid-c-arrays</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>hicpp-uppercase-literal-suffix</key>
  <name>hicpp-uppercase-literal-suffix</name>
  <description><![CDATA[
      <h1 id="hicpp-uppercase-literal-suffix">hicpp-uppercase-literal-suffix</h1>
<p>The hicpp-uppercase-literal-suffix check is an alias, please see <a href="readability-uppercase-literal-suffix.html">readability-uppercase-literal-suffix</a> for more information.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/hicpp-uppercase-literal-suffix.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>llvm-prefer-isa-or-dyn-cast-in-conditionals</key>
  <name>llvm-prefer-isa-or-dyn-cast-in-conditionals</name>
  <description><![CDATA[
      <h1 id="llvm-prefer-isa-or-dyn-cast-in-conditionals">llvm-prefer-isa-or-dyn-cast-in-conditionals</h1>
<p>Looks at conditionals and finds and replaces cases of <code>cast&lt;&gt;</code>, which will assert rather than return a null pointer, and <code>dyn_cast&lt;&gt;</code> where the return value is not captured. Additionally, finds and replaces cases that match the pattern <code>var &amp;&amp; isa&lt;X&gt;(var)</code>, where <code>var</code> is evaluated twice.</p>
<pre class="sourceCode c++"><code>// Finds these:
if (auto x = cast&lt;X&gt;(y)) {}
// is replaced by:
if (auto x = dyn_cast&lt;X&gt;(y)) {}

if (cast&lt;X&gt;(y)) {}
// is replaced by:
if (isa&lt;X&gt;(y)) {}

if (dyn_cast&lt;X&gt;(y)) {}
// is replaced by:
if (isa&lt;X&gt;(y)) {}

if (var &amp;&amp; isa&lt;T&gt;(var)) {}
// is replaced by:
if (isa_and_nonnull&lt;T&gt;(var.foo())) {}

// Other cases are ignored, e.g.:
if (auto f = cast&lt;Z&gt;(y)-&gt;foo()) {}
if (cast&lt;Z&gt;(y)-&gt;foo()) {}
if (X.cast(y)) {}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/llvm-prefer-isa-or-dyn-cast-in-conditionals.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>misc-non-private-member-variables-in-classes</key>
  <name>misc-non-private-member-variables-in-classes</name>
  <description><![CDATA[
      <h1 id="misc-non-private-member-variables-in-classes">misc-non-private-member-variables-in-classes</h1>
<p>cppcoreguidelines-non-private-member-variables-in-classes redirects here as an alias for this check.</p>
<p>Finds classes that contain non-static data members in addition to user-declared non-static member functions and diagnose all data members declared with a non-<code>public</code> access specifier. The data members should be declared as <code>private</code> and accessed through member functions instead of exposed to derived classes or class consumers.</p>
<h2 id="options">Options</h2>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/misc-non-private-member-variables-in-classes.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-avoid-c-arrays</key>
  <name>modernize-avoid-c-arrays</name>
  <description><![CDATA[
      <h1 id="modernize-avoid-c-arrays">modernize-avoid-c-arrays</h1>
<p>cppcoreguidelines-avoid-c-arrays redirects here as an alias for this check.</p>
<p>hicpp-avoid-c-arrays redirects here as an alias for this check.</p>
<p>Finds C-style array types and recommend to use <code>std::array&lt;&gt;</code> / <code>std::vector&lt;&gt;</code>. All types of C arrays are diagnosed.</p>
<p>However, fix-it are potentially dangerous in header files and are therefore not emitted right now.</p>
<pre class="sourceCode c++"><code>int a[] = {1, 2}; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

int b[1]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

void foo() {
  int c[b[0]]; // warning: do not declare C VLA arrays, use std::vector&lt;&gt; instead
}

template &lt;typename T, int Size&gt;
class array {
  T d[Size]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

  int e[1]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead
};

array&lt;int[4], 2&gt; d; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead

using k = int[4]; // warning: do not declare C-style arrays, use std::array&lt;&gt; instead</code></pre>
<p>However, the <code>extern &quot;C&quot;</code> code is ignored, since it is common to share such headers between C code, and C++ code.</p>
<pre class="sourceCode c++"><code>// Some header
extern &quot;C&quot; {

int f[] = {1, 2}; // not diagnosed

int j[1]; // not diagnosed

inline void bar() {
  {
    int j[j[0]]; // not diagnosed
  }
}

}</code></pre>
<p>Similarly, the <code>main()</code> function is ignored. Its second and third parameters can be either <code>char* argv[]</code> or <code>char** argv</code>, but can not be <code>std::array&lt;&gt;</code>.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-avoid-c-arrays.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-concat-nested-namespaces</key>
  <name>modernize-concat-nested-namespaces</name>
  <description><![CDATA[
      <h1 id="modernize-concat-nested-namespaces">modernize-concat-nested-namespaces</h1>
<p>Checks for use of nested namespaces such as <code>namespace a { namespace b { ... } }</code> and suggests changing to the more concise syntax introduced in C++17: <code>namespace a::b { ... }</code>. Inline namespaces are not modified.</p>
<p>For example:</p>
<pre class="sourceCode c++"><code>namespace n1 {
namespace n2 {
void t();
}
}

namespace n3 {
namespace n4 {
namespace n5 {
void t();
}
}
namespace n6 {
namespace n7 {
void t();
}
}
}</code></pre>
<p>Will be modified to:</p>
<pre class="sourceCode c++"><code>namespace n1::n2 {
void t();
}

namespace n3 {
namespace n4::n5 {
void t();
}
namespace n6::n7 {
void t();
}
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-concat-nested-namespaces.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-deprecated-ios-base-aliases</key>
  <name>modernize-deprecated-ios-base-aliases</name>
  <description><![CDATA[
      <h1 id="modernize-deprecated-ios-base-aliases">modernize-deprecated-ios-base-aliases</h1>
<p>Detects usage of the deprecated member types of <code>std::ios_base</code> and replaces those that have a non-deprecated equivalent.</p>
<table>
<thead>
<tr class="header">
<th>Deprecated member type</th>
<th>Replacement</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>std::ios_base::io_state</code></td>
<td><code>std::ios_base::iostate</code></td>
</tr>
<tr class="even">
<td><code>std::ios_base::open_mode</code></td>
<td><code>std::ios_base::openmode</code></td>
</tr>
<tr class="odd">
<td><code>std::ios_base::seek_dir</code></td>
<td><code>std::ios_base::seekdir</code></td>
</tr>
<tr class="even">
<td><code>std::ios_base::streamoff</code></td>
<td></td>
</tr>
<tr class="odd">
<td><code>std::ios_base::streampos</code></td>
<td></td>
</tr>
</tbody>
</table>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-deprecated-ios-base-aliases.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-nodiscard</key>
  <name>modernize-use-nodiscard</name>
  <description><![CDATA[
      <h1 id="modernize-use-nodiscard">modernize-use-nodiscard</h1>
<p>Adds <code>[[nodiscard]]</code> attributes (introduced in C++17) to member functions in order to highlight at compile time which return values should not be ignored.</p>
<p>Member functions need to satisfy the following conditions to be considered by this check:</p>
<blockquote>
<ul>
<li>no <code>[[nodiscard]]</code>, <code>[[noreturn]]</code>, <code>__attribute__((warn_unused_result))</code>, <code>[[clang::warn_unused_result]]</code> nor <code>[[gcc::warn_unused_result]]</code> attribute,</li>
<li>non-void return type,</li>
<li>non-template return types,</li>
<li>const member function,</li>
<li>non-variadic functions,</li>
<li>no non-const reference parameters,</li>
<li>no pointer parameters,</li>
<li>no template parameters,</li>
<li>no template function parameters,</li>
<li>not be a member of a class with mutable member variables,</li>
<li>no Lambdas,</li>
<li>no conversion functions.</li>
</ul>
</blockquote>
<p>Such functions have no means of altering any state or passing values other than via the return type. Unless the member functions are altering state via some external call (e.g. I/O).</p>
<h2 id="example">Example</h2>
<pre class="sourceCode c++"><code>bool empty() const;
bool empty(int i) const;</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>[[nodiscard] bool empty() const;
[[nodiscard] bool empty(int i) const;</code></pre>
<h2 id="options">Options</h2>
<h3 id="example-1">Example</h3>
<pre class="sourceCode c++"><code>bool empty() const;
bool empty(int i) const;</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>NO_DISCARD bool empty() const;
NO_DISCARD bool empty(int i) const;</code></pre>
<p>if the ReplacementString option is set to NO_DISCARD.</p>
<blockquote>
<p><strong>note</strong></p>
<p>If the ReplacementString is not a C++ attribute, but instead a macro, then that macro must be defined in scope or the fix-it will not be applied.</p>
</blockquote>
<blockquote>
<p><strong>note</strong></p>
<p>For alternative <code>__attribute__</code> syntax options to mark functions as <code>[[nodiscard]]</code> in non-c++17 source code. See <a href="https://clang.llvm.org/docs/AttributeReference.html#nodiscard-warn-unused-result" class="uri">https://clang.llvm.org/docs/AttributeReference.html#nodiscard-warn-unused-result</a></p>
</blockquote>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-nodiscard.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>modernize-use-trailing-return-type</key>
  <name>modernize-use-trailing-return-type</name>
  <description><![CDATA[
      <h1 id="modernize-use-trailing-return-type">modernize-use-trailing-return-type</h1>
<p>Rewrites function signatures to use a trailing return type (introduced in C++11). This transformation is purely stylistic. The return type before the function name is replaced by <code>auto</code> and inserted after the function parameter list (and qualifiers).</p>
<h2 id="example">Example</h2>
<pre class="sourceCode c++"><code>int f1();
inline int f2(int arg) noexcept;
virtual float f3() const &amp;&amp; = delete;</code></pre>
<p>transforms to:</p>
<pre class="sourceCode c++"><code>auto f1() -&gt; int;
inline auto f2(int arg) -&gt; int noexcept;
virtual auto f3() const &amp;&amp; -&gt; float = delete;</code></pre>
<h2 id="known-limitations">Known Limitations</h2>
<p>The following categories of return types cannot be rewritten currently: * function pointers * member function pointers * member pointers * decltype, when it is the top level expression</p>
<p>Unqualified names in the return type might erroneously refer to different entities after the rewrite. Preventing such errors requires a full lookup of all unqualified names present in the return type in the scope of the trailing return type location. This location includes e.g. function parameter names and members of the enclosing class (including all inherited classes). Such a lookup is currently not implemented.</p>
<p>Given the following piece of code</p>
<pre class="sourceCode c++"><code>struct Object { long long value; };
Object f(unsigned Object) { return {Object * 2}; }
class CC {
  int Object;
  struct Object m();
};
Object CC::m() { return {0}; }</code></pre>
<p>a careless rewrite would produce the following output:</p>
<pre class="sourceCode c++"><code>struct Object { long long value; };
auto f(unsigned Object) -&gt; Object { return {Object * 2}; } // error
class CC {
  int Object;
  auto m() -&gt; struct Object;
};
auto CC::m() -&gt; Object { return {0}; } // error</code></pre>
<p>This code fails to compile because the Object in the context of f refers to the equally named function parameter. Similarly, the Object in the context of m refers to the equally named class member. The check can currently only detect a clash with a function parameter name.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/modernize-use-trailing-return-type.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>objc-super-self</key>
  <name>objc-super-self</name>
  <description><![CDATA[
      <h1 id="objc-super-self">objc-super-self</h1>
<p>Finds invocations of <code>-self</code> on super instances in initializers of subclasses of <code>NSObject</code> and recommends calling a superclass initializer instead.</p>
<p>Invoking <code>-self</code> on super instances in initializers is a common programmer error when the programmer's original intent is to call a superclass initializer. Failing to call a superclass initializer breaks initializer chaining and can result in invalid object initialization.</p>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/objc-super-self.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>openmp-exception-escape</key>
  <name>openmp-exception-escape</name>
  <description><![CDATA[
      <h1 id="openmp-exception-escape">openmp-exception-escape</h1>
<p>Analyzes OpenMP Structured Blocks and checks that no exception escapes out of the Structured Block it was thrown in.</p>
<p>As per the OpenMP specification, a structured block is an executable statement, possibly compound, with a single entry at the top and a single exit at the bottom. Which means, <code>throw</code> may not be used to to 'exit' out of the structured block. If an exception is not caught in the same structured block it was thrown in, the behaviour is undefined.</p>
<p>FIXME: this check does not model SEH, <code>setjmp</code>/<code>longjmp</code>.</p>
<p>WARNING! This check may be expensive on large source files.</p>
<h2 id="options">Options</h2>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/openmp-exception-escape.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>openmp-use-default-none</key>
  <name>openmp-use-default-none</name>
  <description><![CDATA[
      <h1 id="openmp-use-default-none">openmp-use-default-none</h1>
<p>Finds OpenMP directives that are allowed to contain a <code>default</code> clause, but either don't specify it or the clause is specified but with the kind other than <code>none</code>, and suggests to use the <code>default(none)</code> clause.</p>
<p>Using <code>default(none)</code> clause forces developers to explicitly specify data sharing attributes for the variables referenced in the construct, thus making it obvious which variables are referenced, and what is their data sharing attribute, thus increasing readability and possibly making errors easier to spot.</p>
<h2 id="example">Example</h2>
<pre class="sourceCode c++"><code>// ``for`` directive can not have ``default`` clause, no diagnostics.
void n0(const int a) {
#pragma omp for
  for (int b = 0; b &lt; a; b++)
    ;
}

// ``parallel`` directive.

// ``parallel`` directive can have ``default`` clause, but said clause is not
// specified, diagnosed.
void p0_0() {
#pragma omp parallel
  ;
  // WARNING: OpenMP directive ``parallel`` does not specify ``default``
  //          clause. Consider specifying ``default(none)`` clause.
}

// ``parallel`` directive can have ``default`` clause, and said clause is
// specified, with ``none`` kind, all good.
void p0_1() {
#pragma omp parallel default(none)
  ;
}

// ``parallel`` directive can have ``default`` clause, and said clause is
// specified, but with ``shared`` kind, which is not ``none``, diagnose.
void p0_2() {
#pragma omp parallel default(shared)
  ;
  // WARNING: OpenMP directive ``parallel`` specifies ``default(shared)``
  //          clause. Consider using ``default(none)`` clause instead.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/openmp-use-default-none.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-const-return-type</key>
  <name>readability-const-return-type</name>
  <description><![CDATA[
      <h1 id="readability-const-return-type">readability-const-return-type</h1>
<p>Checks for functions with a <code>const</code>-qualified return type and recommends removal of the <code>const</code> keyword. Such use of const is usually superfluous, and can prevent valuable compiler optimizations. Does not (yet) fix trailing return types.</p>
<p>Examples:</p>
<pre class="sourceCode c++"><code>const int foo();
const Clazz foo();
Clazz *const foo();</code></pre>
<p>Note that this applies strictly to top-level qualification, which excludes pointers or references to const values. For example, these are fine:</p>
<pre class="sourceCode c++"><code>const int* foo();
const int&amp; foo();
const Clazz* foo();</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-const-return-type.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-isolate-declaration</key>
  <name>readability-isolate-declaration</name>
  <description><![CDATA[
      <h1 id="readability-isolate-declaration">readability-isolate-declaration</h1>
<p>Detects local variable declarations declaring more than one variable and tries to refactor the code to one statement per declaration.</p>
<p>The automatic code-transformation will use the same indentation as the original for every created statement and add a line break after each statement. It keeps the order of the variable declarations consistent, too.</p>
<pre class="sourceCode c++"><code>void f() {
  int * pointer = nullptr, value = 42, * const const_ptr = &amp;value;
  // This declaration will be diagnosed and transformed into:
  // int * pointer = nullptr;
  // int value = 42;
  // int * const const_ptr = &amp;value;
}</code></pre>
<p>The check excludes places where it is necessary or common to declare multiple variables in one statement and there is no other way supported in the language. Please note that structured bindings are not considered.</p>
<pre class="sourceCode c++"><code>// It is not possible to transform this declaration and doing the declaration
// before the loop will increase the scope of the variable &#39;Begin&#39; and &#39;End&#39;
// which is undesirable.
for (int Begin = 0, End = 100; Begin &lt; End; ++Begin);
if (int Begin = 42, Result = some_function(Begin); Begin == Result);

// It is not possible to transform this declaration because the result is
// not functionality preserving as &#39;j&#39; and &#39;k&#39; would not be part of the
// &#39;if&#39; statement anymore.
if (SomeCondition())
  int i = 42, j = 43, k = function(i,j);</code></pre>
<h2 id="limitations">Limitations</h2>
<p>Global variables and member variables are excluded.</p>
<p>The check currently does not support the automatic transformation of member-pointer-types.</p>
<pre class="sourceCode c++"><code>struct S {
  int a;
  const int b;
  void f() {}
};

void f() {
  // Only a diagnostic message is emitted
  int S::*p = &amp;S::a, S::*const q = &amp;S::a;
}</code></pre>
<p>Furthermore, the transformation is very cautious when it detects various kinds of macros or preprocessor directives in the range of the statement. In this case the transformation will not happen to avoid unexpected side-effects due to macros.</p>
<pre class="sourceCode c++"><code>#define NULL 0
#define MY_NICE_TYPE int **
#define VAR_NAME(name) name##__LINE__
#define A_BUNCH_OF_VARIABLES int m1 = 42, m2 = 43, m3 = 44;

void macros() {
  int *p1 = NULL, *p2 = NULL;
  // Will be transformed to
  // int *p1 = NULL;
  // int *p2 = NULL;

  MY_NICE_TYPE p3, v1, v2;
  // Won&#39;t be transformed, but a diagnostic is emitted.

  int VAR_NAME(v3),
      VAR_NAME(v4),
      VAR_NAME(v5);
  // Won&#39;t be transformed, but a diagnostic is emitted.

  A_BUNCH_OF_VARIABLES
  // Won&#39;t be transformed, but a diagnostic is emitted.

  int Unconditional,
#if CONFIGURATION
      IfConfigured = 42,
#else
      IfConfigured = 0;
#endif
  // Won&#39;t be transformed, but a diagnostic is emitted.
}</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-isolate-declaration.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-redundant-preprocessor</key>
  <name>readability-redundant-preprocessor</name>
  <description><![CDATA[
      <h1 id="readability-redundant-preprocessor">readability-redundant-preprocessor</h1>
<p>Finds potentially redundant preprocessor directives. At the moment the following cases are detected:</p>
<ul>
<li>#ifdef .. #endif pairs which are nested inside an outer pair with the same condition. For example:</li>
</ul>
<pre class="sourceCode c++"><code>#ifdef FOO
#ifdef FOO // inner ifdef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li>Same for #ifndef .. #endif pairs. For example:</li>
</ul>
<pre class="sourceCode c++"><code>#ifndef FOO
#ifndef FOO // inner ifndef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li>#ifndef inside an #ifdef with the same condition:</li>
</ul>
<pre class="sourceCode c++"><code>#ifdef FOO
#ifndef FOO // inner ifndef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li>#ifdef inside an #ifndef with the same condition:</li>
</ul>
<pre class="sourceCode c++"><code>#ifndef FOO
#ifdef FOO // inner ifdef is considered redundant
void f();
#endif
#endif</code></pre>
<ul>
<li>#if .. #endif pairs which are nested inside an outer pair with the same condition. For example:</li>
</ul>
<pre class="sourceCode c++"><code>#define FOO 4
#if FOO == 4
#if FOO == 4 // inner if is considered redundant
void f();
#endif
#endif</code></pre>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-redundant-preprocessor.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
<rule>
  <key>readability-uppercase-literal-suffix</key>
  <name>readability-uppercase-literal-suffix</name>
  <description><![CDATA[
      <h1 id="readability-uppercase-literal-suffix">readability-uppercase-literal-suffix</h1>
<p>cert-dcl16-c redirects here as an alias for this check. By default, only the suffixes that begin with <code>l</code> (<code>l</code>, <code>ll</code>, <code>lu</code>, <code>llu</code>, but not <code>u</code>, <code>ul</code>, <code>ull</code>) are diagnosed by that alias.</p>
<p>hicpp-uppercase-literal-suffix redirects here as an alias for this check.</p>
<p>Detects when the integral literal or floating point (decimal or hexadecimal) literal has a non-uppercase suffix and provides a fix-it hint with the uppercase suffix.</p>
<p>All valid combinations of suffixes are supported.</p>
<pre class="sourceCode c"><code>auto x = 1;  // OK, no suffix.

auto x = 1u; // warning: integer literal suffix &#39;u&#39; is not upper-case

auto x = 1U; // OK, suffix is uppercase.

...</code></pre>
<h2 id="options">Options</h2>
<h3 id="example">Example</h3>
<p>Given a list `L;uL`:</p>
<ul>
<li><code>l</code> -&gt; <code>L</code></li>
<li><code>L</code> will be kept as is.</li>
<li><code>ul</code> -&gt; <code>uL</code></li>
<li><code>Ul</code> -&gt; <code>uL</code></li>
<li><code>UL</code> -&gt; <code>uL</code></li>
<li><code>uL</code> will be kept as is.</li>
<li><code>ull</code> will be kept as is, since it is not in the list</li>
<li>and so on.</li>
</ul>
<h2>References</h2>
<p><a href="http://clang.llvm.org/extra/clang-tidy/checks/readability-uppercase-literal-suffix.html" target="_blank">clang.llvm.org</a></p>
      ]]></description>
  <severity>INFO</severity>
  <status>BETA</status>
  <type>CODE_SMELL</type>
  <tag>clang-tidy</tag>
  </rule>
</rules>
