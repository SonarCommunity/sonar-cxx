/*
 * Sonar C++ Plugin (Community)
 * Copyright (C) 2010-2019 SonarOpenCommunity
 * http://github.com/SonarOpenCommunity/sonar-cxx
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.cxx.sensors.utils;

import java.io.File;
import java.io.IOException;
import java.nio.file.LinkOption;
import java.nio.file.Path;
import java.util.Optional;
import java.util.Set;
import java.util.regex.Pattern;
import javax.xml.XMLConstants;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.apache.commons.lang.exception.ExceptionUtils;
import org.sonar.api.batch.fs.InputFile;
import org.sonar.api.batch.sensor.SensorContext;
import org.sonar.api.utils.log.Logger;
import org.sonar.api.utils.log.Loggers;
import org.sonar.cxx.CxxLanguage;

/**
 * Utility class holding various, well, utilities
 */
public final class CxxUtils {

  public static final String ERROR_RECOVERY_KEY = "errorRecoveryEnabled";
  public static final Pattern EOL_PATTERN = Pattern.compile("\\R");
  private static final Logger LOG = Loggers.get(CxxUtils.class);

  private CxxUtils() {
    // only static methods
  }

  /**
   * transformFile
   *
   * @param stylesheetFile
   * @param input
   * @param output
   * @exception TransformerException
   */
  public static void transformFile(Source stylesheetFile, File input, File output) throws TransformerException {
    TransformerFactory factory = TransformerFactory.newInstance();
    factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
    Transformer transformer = factory.newTransformer(stylesheetFile);
    transformer.setOutputProperty(OutputKeys.INDENT, "yes");
    transformer.transform(new StreamSource(input), new StreamResult(output));
  }

  /**
   * <p>
   * Gets the stack trace from a Throwable as a String.</p>
   *
   * @param throwable the <code>Throwable</code> to be examined
   * @return the stack trace as generated by the exception's printStackTrace(PrintWriter) method
   */
  public static String getStackTrace(final Throwable throwable) {
    return ExceptionUtils.getStackTrace(throwable);
  }

  /**
   * validateRecovery
   *
   * @param ex
   * @param language
   */
  public static void validateRecovery(Exception ex, CxxLanguage language) {
    Optional<Boolean> recovery = language.IsRecoveryEnabled();
    if (recovery.isPresent() && recovery.get()) {
      return;
    }
    LOG.info("Recovery is disabled, failing analysis : '{}'", ex.toString());
    throw new IllegalStateException(ex.getMessage(), ex.getCause());
  }

  public static InputFile getInputFileIfInProject(SensorContext sensorContext, String path, Set<String> notFoundFiles) {
    if (notFoundFiles.contains(path)) {
      return null;
    }

    // 1. try the most generic search predicate first; usually it's the right
    // one
    InputFile inputFile = sensorContext.fileSystem()
        .inputFile(sensorContext.fileSystem().predicates().hasPath(path));

    // 2. if there was nothing found, try to normalize the path by means of
    // Path::toRealPath(). This helps if some 3rd party tools obfuscate the
    // paths. E.g. the MS VC compiler tends to transform file paths to the lower
    // case in its logs.
    //
    // IMPORTANT: SQ plugin API allows creation of NewIssue only on locations,
    // which belong to the module. This internal check is performed by means
    // of comparison of the paths. The paths which are managed by the framework
    // (the reference paths) are NOT stored in the canonical form.
    // E.g. the plugin API neither resolves symbolic links nor performs
    // case-insensitive path normalization (could be relevant on Windows)
    //
    // Normalization by means of File::getCanonicalFile() or Path::toRealPath()
    // can produce paths, which don't pass the mentioned check. E.g. resolution
    // of symbolic links or letter case transformation
    // might lead to the paths, which don't belong to the module's base
    // directory (at least not in terms of parent-child semantic). This is the
    // reason why we should avoid the resolution of symbolic links and not use
    // the Path::toRealPath() as the only search predicate.

    if (inputFile == null) {
      inputFile = getInputFileTryRealPath(sensorContext, path);
    }

    if (inputFile == null) {
      LOG.warn("Cannot find the file '{}' in module '{}' base dir '{}', skipping violations.",
        path, sensorContext.module().key(), sensorContext.fileSystem().baseDir());
      notFoundFiles.add(path);
    }
    return inputFile;
  } 
  
   private static InputFile getInputFileTryRealPath(SensorContext sensorContext, String path) {
    final Path absolutePath = sensorContext.fileSystem().baseDir().toPath().resolve(path);
    Path realPath;
    try {
      realPath = absolutePath.toRealPath(LinkOption.NOFOLLOW_LINKS);
    } catch (IOException | RuntimeException e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Unable to get the real path: module '{}', baseDir '{}', path '{}', exception '{}'",
            sensorContext.module().key(), sensorContext.fileSystem().baseDir(), path, e.getMessage());
      }
      return null;
    }

    // if the real path is equal to the given one - skip search; we already
    // tried such path
    //
    // IMPORTANT: don't use Path::equals(), since it's dependent on a file-system.
    // SonarQube plugin API works with string paths, so the equality of strings
    // is important
    final String realPathString = realPath.toString();
    if (absolutePath.toString().equals(realPathString)) {
      return null;
    }

    return sensorContext.fileSystem()
        .inputFile(sensorContext.fileSystem().predicates().hasAbsolutePath(realPathString));
  } 
}
